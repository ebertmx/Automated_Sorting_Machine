
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00001608  0000169c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f2  00800230  00800230  000016cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026fe  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001198  00000000  00000000  00004012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001595  00000000  00000000  000051aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  00006740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7e  00000000  00000000  00006d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00007782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000088b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_1>
       8:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_2>
       c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_3>
      10:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_32>
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5b c6       	rjmp	.+3254   	; 0xd60 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c5       	rjmp	.+2680   	; 0xb36 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e0       	ldi	r30, 0x08	; 8
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 33       	cpi	r26, 0x30	; 48
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e3       	ldi	r26, 0x30	; 48
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 32       	cpi	r26, 0x22	; 34
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	43 d7       	rcall	.+3718   	; 0xfa6 <main>
     120:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <_exit>

00000124 <__bad_interrupt>:
     124:	34 c6       	rjmp	.+3176   	; 0xd8e <__vector_default>

00000126 <LCDBusyLoop>:

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>
     14e:	86 b1       	in	r24, 0x06	; 6
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
     178:	96 b1       	in	r25, 0x06	; 6
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
     1aa:	8f 70       	andi	r24, 0x0F	; 15
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     218:	03 c0       	rjmp	.+6      	; 0x220 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	c3 df       	rcall	.-122    	; 0x1a4 <LCDByte>
	msg++;
     21e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     220:	88 81       	ld	r24, Y
     222:	81 11       	cpse	r24, r1
     224:	fa cf       	rjmp	.-12     	; 0x21a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <LCDWriteInt+0xe>
     23a:	1f 92       	push	r1
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     244:	fe 01       	movw	r30, r28
     246:	31 96       	adiw	r30, 0x01	; 1
     248:	25 e0       	ldi	r18, 0x05	; 5
     24a:	df 01       	movw	r26, r30
     24c:	1d 92       	st	X+, r1
     24e:	2a 95       	dec	r18
     250:	e9 f7       	brne	.-6      	; 0x24c <LCDWriteInt+0x20>
	int i=4,j=0;
     252:	24 e0       	ldi	r18, 0x04	; 4
     254:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     256:	0f c0       	rjmp	.+30     	; 0x276 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     258:	6a e0       	ldi	r22, 0x0A	; 10
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__divmodhi4>
     260:	e1 e0       	ldi	r30, 0x01	; 1
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	ec 0f       	add	r30, r28
     266:	fd 1f       	adc	r31, r29
     268:	e2 0f       	add	r30, r18
     26a:	f3 1f       	adc	r31, r19
     26c:	80 83       	st	Z, r24
	val=val/10;
     26e:	86 2f       	mov	r24, r22
     270:	97 2f       	mov	r25, r23
	i--;
     272:	21 50       	subi	r18, 0x01	; 1
     274:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	79 f7       	brne	.-34     	; 0x258 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     27a:	bf ef       	ldi	r27, 0xFF	; 255
     27c:	eb 16       	cp	r14, r27
     27e:	fb 06       	cpc	r15, r27
     280:	81 f4       	brne	.+32     	; 0x2a2 <LCDWriteInt+0x76>
     282:	03 c0       	rjmp	.+6      	; 0x28a <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     284:	0f 5f       	subi	r16, 0xFF	; 255
     286:	1f 4f       	sbci	r17, 0xFF	; 255
     288:	02 c0       	rjmp	.+4      	; 0x28e <LCDWriteInt+0x62>
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e0 0f       	add	r30, r16
     298:	f1 1f       	adc	r31, r17
     29a:	20 81       	ld	r18, Z
     29c:	22 23       	and	r18, r18
     29e:	91 f3       	breq	.-28     	; 0x284 <LCDWriteInt+0x58>
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     2a2:	05 e0       	ldi	r16, 0x05	; 5
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	0e 19       	sub	r16, r14
     2a8:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     2aa:	99 23       	and	r25, r25
     2ac:	84 f4       	brge	.+32     	; 0x2ce <LCDWriteInt+0xa2>
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	8d e2       	ldi	r24, 0x2D	; 45
     2b2:	78 df       	rcall	.-272    	; 0x1a4 <LCDByte>
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2b6:	e1 e0       	ldi	r30, 0x01	; 1
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	ec 0f       	add	r30, r28
     2bc:	fd 1f       	adc	r31, r29
     2be:	e0 0f       	add	r30, r16
     2c0:	f1 1f       	adc	r31, r17
     2c2:	80 81       	ld	r24, Z
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	80 5d       	subi	r24, 0xD0	; 208
     2c8:	6d df       	rcall	.-294    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
     2ce:	05 30       	cpi	r16, 0x05	; 5
     2d0:	11 05       	cpc	r17, r1
     2d2:	8c f3       	brlt	.-30     	; 0x2b6 <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	08 95       	ret

000002ec <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     2ec:	88 32       	cpi	r24, 0x28	; 40
     2ee:	28 f4       	brcc	.+10     	; 0x2fa <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     2f0:	61 11       	cpse	r22, r1
     2f2:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	80 68       	ori	r24, 0x80	; 128
     2f8:	55 cf       	rjmp	.-342    	; 0x1a4 <LCDByte>
     2fa:	08 95       	ret

000002fc <step>:
extern volatile char TARGETFLAG;
extern volatile char SLIPFLAG;


uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     2fc:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <__data_end>
     300:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     304:	89 0f       	add	r24, r25
     306:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     30a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	1c f0       	brlt	.+6      	; 0x318 <step+0x1c>
     312:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     316:	07 c0       	rjmp	.+14     	; 0x326 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     318:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     31c:	88 23       	and	r24, r24
     31e:	1c f4       	brge	.+6      	; 0x326 <step+0x2a>
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     326:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end>
     32a:	0e 2e       	mov	r0, r30
     32c:	00 0c       	add	r0, r0
     32e:	ff 0b       	sbc	r31, r31
     330:	e0 50       	subi	r30, 0x00	; 0
     332:	fe 4f       	sbci	r31, 0xFE	; 254
     334:	80 81       	ld	r24, Z
     336:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     338:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     33c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     340:	89 0f       	add	r24, r25
     342:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 200 && Dir==1){CurPosition -=  200;}
     346:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     34a:	89 3c       	cpi	r24, 0xC9	; 201
     34c:	50 f0       	brcs	.+20     	; 0x362 <step+0x66>
     34e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	31 f4       	brne	.+12     	; 0x362 <step+0x66>
     356:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     35a:	88 5c       	subi	r24, 0xC8	; 200
     35c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     360:	0d c0       	rjmp	.+26     	; 0x37c <step+0x80>
	else if(CurPosition < 50 && Dir==-1){CurPosition += 200;}
     362:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     366:	82 33       	cpi	r24, 0x32	; 50
     368:	48 f4       	brcc	.+18     	; 0x37c <step+0x80>
     36a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     36e:	8f 3f       	cpi	r24, 0xFF	; 255
     370:	29 f4       	brne	.+10     	; 0x37c <step+0x80>
     372:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     376:	88 53       	subi	r24, 0x38	; 56
     378:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     37c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     380:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	08 95       	ret

00000388 <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(SLIPFLAG)
     388:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <SLIPFLAG>
     38c:	88 23       	and	r24, r24
     38e:	61 f1       	breq	.+88     	; 0x3e8 <stepUpdateError+0x60>
	{
		CurError = Parts[countSort-1] - CurPosition;
     390:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	e3 54       	subi	r30, 0x43	; 67
     398:	fd 4f       	sbci	r31, 0xFD	; 253
     39a:	80 81       	ld	r24, Z
     39c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	82 1b       	sub	r24, r18
     3a4:	91 09       	sbc	r25, r1
     3a6:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     3aa:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
     3ae:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     3b2:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     3b6:	99 23       	and	r25, r25
     3b8:	1c f4       	brge	.+6      	; 0x3c0 <stepUpdateError+0x38>
     3ba:	91 95       	neg	r25
     3bc:	81 95       	neg	r24
     3be:	91 09       	sbc	r25, r1
     3c0:	44 97       	sbiw	r24, 0x14	; 20
     3c2:	0c f5       	brge	.+66     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			SLIPFLAG = 0;
     3c4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <SLIPFLAG>
			CurError = Parts[countSort] - CurPosition;
     3c8:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	e2 54       	subi	r30, 0x42	; 66
     3d0:	fd 4f       	sbci	r31, 0xFD	; 253
     3d2:	80 81       	ld	r24, Z
     3d4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	82 1b       	sub	r24, r18
     3dc:	91 09       	sbc	r25, r1
     3de:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     3e2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
     3e6:	0f c0       	rjmp	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     3e8:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	e2 54       	subi	r30, 0x42	; 66
     3f0:	fd 4f       	sbci	r31, 0xFD	; 253
     3f2:	80 81       	ld	r24, Z
     3f4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	82 1b       	sub	r24, r18
     3fc:	91 09       	sbc	r25, r1
     3fe:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     402:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
	}
	
	
	if(CurError>100)
     406:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     40a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     40e:	85 36       	cpi	r24, 0x65	; 101
     410:	91 05       	cpc	r25, r1
     412:	5c f0       	brlt	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		CurError = CurError - 200;
     414:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     418:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     41c:	88 5c       	subi	r24, 0xC8	; 200
     41e:	91 09       	sbc	r25, r1
     420:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     424:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
     428:	11 c0       	rjmp	.+34     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}else if(CurError<-100)
     42a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     42e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     432:	8c 39       	cpi	r24, 0x9C	; 156
     434:	9f 4f       	sbci	r25, 0xFF	; 255
     436:	54 f4       	brge	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		CurError = CurError + 200;
     438:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     43c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     440:	88 53       	subi	r24, 0x38	; 56
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     448:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
	}
	
	if(abs(CurError) < Steps2Acc)//change if slowing down to quickly at zone; may cause oscillation
     44c:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     450:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     454:	33 23       	and	r19, r19
     456:	1c f4       	brge	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	31 95       	neg	r19
     45a:	21 95       	neg	r18
     45c:	31 09       	sbc	r19, r1
     45e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	28 17       	cp	r18, r24
     466:	39 07       	cpc	r19, r25
     468:	24 f4       	brge	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	{
		TARGETFLAG = 1;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <TARGETFLAG>
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	}else
	{
		TARGETFLAG = 0;
     472:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <TARGETFLAG>
	}
	return 1;
}
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	08 95       	ret

0000047a <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     47a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     47e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     482:	89 2b       	or	r24, r25
     484:	91 f4       	brne	.+36     	; 0x4aa <stepUpdateDir+0x30>
		{// if stepper is at target
			if(CurDelay > (MAXDELAY-MINDELAY))
     486:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     48a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     48e:	8d 35       	cpi	r24, 0x5D	; 93
     490:	96 40       	sbci	r25, 0x06	; 6
     492:	30 f0       	brcs	.+12     	; 0x4a0 <stepUpdateDir+0x26>
			{// if stepper can stop
				Dir = 0; //stop stepping
     494:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				TARGETFLAG = 0; //clear target flag
     498:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <TARGETFLAG>
				return 1;	
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	08 95       	ret
			}else
			{//Decelerate stepper
				DECELFLAG = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <DECELFLAG>
				return 0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	08 95       	ret
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
     4aa:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     4ae:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     4b2:	99 23       	and	r25, r25
     4b4:	1c f4       	brge	.+6      	; 0x4bc <stepUpdateDir+0x42>
     4b6:	91 95       	neg	r25
     4b8:	81 95       	neg	r24
     4ba:	91 09       	sbc	r25, r1
     4bc:	8b 35       	cpi	r24, 0x5B	; 91
     4be:	91 05       	cpc	r25, r1
     4c0:	b4 f0       	brlt	.+44     	; 0x4ee <stepUpdateDir+0x74>
     4c2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     4c6:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     4ca:	81 15       	cp	r24, r1
     4cc:	99 40       	sbci	r25, 0x09	; 9
     4ce:	78 f4       	brcc	.+30     	; 0x4ee <stepUpdateDir+0x74>
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
     4d0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <DECELFLAG>
			if(Dir != 0)
     4d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     4d8:	88 23       	and	r24, r24
     4da:	29 f0       	breq	.+10     	; 0x4e6 <stepUpdateDir+0x6c>
			{//Keep direction
				NextDir = Dir;
     4dc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     4e0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
				return 0;
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
			if(Dir != 0)
     4e4:	18 c0       	rjmp	.+48     	; 0x516 <stepUpdateDir+0x9c>
			{//Keep direction
				NextDir = Dir;
			}else
			{//edge case where Dir might be zero
				Dir = 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     4ec:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     4ee:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     4f2:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	12 16       	cp	r1, r18
     4fa:	13 06       	cpc	r1, r19
     4fc:	0c f0       	brlt	.+2      	; 0x500 <stepUpdateDir+0x86>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     504:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     508:	93 2f       	mov	r25, r19
     50a:	99 1f       	adc	r25, r25
     50c:	99 27       	eor	r25, r25
     50e:	99 1f       	adc	r25, r25
     510:	89 1b       	sub	r24, r25
     512:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		
		if(CurDelay >= MAXDELAY)
     516:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     51a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     51e:	81 15       	cp	r24, r1
     520:	99 40       	sbci	r25, 0x09	; 9
     522:	30 f0       	brcs	.+12     	; 0x530 <stepUpdateDir+0xb6>
		{//stepper is can change direction
			Dir = NextDir;
     524:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     528:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	08 95       	ret
		}else if(NextDir == Dir)
     530:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     534:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     538:	98 13       	cpse	r25, r24
     53a:	06 c0       	rjmp	.+12     	; 0x548 <stepUpdateDir+0xce>
		{//next direction is the same
			Dir = NextDir;
     53c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     540:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
		}else
		{//Decelerate stepper to switch directions
			DECELFLAG = 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <DECELFLAG>
			return 0;
     54e:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 1;
}
     550:	08 95       	ret

00000552 <stepRes>:
}



void stepRes(void){
	accSteps = 0;
     552:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
	StepsDelta = 0;
     556:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <StepsDelta>
	CurDelay = MAXDELAY;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	99 e0       	ldi	r25, 0x09	; 9
     55e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     562:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
     566:	08 95       	ret

00000568 <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
     568:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     56c:	81 11       	cpse	r24, r1
     56e:	02 c0       	rjmp	.+4      	; 0x574 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
     570:	f0 df       	rcall	.-32     	; 0x552 <stepRes>
     572:	75 c0       	rjmp	.+234    	; 0x65e <stepUpdateDelay+0xf6>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     574:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <TARGETFLAG>
     578:	81 11       	cpse	r24, r1
     57a:	08 c0       	rjmp	.+16     	; 0x58c <stepUpdateDelay+0x24>
     57c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <DECELFLAG>
     580:	81 11       	cpse	r24, r1
     582:	04 c0       	rjmp	.+8      	; 0x58c <stepUpdateDelay+0x24>
     584:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PAUSEFLAG>
     588:	88 23       	and	r24, r24
     58a:	81 f1       	breq	.+96     	; 0x5ec <stepUpdateDelay+0x84>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
     58c:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e6 5a       	subi	r30, 0xA6	; 166
     598:	fd 4f       	sbci	r31, 0xFD	; 253
     59a:	20 81       	ld	r18, Z
     59c:	31 81       	ldd	r19, Z+1	; 0x01
     59e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     5a2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     5ae:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		if (CurDelay > MAXDELAY)
     5b2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     5b6:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	99 40       	sbci	r25, 0x09	; 9
     5be:	58 f0       	brcs	.+22     	; 0x5d6 <stepUpdateDelay+0x6e>
		{
			CurDelay = MAXDELAY;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	99 e0       	ldi	r25, 0x09	; 9
     5c4:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     5c8:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
			accSteps = 0;
     5cc:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
			DECELFLAG = 0;
     5d0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <DECELFLAG>
     5d4:	44 c0       	rjmp	.+136    	; 0x65e <stepUpdateDelay+0xf6>
		}else if(accSteps>0){
     5d6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <stepUpdateDelay+0x78>
     5de:	3f c0       	rjmp	.+126    	; 0x65e <stepUpdateDelay+0xf6>
			accSteps--;
     5e0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
     5ea:	39 c0       	rjmp	.+114    	; 0x65e <stepUpdateDelay+0xf6>
		}
	}else if(CurDelay>MINDELAY)
     5ec:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     5f0:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     5f4:	85 3a       	cpi	r24, 0xA5	; 165
     5f6:	92 40       	sbci	r25, 0x02	; 2
     5f8:	e0 f1       	brcs	.+120    	; 0x672 <stepUpdateDelay+0x10a>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
     5fa:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     5fe:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     602:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	e6 5a       	subi	r30, 0xA6	; 166
     60e:	fd 4f       	sbci	r31, 0xFD	; 253
     610:	20 81       	ld	r18, Z
     612:	31 81       	ldd	r19, Z+1	; 0x01
     614:	82 1b       	sub	r24, r18
     616:	93 0b       	sbc	r25, r19
     618:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     61c:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
     620:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     624:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     628:	85 3a       	cpi	r24, 0xA5	; 165
     62a:	92 40       	sbci	r25, 0x02	; 2
     62c:	38 f0       	brcs	.+14     	; 0x63c <stepUpdateDelay+0xd4>
     62e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     632:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	99 40       	sbci	r25, 0x09	; 9
     63a:	30 f0       	brcs	.+12     	; 0x648 <stepUpdateDelay+0xe0>
		{//overflow protection
			CurDelay = MINDELAY;
     63c:	84 ea       	ldi	r24, 0xA4	; 164
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     644:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		}
		if(accSteps<Steps2Acc)
     648:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <accSteps>
     64c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     650:	98 17       	cp	r25, r24
     652:	28 f4       	brcc	.+10     	; 0x65e <stepUpdateDelay+0xf6>
		{//acceleration increase
			accSteps++;
     654:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
     65e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     662:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     666:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     66a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
     672:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     674:	08 95       	ret

00000676 <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     676:	e1 e9       	ldi	r30, 0x91	; 145
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     688:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     68c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     690:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     694:	e1 e7       	ldi	r30, 0x71	; 113
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	82 60       	ori	r24, 0x02	; 2
     69c:	80 83       	st	Z, r24
     69e:	08 95       	ret

000006a0 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     6a0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     6a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	39 e0       	ldi	r19, 0x09	; 9
     6ac:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6b0:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     6b4:	e1 e9       	ldi	r30, 0x91	; 145
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	83 60       	ori	r24, 0x03	; 3
     6bc:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     6be:	88 b3       	in	r24, 0x18	; 24
     6c0:	82 60       	ori	r24, 0x02	; 2
     6c2:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     6c4:	30 93 34 02 	sts	0x0234, r19	; 0x800234 <CurDelay+0x1>
     6c8:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <CurDelay>
     6cc:	08 95       	ret

000006ce <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     6ce:	e1 e9       	ldi	r30, 0x91	; 145
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8d 7f       	andi	r24, 0xFD	; 253
     6d6:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     6d8:	80 81       	ld	r24, Z
     6da:	8e 7f       	andi	r24, 0xFE	; 254
     6dc:	80 83       	st	Z, r24
     6de:	08 95       	ret

000006e0 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     6e0:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <CurAcc+0x1>
     6e4:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	39 e0       	ldi	r19, 0x09	; 9

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	25 c0       	rjmp	.+74     	; 0x73c <stepCalcAcc+0x5c>
		delay -=CurAcc[steps-1];
     6f2:	fc 01       	movw	r30, r24
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	e6 5a       	subi	r30, 0xA6	; 166
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	40 81       	ld	r20, Z
     700:	51 81       	ldd	r21, Z+1	; 0x01
     702:	24 1b       	sub	r18, r20
     704:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     706:	40 81       	ld	r20, Z
     708:	51 81       	ldd	r21, Z+1	; 0x01
     70a:	4b 5a       	subi	r20, 0xAB	; 171
     70c:	5f 4f       	sbci	r21, 0xFF	; 255
     70e:	fc 01       	movw	r30, r24
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	e6 5a       	subi	r30, 0xA6	; 166
     716:	fd 4f       	sbci	r31, 0xFD	; 253
     718:	51 83       	std	Z+1, r21	; 0x01
     71a:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     71c:	40 81       	ld	r20, Z
     71e:	51 81       	ldd	r21, Z+1	; 0x01
     720:	4f 3f       	cpi	r20, 0xFF	; 255
     722:	51 05       	cpc	r21, r1
     724:	51 f0       	breq	.+20     	; 0x73a <stepCalcAcc+0x5a>
     726:	48 f0       	brcs	.+18     	; 0x73a <stepCalcAcc+0x5a>
			CurAcc[steps] = MAXACC;
     728:	fc 01       	movw	r30, r24
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	e6 5a       	subi	r30, 0xA6	; 166
     730:	fd 4f       	sbci	r31, 0xFD	; 253
     732:	4f ef       	ldi	r20, 0xFF	; 255
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	51 83       	std	Z+1, r21	; 0x01
     738:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	83 30       	cpi	r24, 0x03	; 3
     73e:	91 05       	cpc	r25, r1
     740:	c0 f2       	brcs	.-80     	; 0x6f2 <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     742:	fc 01       	movw	r30, r24
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e6 5a       	subi	r30, 0xA6	; 166
     74a:	fd 4f       	sbci	r31, 0xFD	; 253
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	51 83       	std	Z+1, r21	; 0x01
     752:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     754:	1a c0       	rjmp	.+52     	; 0x78a <stepCalcAcc+0xaa>
		
		delay -=CurAcc[steps-1];
     756:	fc 01       	movw	r30, r24
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	e6 5a       	subi	r30, 0xA6	; 166
     760:	fd 4f       	sbci	r31, 0xFD	; 253
     762:	40 81       	ld	r20, Z
     764:	51 81       	ldd	r21, Z+1	; 0x01
     766:	24 1b       	sub	r18, r20
     768:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     76a:	24 3a       	cpi	r18, 0xA4	; 164
     76c:	42 e0       	ldi	r20, 0x02	; 2
     76e:	34 07       	cpc	r19, r20
     770:	10 f4       	brcc	.+4      	; 0x776 <stepCalcAcc+0x96>
			delay = MINDELAY;
     772:	24 ea       	ldi	r18, 0xA4	; 164
     774:	32 e0       	ldi	r19, 0x02	; 2
		}
		steps++;
     776:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     778:	fc 01       	movw	r30, r24
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e6 5a       	subi	r30, 0xA6	; 166
     780:	fd 4f       	sbci	r31, 0xFD	; 253
     782:	4f ef       	ldi	r20, 0xFF	; 255
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	51 83       	std	Z+1, r21	; 0x01
     788:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     78a:	a9 01       	movw	r20, r18
     78c:	4d 57       	subi	r20, 0x7D	; 125
     78e:	52 40       	sbci	r21, 0x02	; 2
     790:	45 3a       	cpi	r20, 0xA5	; 165
     792:	52 40       	sbci	r21, 0x02	; 2
     794:	00 f7       	brcc	.-64     	; 0x756 <stepCalcAcc+0x76>
     796:	2b c0       	rjmp	.+86     	; 0x7ee <stepCalcAcc+0x10e>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     798:	ac 01       	movw	r20, r24
     79a:	4f 5f       	subi	r20, 0xFF	; 255
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     79e:	fc 01       	movw	r30, r24
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e6 5a       	subi	r30, 0xA6	; 166
     7a6:	fd 4f       	sbci	r31, 0xFD	; 253
     7a8:	60 81       	ld	r22, Z
     7aa:	71 81       	ldd	r23, Z+1	; 0x01
     7ac:	26 1b       	sub	r18, r22
     7ae:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     7b0:	60 81       	ld	r22, Z
     7b2:	71 81       	ldd	r23, Z+1	; 0x01
     7b4:	65 35       	cpi	r22, 0x55	; 85
     7b6:	71 05       	cpc	r23, r1
     7b8:	48 f4       	brcc	.+18     	; 0x7cc <stepCalcAcc+0xec>
			CurAcc[steps] = 0;
     7ba:	fa 01       	movw	r30, r20
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	e6 5a       	subi	r30, 0xA6	; 166
     7c2:	fd 4f       	sbci	r31, 0xFD	; 253
     7c4:	11 82       	std	Z+1, r1	; 0x01
     7c6:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     7c8:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     7ca:	15 c0       	rjmp	.+42     	; 0x7f6 <stepCalcAcc+0x116>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	fc 01       	movw	r30, r24
     7d2:	e6 5a       	subi	r30, 0xA6	; 166
     7d4:	fd 4f       	sbci	r31, 0xFD	; 253
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	85 55       	subi	r24, 0x55	; 85
     7dc:	91 09       	sbc	r25, r1
     7de:	fa 01       	movw	r30, r20
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	e6 5a       	subi	r30, 0xA6	; 166
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     7ec:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     7ee:	25 3a       	cpi	r18, 0xA5	; 165
     7f0:	42 e0       	ldi	r20, 0x02	; 2
     7f2:	34 07       	cpc	r19, r20
     7f4:	88 f6       	brcc	.-94     	; 0x798 <stepCalcAcc+0xb8>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     7f6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     7fa:	08 95       	ret

000007fc <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     7fc:	71 df       	rcall	.-286    	; 0x6e0 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	99 e0       	ldi	r25, 0x09	; 9
     802:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     806:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     80a:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     80e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     812:	82 e3       	ldi	r24, 0x32	; 50
     814:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <Parts>

	stepStart();//Start stepTimer
     818:	43 df       	rcall	.-378    	; 0x6a0 <stepStart>
		
	while(!HALLSENSOR){
     81a:	11 c0       	rjmp	.+34     	; 0x83e <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     81c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     820:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     824:	99 23       	and	r25, r25
     826:	1c f4       	brge	.+6      	; 0x82e <stepCalibrate+0x32>
     828:	91 95       	neg	r25
     82a:	81 95       	neg	r24
     82c:	91 09       	sbc	r25, r1
     82e:	44 97       	sbiw	r24, 0x14	; 20
     830:	34 f4       	brge	.+12     	; 0x83e <stepCalibrate+0x42>
     832:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <HALLSENSOR>
     836:	81 11       	cpse	r24, r1
     838:	02 c0       	rjmp	.+4      	; 0x83e <stepCalibrate+0x42>
			CurPosition = 0;
     83a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     83e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <HALLSENSOR>
     842:	88 23       	and	r24, r24
     844:	59 f3       	breq	.-42     	; 0x81c <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     846:	82 e3       	ldi	r24, 0x32	; 50
     848:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	08 95       	ret

00000850 <startMotor>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     850:	85 b1       	in	r24, 0x05	; 5
     852:	80 78       	andi	r24, 0x80	; 128
     854:	85 b9       	out	0x05, r24	; 5
     856:	85 b1       	in	r24, 0x05	; 5
     858:	8b 60       	ori	r24, 0x0B	; 11
     85a:	85 b9       	out	0x05, r24	; 5
     85c:	16 bc       	out	0x26, r1	; 38
     85e:	82 ed       	ldi	r24, 0xD2	; 210
     860:	87 bd       	out	0x27, r24	; 39
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <MOTORFLAG>
     868:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
     86c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
     870:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <motorTime_d+0x1>
     874:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <motorTime_d>
     878:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     87c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     880:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     884:	08 95       	ret

00000886 <runMotor>:
     886:	85 b1       	in	r24, 0x05	; 5
     888:	80 78       	andi	r24, 0x80	; 128
     88a:	85 b9       	out	0x05, r24	; 5
     88c:	85 b1       	in	r24, 0x05	; 5
     88e:	8b 60       	ori	r24, 0x0B	; 11
     890:	85 b9       	out	0x05, r24	; 5
     892:	16 bc       	out	0x26, r1	; 38
     894:	80 ea       	ldi	r24, 0xA0	; 160
     896:	87 bd       	out	0x27, r24	; 39
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <MOTORFLAG>
     89e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
     8a2:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
     8a6:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <motorTime_d+0x1>
     8aa:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <motorTime_d>
     8ae:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     8b2:	08 95       	ret

000008b4 <brakeMotor>:
     8b4:	85 b1       	in	r24, 0x05	; 5
     8b6:	80 78       	andi	r24, 0x80	; 128
     8b8:	85 b9       	out	0x05, r24	; 5
     8ba:	85 b1       	in	r24, 0x05	; 5
     8bc:	8f 60       	ori	r24, 0x0F	; 15
     8be:	85 b9       	out	0x05, r24	; 5
     8c0:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <MOTORFLAG>
     8c4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     8c8:	08 95       	ret

000008ca <updateMotor>:
     8ca:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     8ce:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     8d2:	99 23       	and	r25, r25
     8d4:	1c f4       	brge	.+6      	; 0x8dc <updateMotor+0x12>
     8d6:	91 95       	neg	r25
     8d8:	81 95       	neg	r24
     8da:	91 09       	sbc	r25, r1
     8dc:	45 97       	sbiw	r24, 0x15	; 21
     8de:	0c f4       	brge	.+2      	; 0x8e2 <updateMotor+0x18>
     8e0:	73 c0       	rjmp	.+230    	; 0x9c8 <updateMotor+0xfe>
     8e2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <SLIPFLAG>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <updateMotor+0x26>
     8ea:	e4 df       	rcall	.-56     	; 0x8b4 <brakeMotor>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret
     8f0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <EXFLAG>
     8f4:	81 11       	cpse	r24, r1
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <updateMotor+0x3c>
     8f8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     8fc:	81 11       	cpse	r24, r1
     8fe:	df c0       	rjmp	.+446    	; 0xabe <updateMotor+0x1f4>
     900:	c2 df       	rcall	.-124    	; 0x886 <runMotor>
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	08 95       	ret
     906:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     90a:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     90e:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     912:	42 03       	mulsu	r20, r18
     914:	c0 01       	movw	r24, r0
     916:	43 9f       	mul	r20, r19
     918:	90 0d       	add	r25, r0
     91a:	11 24       	eor	r1, r1
     91c:	99 23       	and	r25, r25
     91e:	0c f4       	brge	.+2      	; 0x922 <updateMotor+0x58>
     920:	50 c0       	rjmp	.+160    	; 0x9c2 <updateMotor+0xf8>
     922:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     926:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     92a:	84 5a       	subi	r24, 0xA4	; 164
     92c:	92 40       	sbci	r25, 0x02	; 2
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     936:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	24 1b       	sub	r18, r20
     93e:	31 09       	sbc	r19, r1
     940:	28 9f       	mul	r18, r24
     942:	a0 01       	movw	r20, r0
     944:	29 9f       	mul	r18, r25
     946:	50 0d       	add	r21, r0
     948:	38 9f       	mul	r19, r24
     94a:	50 0d       	add	r21, r0
     94c:	11 24       	eor	r1, r1
     94e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     952:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     956:	99 23       	and	r25, r25
     958:	1c f4       	brge	.+6      	; 0x960 <updateMotor+0x96>
     95a:	91 95       	neg	r25
     95c:	81 95       	neg	r24
     95e:	91 09       	sbc	r25, r1
     960:	44 97       	sbiw	r24, 0x14	; 20
     962:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     966:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	26 1b       	sub	r18, r22
     96e:	31 09       	sbc	r19, r1
     970:	82 1b       	sub	r24, r18
     972:	93 0b       	sbc	r25, r19
     974:	64 ea       	ldi	r22, 0xA4	; 164
     976:	72 e0       	ldi	r23, 0x02	; 2
     978:	86 9f       	mul	r24, r22
     97a:	90 01       	movw	r18, r0
     97c:	87 9f       	mul	r24, r23
     97e:	30 0d       	add	r19, r0
     980:	96 9f       	mul	r25, r22
     982:	30 0d       	add	r19, r0
     984:	11 24       	eor	r1, r1
     986:	c9 01       	movw	r24, r18
     988:	84 0f       	add	r24, r20
     98a:	95 1f       	adc	r25, r21
     98c:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <enterTime+0x1>
     990:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <enterTime>
     994:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     998:	88 23       	and	r24, r24
     99a:	49 f0       	breq	.+18     	; 0x9ae <updateMotor+0xe4>
     99c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <enterTime>
     9a0:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <enterTime+0x1>
     9a4:	81 15       	cp	r24, r1
     9a6:	90 45       	sbci	r25, 0x50	; 80
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <updateMotor+0xe2>
     9aa:	8b c0       	rjmp	.+278    	; 0xac2 <updateMotor+0x1f8>
     9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <updateMotor+0xf8>
     9ae:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <enterTime>
     9b2:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <enterTime+0x1>
     9b6:	81 15       	cp	r24, r1
     9b8:	90 45       	sbci	r25, 0x50	; 80
     9ba:	18 f4       	brcc	.+6      	; 0x9c2 <updateMotor+0xf8>
     9bc:	64 df       	rcall	.-312    	; 0x886 <runMotor>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret
     9c2:	78 df       	rcall	.-272    	; 0x8b4 <brakeMotor>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     9cc:	81 11       	cpse	r24, r1
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <updateMotor+0x108>
     9d0:	5a df       	rcall	.-332    	; 0x886 <runMotor>
     9d2:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     9d6:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     9da:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     9de:	42 03       	mulsu	r20, r18
     9e0:	c0 01       	movw	r24, r0
     9e2:	43 9f       	mul	r20, r19
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	18 16       	cp	r1, r24
     9ea:	19 06       	cpc	r1, r25
     9ec:	0c f0       	brlt	.+2      	; 0x9f0 <updateMotor+0x126>
     9ee:	6b c0       	rjmp	.+214    	; 0xac6 <updateMotor+0x1fc>
     9f0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     9f4:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     9f8:	84 5a       	subi	r24, 0xA4	; 164
     9fa:	92 40       	sbci	r25, 0x02	; 2
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     a04:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	24 1b       	sub	r18, r20
     a0c:	31 09       	sbc	r19, r1
     a0e:	28 9f       	mul	r18, r24
     a10:	a0 01       	movw	r20, r0
     a12:	29 9f       	mul	r18, r25
     a14:	50 0d       	add	r21, r0
     a16:	38 9f       	mul	r19, r24
     a18:	50 0d       	add	r21, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     a20:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e3 54       	subi	r30, 0x43	; 67
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	80 81       	ld	r24, Z
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	28 1b       	sub	r18, r24
     a30:	31 09       	sbc	r19, r1
     a32:	84 e1       	ldi	r24, 0x14	; 20
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	82 1b       	sub	r24, r18
     a38:	93 0b       	sbc	r25, r19
     a3a:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     a3e:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	26 1b       	sub	r18, r22
     a46:	31 09       	sbc	r19, r1
     a48:	82 1b       	sub	r24, r18
     a4a:	93 0b       	sbc	r25, r19
     a4c:	64 ea       	ldi	r22, 0xA4	; 164
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	86 9f       	mul	r24, r22
     a52:	90 01       	movw	r18, r0
     a54:	87 9f       	mul	r24, r23
     a56:	30 0d       	add	r19, r0
     a58:	96 9f       	mul	r25, r22
     a5a:	30 0d       	add	r19, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	42 0f       	add	r20, r18
     a60:	53 1f       	adc	r21, r19
     a62:	50 93 3f 02 	sts	0x023F, r21	; 0x80023f <exitTime+0x1>
     a66:	40 93 3e 02 	sts	0x023E, r20	; 0x80023e <exitTime>
     a6a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <exitTime>
     a6e:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <exitTime+0x1>
     a72:	81 15       	cp	r24, r1
     a74:	90 45       	sbci	r25, 0x50	; 80
     a76:	f8 f4       	brcc	.+62     	; 0xab6 <updateMotor+0x1ec>
     a78:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PAUSEFLAG>
     a7c:	88 23       	and	r24, r24
     a7e:	81 f0       	breq	.+32     	; 0xaa0 <updateMotor+0x1d6>
     a80:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <CurDelay>
     a84:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <CurDelay+0x1>
     a88:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <exitdropTime>
     a8c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <exitdropTime+0x1>
     a90:	82 1b       	sub	r24, r18
     a92:	93 0b       	sbc	r25, r19
     a94:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <exitdropTime+0x1>
     a98:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <exitdropTime>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	08 95       	ret
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <PAUSEFLAG>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e5       	ldi	r25, 0x50	; 80
     aaa:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <exitdropTime+0x1>
     aae:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <exitdropTime>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <PAUSEFLAG>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	08 95       	ret
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	08 95       	ret
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	08 95       	ret
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	08 95       	ret

00000aca <stopMotor>:
     aca:	15 b8       	out	0x05, r1	; 5
     acc:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <MOTORFLAG>
     ad0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
     ad4:	08 95       	ret

00000ad6 <Motor_init>:
     ad6:	84 b5       	in	r24, 0x24	; 36
     ad8:	83 68       	ori	r24, 0x83	; 131
     ada:	84 bd       	out	0x24, r24	; 36
     adc:	85 b5       	in	r24, 0x25	; 37
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	85 bd       	out	0x25, r24	; 37
     ae2:	85 b3       	in	r24, 0x15	; 21
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	85 bb       	out	0x15, r24	; 21
     ae8:	17 bc       	out	0x27, r1	; 39
     aea:	ef cf       	rjmp	.-34     	; 0xaca <stopMotor>
     aec:	08 95       	ret

00000aee <motorTimerStart>:
     aee:	e1 e2       	ldi	r30, 0x21	; 33
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	80 81       	ld	r24, Z
     af4:	88 60       	ori	r24, 0x08	; 8
     af6:	80 83       	st	Z, r24
     af8:	80 e8       	ldi	r24, 0x80	; 128
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     b00:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     b04:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     b08:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     b0c:	a3 e7       	ldi	r26, 0x73	; 115
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	8c 91       	ld	r24, X
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	8c 93       	st	X, r24
     b16:	80 81       	ld	r24, Z
     b18:	85 60       	ori	r24, 0x05	; 5
     b1a:	80 83       	st	Z, r24
     b1c:	8a b3       	in	r24, 0x1a	; 26
     b1e:	82 60       	ori	r24, 0x02	; 2
     b20:	8a bb       	out	0x1a, r24	; 26
     b22:	80 ea       	ldi	r24, 0xA0	; 160
     b24:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     b28:	08 95       	ret

00000b2a <motorTimerStop>:
     b2a:	e1 e2       	ldi	r30, 0x21	; 33
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	8a 7f       	andi	r24, 0xFA	; 250
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret

00000b36 <__vector_47>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	4f 93       	push	r20
     b4a:	5f 93       	push	r21
     b4c:	6f 93       	push	r22
     b4e:	7f 93       	push	r23
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
     b5c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     b6e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     b72:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     b76:	86 39       	cpi	r24, 0x96	; 150
     b78:	20 f4       	brcc	.+8      	; 0xb82 <__vector_47+0x4c>
     b7a:	86 e9       	ldi	r24, 0x96	; 150
     b7c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     b80:	d4 df       	rcall	.-88     	; 0xb2a <motorTimerStop>
     b82:	16 bc       	out	0x26, r1	; 38
     b84:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     b88:	87 bd       	out	0x27, r24	; 39
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <ADC_Init>:
     bb0:	ec e7       	ldi	r30, 0x7C	; 124
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 64       	ori	r24, 0x40	; 64
     bb8:	80 83       	st	Z, r24
     bba:	80 81       	ld	r24, Z
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
     bc0:	ea e7       	ldi	r30, 0x7A	; 122
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	80 83       	st	Z, r24
     bca:	80 81       	ld	r24, Z
     bcc:	88 60       	ori	r24, 0x08	; 8
     bce:	80 83       	st	Z, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	83 60       	ori	r24, 0x03	; 3
     bd4:	80 83       	st	Z, r24
     bd6:	08 95       	ret

00000bd8 <classify>:
     bd8:	8a 3b       	cpi	r24, 0xBA	; 186
     bda:	23 e0       	ldi	r18, 0x03	; 3
     bdc:	92 07       	cpc	r25, r18
     bde:	38 f0       	brcs	.+14     	; 0xbee <classify+0x16>
     be0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <countB>
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <countB>
     bea:	82 e3       	ldi	r24, 0x32	; 50
     bec:	08 95       	ret
     bee:	80 32       	cpi	r24, 0x20	; 32
     bf0:	23 e0       	ldi	r18, 0x03	; 3
     bf2:	92 07       	cpc	r25, r18
     bf4:	38 f0       	brcs	.+14     	; 0xc04 <classify+0x2c>
     bf6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <countW>
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <countW>
     c00:	86 e9       	ldi	r24, 0x96	; 150
     c02:	08 95       	ret
     c04:	80 39       	cpi	r24, 0x90	; 144
     c06:	91 40       	sbci	r25, 0x01	; 1
     c08:	38 f0       	brcs	.+14     	; 0xc18 <classify+0x40>
     c0a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countS>
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <countS>
     c14:	88 ec       	ldi	r24, 0xC8	; 200
     c16:	08 95       	ret
     c18:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <countA>
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <countA>
     c22:	84 e6       	ldi	r24, 0x64	; 100
     c24:	08 95       	ret

00000c26 <debounce>:
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	08 2e       	mov	r0, r24
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <debounce+0xc>
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <debounce+0x8>
     c36:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <debounce+0x18>
     c3c:	66 0f       	add	r22, r22
     c3e:	8a 95       	dec	r24
     c40:	ea f7       	brpl	.-6      	; 0xc3c <debounce+0x16>
     c42:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     c46:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     c4a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     c4e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <debounce+0x4c>
     c54:	99 b1       	in	r25, 0x09	; 9
     c56:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     c5a:	89 23       	and	r24, r25
     c5c:	68 13       	cpse	r22, r24
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <debounce+0x62>
     c60:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     c64:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     c6e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     c72:	84 2f       	mov	r24, r20
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     c7a:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	40 f3       	brcs	.-48     	; 0xc54 <debounce+0x2e>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	08 95       	ret
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret

00000c8c <debouncePINJ>:
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	08 2e       	mov	r0, r24
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <debouncePINJ+0xc>
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <debouncePINJ+0x8>
     c9c:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <debouncePINJ+0x18>
     ca2:	66 0f       	add	r22, r22
     ca4:	8a 95       	dec	r24
     ca6:	ea f7       	brpl	.-6      	; 0xca2 <debouncePINJ+0x16>
     ca8:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     cac:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     cb0:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     cb4:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     cb8:	10 c0       	rjmp	.+32     	; 0xcda <debouncePINJ+0x4e>
     cba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     cbe:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     cc2:	89 23       	and	r24, r25
     cc4:	68 13       	cpse	r22, r24
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <debouncePINJ+0x64>
     cc8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     ccc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     cd6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     cda:	84 2f       	mov	r24, r20
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     ce2:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	38 f3       	brcs	.-50     	; 0xcba <debouncePINJ+0x2e>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	08 95       	ret
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret

00000cf4 <mTimer_init>:
     cf4:	e1 e8       	ldi	r30, 0x81	; 129
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	80 83       	st	Z, r24
     cfe:	80 81       	ld	r24, Z
     d00:	88 60       	ori	r24, 0x08	; 8
     d02:	80 83       	st	Z, r24
     d04:	88 ee       	ldi	r24, 0xE8	; 232
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     d0c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     d10:	08 95       	ret

00000d12 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     d12:	e1 ea       	ldi	r30, 0xA1	; 161
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 60       	ori	r24, 0x08	; 8
     d1a:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     d1c:	87 e0       	ldi	r24, 0x07	; 7
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     d24:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     d28:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     d2c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     d30:	a2 e7       	ldi	r26, 0x72	; 114
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	8c 91       	ld	r24, X
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     d3a:	80 81       	ld	r24, Z
     d3c:	85 60       	ori	r24, 0x05	; 5
     d3e:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     d40:	89 b3       	in	r24, 0x19	; 25
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	89 bb       	out	0x19, r24	; 25
     d46:	08 95       	ret

00000d48 <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     d48:	e1 ea       	ldi	r30, 0xA1	; 161
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8a 7f       	andi	r24, 0xFA	; 250
     d50:	80 83       	st	Z, r24
     d52:	08 95       	ret

00000d54 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     d54:	e1 ea       	ldi	r30, 0xA1	; 161
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	85 60       	ori	r24, 0x05	; 5
     d5c:	80 83       	st	Z, r24
     d5e:	08 95       	ret

00000d60 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     d6e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
     d72:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <runTime_d+0x1>
     d7c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <runTime_d>
	
}//ISR
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	8f 93       	push	r24
	PORTC = 0xFF;
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     d9e:	8f 91       	pop	r24
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	fa d9       	rcall	.-3084   	; 0x1a4 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	9b da       	rcall	.-2762   	; 0x2ec <LCDGotoXY>
     db6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <countB>
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	35 da       	rcall	.-2966   	; 0x22c <LCDWriteInt>
		LCDWriteString(",");
     dc2:	83 e1       	ldi	r24, 0x13	; 19
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	25 da       	rcall	.-2998   	; 0x212 <LCDWriteString>
     dc8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <countA>
		LCDWriteInt( countA, 2);
     dcc:	62 e0       	ldi	r22, 0x02	; 2
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	2c da       	rcall	.-2984   	; 0x22c <LCDWriteInt>
		LCDWriteString(",");
     dd4:	83 e1       	ldi	r24, 0x13	; 19
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	1c da       	rcall	.-3016   	; 0x212 <LCDWriteString>
		LCDWriteInt( countW, 2);
     dda:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <countW>
     dde:	62 e0       	ldi	r22, 0x02	; 2
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	23 da       	rcall	.-3002   	; 0x22c <LCDWriteInt>
		LCDWriteString(",");
     de6:	83 e1       	ldi	r24, 0x13	; 19
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	13 da       	rcall	.-3034   	; 0x212 <LCDWriteString>
		LCDWriteInt(countS, 2);
     dec:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countS>
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	1a da       	rcall	.-3020   	; 0x22c <LCDWriteInt>
		LCDWriteString("->");
     df8:	85 e1       	ldi	r24, 0x15	; 21
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0a da       	rcall	.-3052   	; 0x212 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     dfe:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
     e02:	62 e0       	ldi	r22, 0x02	; 2
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	11 da       	rcall	.-3038   	; 0x22c <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	6e da       	rcall	.-2852   	; 0x2ec <LCDGotoXY>
     e10:	88 e1       	ldi	r24, 0x18	; 24
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	fe d9       	rcall	.-3076   	; 0x212 <LCDWriteString>
     e16:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     e1a:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <runTime_d+0x1>
     e1e:	36 95       	lsr	r19
     e20:	27 95       	ror	r18
     e22:	36 95       	lsr	r19
     e24:	27 95       	ror	r18
     e26:	36 95       	lsr	r19
     e28:	27 95       	ror	r18
     e2a:	a5 ec       	ldi	r26, 0xC5	; 197
     e2c:	b0 e2       	ldi	r27, 0x20	; 32
     e2e:	c7 d3       	rcall	.+1934   	; 0x15be <__umulhisi3>
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	92 95       	swap	r25
     e36:	82 95       	swap	r24
     e38:	8f 70       	andi	r24, 0x0F	; 15
     e3a:	89 27       	eor	r24, r25
     e3c:	9f 70       	andi	r25, 0x0F	; 15
     e3e:	89 27       	eor	r24, r25
     e40:	f5 d9       	rcall	.-3094   	; 0x22c <LCDWriteInt>
		LCDWriteString( ".");
     e42:	8b e1       	ldi	r24, 0x1B	; 27
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	e5 d9       	rcall	.-3126   	; 0x212 <LCDWriteString>
     e48:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
     e4c:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <runTime_d+0x1>
     e50:	9a 01       	movw	r18, r20
     e52:	ad ec       	ldi	r26, 0xCD	; 205
     e54:	bc ec       	ldi	r27, 0xCC	; 204
     e56:	b3 d3       	rcall	.+1894   	; 0x15be <__umulhisi3>
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	96 95       	lsr	r25
     e62:	87 95       	ror	r24
     e64:	9c 01       	movw	r18, r24
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	9a 01       	movw	r18, r20
     e80:	28 1b       	sub	r18, r24
     e82:	39 0b       	sbc	r19, r25
     e84:	c9 01       	movw	r24, r18
     e86:	d2 d9       	rcall	.-3164   	; 0x22c <LCDWriteInt>
     e88:	8d e1       	ldi	r24, 0x1D	; 29
		LCDWriteString("s Complete");
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	c2 c9       	rjmp	.-3196   	; 0x212 <LCDWriteString>
     e8e:	08 95       	ret

00000e90 <dispStatus>:
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
     e94:	87 d9       	rcall	.-3314   	; 0x1a4 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	28 da       	rcall	.-2992   	; 0x2ec <LCDGotoXY>
     e9c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	c2 d9       	rcall	.-3196   	; 0x22c <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	1f da       	rcall	.-3010   	; 0x2ec <LCDGotoXY>
     eae:	88 e2       	ldi	r24, 0x28	; 40
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	af d9       	rcall	.-3234   	; 0x212 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	19 da       	rcall	.-3022   	; 0x2ec <LCDGotoXY>
     eba:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
     ebe:	62 e0       	ldi	r22, 0x02	; 2
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	b3 d9       	rcall	.-3226   	; 0x22c <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	10 da       	rcall	.-3040   	; 0x2ec <LCDGotoXY>
     ecc:	8a e2       	ldi	r24, 0x2A	; 42
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	a0 d9       	rcall	.-3264   	; 0x212 <LCDWriteString>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	0a da       	rcall	.-3052   	; 0x2ec <LCDGotoXY>
     ed8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <countB>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a4 d9       	rcall	.-3256   	; 0x22c <LCDWriteInt>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
     ee6:	87 e0       	ldi	r24, 0x07	; 7
     ee8:	01 da       	rcall	.-3070   	; 0x2ec <LCDGotoXY>
     eea:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <countA>
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9b d9       	rcall	.-3274   	; 0x22c <LCDWriteInt>
     ef6:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	f8 d9       	rcall	.-3088   	; 0x2ec <LCDGotoXY>
     efc:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <countW>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	92 d9       	rcall	.-3292   	; 0x22c <LCDWriteInt>
     f08:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
     f0a:	89 e0       	ldi	r24, 0x09	; 9
     f0c:	ef d9       	rcall	.-3106   	; 0x2ec <LCDGotoXY>
     f0e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countS>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	89 d9       	rcall	.-3310   	; 0x22c <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	8a e0       	ldi	r24, 0x0A	; 10
     f1e:	e6 d9       	rcall	.-3124   	; 0x2ec <LCDGotoXY>
     f20:	8c e2       	ldi	r24, 0x2C	; 44
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	76 d9       	rcall	.-3348   	; 0x212 <LCDWriteString>
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
     f2a:	e0 d9       	rcall	.-3136   	; 0x2ec <LCDGotoXY>
     f2c:	8e e2       	ldi	r24, 0x2E	; 46
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	70 d9       	rcall	.-3360   	; 0x212 <LCDWriteString>
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
     f36:	da d9       	rcall	.-3148   	; 0x2ec <LCDGotoXY>
     f38:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <runTime_d>
     f3c:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <runTime_d+0x1>
     f40:	36 95       	lsr	r19
     f42:	27 95       	ror	r18
     f44:	36 95       	lsr	r19
     f46:	27 95       	ror	r18
     f48:	ab e7       	ldi	r26, 0x7B	; 123
     f4a:	b4 e1       	ldi	r27, 0x14	; 20
     f4c:	38 d3       	rcall	.+1648   	; 0x15be <__umulhisi3>
     f4e:	63 e0       	ldi	r22, 0x03	; 3
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	6a d9       	rcall	.-3372   	; 0x22c <LCDWriteInt>
	//LCDWriteStringXY(0,1,"N=" );
	//LCDWriteInt(enterTime,8);
	//LCDWriteString(" X=");
	//LCDWriteInt(exitTime,6);	

LCDWriteIntXY(0, 1, CurPosition, 3);
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	c7 d9       	rcall	.-3186   	; 0x2ec <LCDGotoXY>
     f5e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     f62:	63 e0       	ldi	r22, 0x03	; 3
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	61 d9       	rcall	.-3390   	; 0x22c <LCDWriteInt>
LCDWriteStringXY(3,1, ">");
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	be d9       	rcall	.-3204   	; 0x2ec <LCDGotoXY>
     f70:	86 e1       	ldi	r24, 0x16	; 22
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	4e d9       	rcall	.-3428   	; 0x212 <LCDWriteString>
     f76:	61 e0       	ldi	r22, 0x01	; 1
LCDWriteIntXY(4, 1, Parts[countSort], 3);
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	b8 d9       	rcall	.-3216   	; 0x2ec <LCDGotoXY>
     f7c:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	e2 54       	subi	r30, 0x42	; 66
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	80 81       	ld	r24, Z
     f88:	63 e0       	ldi	r22, 0x03	; 3
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	4e d9       	rcall	.-3428   	; 0x22c <LCDWriteInt>
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	8c e0       	ldi	r24, 0x0C	; 12
     f94:	ab d9       	rcall	.-3242   	; 0x2ec <LCDGotoXY>
// 
// 	LCDWriteIntXY(8,1, PAUSEFLAG,1);
// 	LCDWriteInt(SLIPFLAG,1);
//  	LCDWriteInt(TARGETFLAG,1);
//  	LCDWriteInt(DECELFLAG,1);
LCDWriteIntXY(12, 1, adcDisp, 4);
     f96:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcDisp>
     f9a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcDisp+0x1>
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	44 c9       	rjmp	.-3448   	; 0x22c <LCDWriteInt>
     fa4:	08 95       	ret

00000fa6 <main>:
     fa6:	e1 e6       	ldi	r30, 0x61	; 97
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	81 e0       	ldi	r24, 0x01	; 1


int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
     fb0:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
     fb2:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
     fb8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
     fba:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
     fbc:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
     fbe:	e4 e0       	ldi	r30, 0x04	; 4
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
     fc2:	80 81       	ld	r24, Z
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
     fc8:	e9 e6       	ldi	r30, 0x69	; 105
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	82 60       	ori	r24, 0x02	; 2
     fd0:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
     fd2:	80 81       	ld	r24, Z
     fd4:	8c 60       	ori	r24, 0x0C	; 12
     fd6:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
     fd8:	80 81       	ld	r24, Z
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
     fde:	80 81       	ld	r24, Z
     fe0:	80 6c       	ori	r24, 0xC0	; 192
     fe2:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);//RAMPDOWN
     fe4:	e8 e6       	ldi	r30, 0x68	; 104
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);
     fee:	ec e6       	ldi	r30, 0x6C	; 108
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24


	ADC_Init();
     ff8:	db dd       	rcall	.-1098   	; 0xbb0 <ADC_Init>
	mTimer_init();
     ffa:	7c de       	rcall	.-776    	; 0xcf4 <mTimer_init>
	stepTimer_init();
     ffc:	3c db       	rcall	.-2440   	; 0x676 <stepTimer_init>
     ffe:	8d b3       	in	r24, 0x1d	; 29
//	InitLCD(LS_BLINK|LS_ULINE);
//	LCDClear();
	EIMSK |= 0x08;
    1000:	88 60       	ori	r24, 0x08	; 8
    1002:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
    1004:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
    1006:	fa db       	rcall	.-2060   	; 0x7fc <stepCalibrate>
    1008:	8d b3       	in	r24, 0x1d	; 29
	//mTimer(2000);
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
    100a:	87 60       	ori	r24, 0x07	; 7
    100c:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
    100e:	8d b3       	in	r24, 0x1d	; 29
    1010:	87 7f       	andi	r24, 0xF7	; 247
    1012:	8d bb       	out	0x1d, r24	; 29
	Motor_init();
    1014:	60 dd       	rcall	.-1344   	; 0xad6 <Motor_init>
	//sei();
	
	//MAIN OPERATION
	countPart=0;
    1016:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <countPart>
	countSort = 0;
    101a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <countSort>

	startMotor();//Start Belt
    101e:	18 dc       	rcall	.-2000   	; 0x850 <startMotor>
	runTimerStart();//Start System Timer
    1020:	78 de       	rcall	.-784    	; 0xd12 <runTimerStart>
    1022:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
    1026:	88 23       	and	r24, r24
    1028:	a9 f1       	breq	.+106    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    102a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
    102e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    1032:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <refreshTime>
    1036:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <refreshTime+0x1>
    103a:	82 1b       	sub	r24, r18
    103c:	93 0b       	sbc	r25, r19
    103e:	c3 97       	sbiw	r24, 0x33	; 51
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    1042:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
			{
			//	dispStatus();
				refreshTime = runTime_d;	
    1046:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    104a:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <refreshTime+0x1>
    104e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <refreshTime>
    1052:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
    1056:	88 23       	and	r24, r24
    1058:	21 f3       	breq	.-56     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    105a:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <countSort>
		{
			if(countSort != countPart)
    105e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
    1062:	98 17       	cp	r25, r24
    1064:	49 f0       	breq	.+18     	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1066:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
			{
				rampTime_d = runTime_d;	
    106a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    106e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <rampTime_d+0x1>
    1072:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <rampTime_d>
    1076:	d5 cf       	rjmp	.-86     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1078:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
    107c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    1080:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <rampTime_d>
    1084:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <rampTime_d+0x1>
    1088:	82 1b       	sub	r24, r18
    108a:	93 0b       	sbc	r25, r19
    108c:	81 3a       	cpi	r24, 0xA1	; 161
    108e:	9f 40       	sbci	r25, 0x0F	; 15
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
    1090:	40 f2       	brcs	.-112    	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1092:	21 c0       	rjmp	.+66     	; 0x10d6 <__EEPROM_REGION_LENGTH__+0xd6>
	
	while((PIND & 0x01) == 0x00);
    1094:	0f dc       	rcall	.-2018   	; 0x8b4 <brakeMotor>
    1096:	48 9b       	sbis	0x09, 0	; 9
	stepStop();
    1098:	fe cf       	rjmp	.-4      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    109a:	19 db       	rcall	.-2510   	; 0x6ce <stepStop>
	runTimerStop();
    109c:	55 de       	rcall	.-854    	; 0xd48 <runTimerStop>
	uint8_t INTState = EIMSK;
	EIMSK = 0x01;
    109e:	cd b3       	in	r28, 0x1d	; 29
    10a0:	81 e0       	ldi	r24, 0x01	; 1
	PCMSK1 &= ~_BV(PCINT9);
    10a2:	8d bb       	out	0x1d, r24	; 29
    10a4:	ec e6       	ldi	r30, 0x6C	; 108
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 7f       	andi	r24, 0xFD	; 253
	
	stopMotor();
    10ac:	80 83       	st	Z, r24
    10ae:	0d dd       	rcall	.-1510   	; 0xaca <stopMotor>
	stepRes();
    10b0:	50 da       	rcall	.-2912   	; 0x552 <stepRes>
    10b2:	ee de       	rcall	.-548    	; 0xe90 <dispStatus>
	dispStatus();
    10b4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
	while(!ENABLE)
    10b8:	88 23       	and	r24, r24
	{
	}
	
	while((PIND & 0x01) == 0x00);
    10ba:	e1 f3       	breq	.-8      	; 0x10b4 <__EEPROM_REGION_LENGTH__+0xb4>
    10bc:	48 9b       	sbis	0x09, 0	; 9
	EIMSK = INTState;
    10be:	fe cf       	rjmp	.-4      	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
	PCMSK1 |= _BV(PCINT9);
    10c0:	cd bb       	out	0x1d, r28	; 29
    10c2:	ec e6       	ldi	r30, 0x6C	; 108
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
	runTimerResume();
    10c8:	82 60       	ori	r24, 0x02	; 2
    10ca:	80 83       	st	Z, r24
	stepStart();
    10cc:	43 de       	rcall	.-890    	; 0xd54 <runTimerResume>
    10ce:	e8 da       	rcall	.-2608   	; 0x6a0 <stepStart>
	runMotor();
    10d0:	da db       	rcall	.-2124   	; 0x886 <runMotor>
    10d2:	40 de       	rcall	.-896    	; 0xd54 <runTimerResume>
	runTimerResume();
    10d4:	a6 cf       	rjmp	.-180    	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    10d6:	f8 94       	cli
	
goto STANDBY;
    10d8:	15 b8       	out	0x05, r1	; 5
	
	
	
	
SHUTDOWN:
	cli();
    10da:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
    10dc:	66 de       	rcall	.-820    	; 0xdaa <dispComplete>
	PORTA = 0x00;
    10de:	ff cf       	rjmp	.-2      	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>

000010e0 <__vector_2>:
	
	dispComplete();
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
	if(ORFLAG){
    110a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
    110e:	88 23       	and	r24, r24
    1110:	69 f1       	breq	.+90     	; 0x116c <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	86 dd       	rcall	.-1268   	; 0xc26 <debounce>
    111a:	88 23       	and	r24, r24
    111c:	09 f4       	brne	.+2      	; 0x1120 <__vector_2+0x40>
    111e:	79 c0       	rjmp	.+242    	; 0x1212 <__vector_2+0x132>
			ORFLAG  = 0; //Part has entered OR
    1120:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ORFLAG>
			EIMSK &= ~_BV(INT1);
    1124:	8d b3       	in	r24, 0x1d	; 29
    1126:	8d 7f       	andi	r24, 0xFD	; 253
    1128:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
    112a:	e9 e6       	ldi	r30, 0x69	; 105
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8b 7f       	andi	r24, 0xFB	; 251
    1132:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    1134:	8d b3       	in	r24, 0x1d	; 29
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
    113a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <countADC+0x1>
    113e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <countADC>
			adcPart = 1023;
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    114a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
		
			ADCSRA |=_BV(ADSC);
    114e:	ea e7       	ldi	r30, 0x7A	; 122
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 64       	ori	r24, 0x40	; 64
		
			motorTimerStart();//slow down motor on approach
    1156:	80 83       	st	Z, r24
    1158:	ca dc       	rcall	.-1644   	; 0xaee <motorTimerStart>
			ORTime_s = runTime_d;
    115a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
    115e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    1162:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <ORTime_s+0x1>
    1166:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <ORTime_s>
    116a:	53 c0       	rjmp	.+166    	; 0x1212 <__vector_2+0x132>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    116c:	48 e0       	ldi	r20, 0x08	; 8
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	59 dd       	rcall	.-1358   	; 0xc26 <debounce>
    1174:	88 23       	and	r24, r24
    1176:	09 f4       	brne	.+2      	; 0x117a <__vector_2+0x9a>
    1178:	4c c0       	rjmp	.+152    	; 0x1212 <__vector_2+0x132>
    117a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
    117e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    1182:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <ORTime_s>
    1186:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <ORTime_s+0x1>
    118a:	82 1b       	sub	r24, r18
    118c:	93 0b       	sbc	r25, r19
    118e:	02 97       	sbiw	r24, 0x02	; 2
    1190:	08 f4       	brcc	.+2      	; 0x1194 <__vector_2+0xb4>
    1192:	3f c0       	rjmp	.+126    	; 0x1212 <__vector_2+0x132>
			ORFLAG  = 1;//Part has cleared OR	
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    119a:	8d b3       	in	r24, 0x1d	; 29
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    11a0:	e9 e6       	ldi	r30, 0x69	; 105
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    11aa:	8d b3       	in	r24, 0x1d	; 29
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    11b0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    11b4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    11b8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcDisp+0x1>
    11bc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    11c0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    11c4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    11c8:	82 3f       	cpi	r24, 0xF2	; 242
    11ca:	93 40       	sbci	r25, 0x03	; 3
    11cc:	10 f5       	brcc	.+68     	; 0x1212 <__vector_2+0x132>
    11ce:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countADC>
    11d2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <countADC+0x1>
    11d6:	c3 97       	sbiw	r24, 0x33	; 51
    11d8:	e0 f0       	brcs	.+56     	; 0x1212 <__vector_2+0x132>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    11da:	c0 91 51 02 	lds	r28, 0x0251	; 0x800251 <countPart>
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    11e4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    11e8:	f7 dc       	rcall	.-1554   	; 0xbd8 <classify>
    11ea:	c2 54       	subi	r28, 0x42	; 66
    11ec:	dd 4f       	sbci	r29, 0xFD	; 253
    11ee:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    11f0:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <countPart>
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <countPart>
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	a2 54       	subi	r26, 0x42	; 66
    11fe:	bd 4f       	sbci	r27, 0xFD	; 253
    1200:	8c 91       	ld	r24, X
    1202:	e1 54       	subi	r30, 0x41	; 65
    1204:	fd 4f       	sbci	r31, 0xFD	; 253
    1206:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    1208:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    1212:	8c b3       	in	r24, 0x1c	; 28
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	8c bb       	out	0x1c, r24	; 28
}//OR
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0b be       	out	0x3b, r0	; 59
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_3>:




//EX ISR //547cycles
ISR(INT2_vect){
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	0b b6       	in	r0, 0x3b	; 59
    124e:	0f 92       	push	r0
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	
	if(!EXFLAG)
    1268:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <EXFLAG>
    126c:	81 11       	cpse	r24, r1
    126e:	23 c0       	rjmp	.+70     	; 0x12b6 <__vector_3+0x74>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    1270:	48 e0       	ldi	r20, 0x08	; 8
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	d7 dc       	rcall	.-1618   	; 0xc26 <debounce>
    1278:	88 23       	and	r24, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <__vector_3+0x3c>
    127c:	5a c0       	rjmp	.+180    	; 0x1332 <__vector_3+0xf0>
			{
				EXFLAG =1;//Part is at EX
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1284:	8d b3       	in	r24, 0x1d	; 29
    1286:	8b 7f       	andi	r24, 0xFB	; 251
    1288:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    128a:	e9 e6       	ldi	r30, 0x69	; 105
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 61       	ori	r24, 0x10	; 16
    1292:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1294:	8d b3       	in	r24, 0x1d	; 29
    1296:	84 60       	ori	r24, 0x04	; 4
    1298:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    129a:	8c b3       	in	r24, 0x1c	; 28
    129c:	84 60       	ori	r24, 0x04	; 4
				
				stepUpdateError();//Calculate the current stepper error
    129e:	8c bb       	out	0x1c, r24	; 28
				updateMotor();
    12a0:	73 d8       	rcall	.-3866   	; 0x388 <stepUpdateError>
    12a2:	13 db       	rcall	.-2522   	; 0x8ca <updateMotor>
				
				EXTime_s = runTime_d;
    12a4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
    12a8:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    12ac:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <EXTime_s+0x1>
    12b0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <EXTime_s>
    12b4:	3e c0       	rjmp	.+124    	; 0x1332 <__vector_3+0xf0>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME)	)
    12b6:	48 e0       	ldi	r20, 0x08	; 8
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	b4 dc       	rcall	.-1688   	; 0xc26 <debounce>
    12be:	88 23       	and	r24, r24
    12c0:	c1 f1       	breq	.+112    	; 0x1332 <__vector_3+0xf0>
    12c2:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <runTime_d>
    12c6:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <runTime_d+0x1>
    12ca:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <EXTime_s>
    12ce:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <EXTime_s+0x1>
    12d2:	28 17       	cp	r18, r24
    12d4:	39 07       	cpc	r19, r25
    12d6:	69 f1       	breq	.+90     	; 0x1332 <__vector_3+0xf0>
		{
				EXFLAG = 0;
    12d8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    12dc:	8d b3       	in	r24, 0x1d	; 29
    12de:	8b 7f       	andi	r24, 0xFB	; 251
    12e0:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    12e2:	e9 e6       	ldi	r30, 0x69	; 105
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7e       	andi	r24, 0xEF	; 239
    12ea:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    12ec:	8d b3       	in	r24, 0x1d	; 29
    12ee:	84 60       	ori	r24, 0x04	; 4
    12f0:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    12f2:	8c b3       	in	r24, 0x1c	; 28
    12f4:	84 60       	ori	r24, 0x04	; 4
    12f6:	8c bb       	out	0x1c, r24	; 28
				
				if(countSort<countPart)
    12f8:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <countSort>
    12fc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
    1300:	98 17       	cp	r25, r24
    1302:	38 f4       	brcc	.+14     	; 0x1312 <__vector_3+0xd0>
				{//if we won't overrun the array
					countSort+=1;//go to next part
    1304:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <countSort>
					TARGETFLAG =0;//New target; reset flag
    130e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <TARGETFLAG>
				}
				
				if(!MOTORFLAG)
    1312:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <MOTORFLAG>
    1316:	81 11       	cpse	r24, r1
						The program gets here if
						1. a piece has unintentionally slipped past EX before its drop zone
						2. the belt is dropping early so the stepper can 'catch' the falling piece
							as it turns by
					*/
					SLIPFLAG = 1;//set flag to indicate to keep moving towards the previous target
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <__vector_3+0xde>
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <SLIPFLAG>
				}
				updateMotor();
    1320:	d4 da       	rcall	.-2648   	; 0x8ca <updateMotor>
				
			EXTime_s = runTime_d;	
    1322:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
    1326:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    132a:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <EXTime_s+0x1>
    132e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <EXTime_s>
		}//HI
	}
	
}//EX
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0b be       	out	0x3b, r0	; 59
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	0b b6       	in	r0, 0x3b	; 59
    1364:	0f 92       	push	r0
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    137e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <step>
	stepUpdateError(); //calculate the stepper position error
    1382:	02 d8       	rcall	.-4092   	; 0x388 <stepUpdateError>
	
	stepUpdateDir(); //update the stepper direction
    1384:	7a d8       	rcall	.-3852   	; 0x47a <stepUpdateDir>
	stepUpdateDelay(); //update the stepper speed
    1386:	f0 d8       	rcall	.-3616   	; 0x568 <stepUpdateDelay>
//CONTROL STEPPER
//CONTROL MOTOR
	updateMotor();
    1388:	a0 da       	rcall	.-2752   	; 0x8ca <updateMotor>
    138a:	ff 91       	pop	r31
	
}//stepTimer
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0b be       	out	0x3b, r0	; 59
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_29>:
    13b0:	1f 92       	push	r1
	



//ADC ISR
ISR(ADC_vect){
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	0b b6       	in	r0, 0x3b	; 59
    13bc:	0f 92       	push	r0
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    13ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    13d4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	adcTemp+= (ADCH<<8);
    13d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	98 2f       	mov	r25, r24
    13e0:	88 27       	eor	r24, r24
    13e2:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    13e6:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    13f2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	countADC+=1;
    13f6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countADC>
    13fa:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <countADC+0x1>
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <countADC+0x1>
    1404:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <countADC>
	
	if(adcTemp<adcPart){
    1408:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    140c:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    1410:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1414:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1418:	28 17       	cp	r18, r24
    141a:	39 07       	cpc	r19, r25
    141c:	40 f4       	brcc	.+16     	; 0x142e <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    141e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcTemp>
    1422:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcTemp+0x1>
    1426:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    142a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
	}
	
	if(!ORFLAG){
    142e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
    1432:	81 11       	cpse	r24, r1
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    1436:	ea e7       	ldi	r30, 0x7A	; 122
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 64       	ori	r24, 0x40	; 64
    143e:	80 83       	st	Z, r24
	}
}//ADC
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0b be       	out	0x3b, r0	; 59
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_4>:


//HE ISR
ISR(INT3_vect){
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	0b b6       	in	r0, 0x3b	; 59
    1466:	0f 92       	push	r0
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    1480:	48 e0       	ldi	r20, 0x08	; 8
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	cf db       	rcall	.-2146   	; 0xc26 <debounce>
    1488:	88 23       	and	r24, r24
    148a:	31 f0       	breq	.+12     	; 0x1498 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    148c:	82 e3       	ldi	r24, 0x32	; 50
    148e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <HALLSENSOR>
	}
}//HE
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0b be       	out	0x3b, r0	; 59
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	0b b6       	in	r0, 0x3b	; 59
    14ca:	0f 92       	push	r0
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    14e4:	4a ef       	ldi	r20, 0xFA	; 250
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	9d db       	rcall	.-2246   	; 0xc26 <debounce>
    14ec:	88 23       	and	r24, r24
    14ee:	51 f0       	breq	.+20     	; 0x1504 <__vector_1+0x46>
		if(ENABLE)
    14f0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
    14f4:	88 23       	and	r24, r24
    14f6:	19 f0       	breq	.+6      	; 0x14fe <__vector_1+0x40>
		{
			ENABLE = 0;
    14f8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ENABLE>
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <ENABLE>
		}
	}
}//ISR Pause Button
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0b be       	out	0x3b, r0	; 59
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <__vector_10>:

ISR(PCINT1_vect)
{
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	0f 92       	push	r0
    1532:	11 24       	eor	r1, r1
    1534:	0b b6       	in	r0, 0x3b	; 59
    1536:	0f 92       	push	r0
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	ef 93       	push	r30
    154e:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    1550:	4a ef       	ldi	r20, 0xFA	; 250
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	9a db       	rcall	.-2252   	; 0xc8c <debouncePINJ>
    1558:	88 23       	and	r24, r24
    155a:	59 f0       	breq	.+22     	; 0x1572 <__vector_10+0x48>
		RAMPDOWN = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <RAMPDOWN>
		rampTime_d = runTime_d;	
    1562:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <runTime_d>
    1566:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <runTime_d+0x1>
    156a:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <rampTime_d+0x1>
    156e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <rampTime_d>
	}
}//ISR Ramp Button
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0b be       	out	0x3b, r0	; 59
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <__divmodhi4>:
    1598:	97 fb       	bst	r25, 7
    159a:	07 2e       	mov	r0, r23
    159c:	16 f4       	brtc	.+4      	; 0x15a2 <__divmodhi4+0xa>
    159e:	00 94       	com	r0
    15a0:	06 d0       	rcall	.+12     	; 0x15ae <__divmodhi4_neg1>
    15a2:	77 fd       	sbrc	r23, 7
    15a4:	08 d0       	rcall	.+16     	; 0x15b6 <__divmodhi4_neg2>
    15a6:	1a d0       	rcall	.+52     	; 0x15dc <__udivmodhi4>
    15a8:	07 fc       	sbrc	r0, 7
    15aa:	05 d0       	rcall	.+10     	; 0x15b6 <__divmodhi4_neg2>
    15ac:	3e f4       	brtc	.+14     	; 0x15bc <__divmodhi4_exit>

000015ae <__divmodhi4_neg1>:
    15ae:	90 95       	com	r25
    15b0:	81 95       	neg	r24
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	08 95       	ret

000015b6 <__divmodhi4_neg2>:
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255

000015bc <__divmodhi4_exit>:
    15bc:	08 95       	ret

000015be <__umulhisi3>:
    15be:	a2 9f       	mul	r26, r18
    15c0:	b0 01       	movw	r22, r0
    15c2:	b3 9f       	mul	r27, r19
    15c4:	c0 01       	movw	r24, r0
    15c6:	a3 9f       	mul	r26, r19
    15c8:	70 0d       	add	r23, r0
    15ca:	81 1d       	adc	r24, r1
    15cc:	11 24       	eor	r1, r1
    15ce:	91 1d       	adc	r25, r1
    15d0:	b2 9f       	mul	r27, r18
    15d2:	70 0d       	add	r23, r0
    15d4:	81 1d       	adc	r24, r1
    15d6:	11 24       	eor	r1, r1
    15d8:	91 1d       	adc	r25, r1
    15da:	08 95       	ret

000015dc <__udivmodhi4>:
    15dc:	aa 1b       	sub	r26, r26
    15de:	bb 1b       	sub	r27, r27
    15e0:	51 e1       	ldi	r21, 0x11	; 17
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <__udivmodhi4_ep>

000015e4 <__udivmodhi4_loop>:
    15e4:	aa 1f       	adc	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	a6 17       	cp	r26, r22
    15ea:	b7 07       	cpc	r27, r23
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <__udivmodhi4_ep>
    15ee:	a6 1b       	sub	r26, r22
    15f0:	b7 0b       	sbc	r27, r23

000015f2 <__udivmodhi4_ep>:
    15f2:	88 1f       	adc	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	5a 95       	dec	r21
    15f8:	a9 f7       	brne	.-22     	; 0x15e4 <__udivmodhi4_loop>
    15fa:	80 95       	com	r24
    15fc:	90 95       	com	r25
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	08 95       	ret

00001604 <_exit>:
    1604:	f8 94       	cli

00001606 <__stop_program>:
    1606:	ff cf       	rjmp	.-2      	; 0x1606 <__stop_program>
