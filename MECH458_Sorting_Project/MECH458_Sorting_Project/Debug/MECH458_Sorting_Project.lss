
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  00001762  000017f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  00800232  00800232  00001828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026be  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114f  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f5  00000000  00000000  0000526d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00006764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6a  00000000  00000000  00006d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00007772  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000088a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__vector_1>
       8:	cb c7       	rjmp	.+3990   	; 0xfa0 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_3>
      10:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_32>
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c5       	rjmp	.+2914   	; 0xc0c <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7d c4       	rjmp	.+2298   	; 0x9b8 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e6       	ldi	r30, 0x62	; 98
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 33       	cpi	r26, 0x32	; 50
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 e3       	ldi	r26, 0x32	; 50
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 32       	cpi	r26, 0x21	; 33
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9a d6       	rcall	.+3380   	; 0xe54 <main>
     120:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_exit>

00000124 <__bad_interrupt>:
     124:	8a c5       	rjmp	.+2836   	; 0xc3a <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__divmodhi4>
     2e2:	e1 e0       	ldi	r30, 0x01	; 1
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	80 83       	st	Z, r24
	val=val/10;
     2f0:	86 2f       	mov	r24, r22
     2f2:	97 2f       	mov	r25, r23
	i--;
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	79 f7       	brne	.-34     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fc:	bf ef       	ldi	r27, 0xFF	; 255
     2fe:	eb 16       	cp	r14, r27
     300:	fb 06       	cpc	r15, r27
     302:	81 f4       	brne	.+32     	; 0x324 <LCDWriteInt+0x76>
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     306:	0f 5f       	subi	r16, 0xFF	; 255
     308:	1f 4f       	sbci	r17, 0xFF	; 255
     30a:	02 c0       	rjmp	.+4      	; 0x310 <LCDWriteInt+0x62>
     30c:	00 e0       	ldi	r16, 0x00	; 0
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	e1 e0       	ldi	r30, 0x01	; 1
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	ec 0f       	add	r30, r28
     316:	fd 1f       	adc	r31, r29
     318:	e0 0f       	add	r30, r16
     31a:	f1 1f       	adc	r31, r17
     31c:	20 81       	ld	r18, Z
     31e:	22 23       	and	r18, r18
     320:	91 f3       	breq	.-28     	; 0x306 <LCDWriteInt+0x58>
     322:	04 c0       	rjmp	.+8      	; 0x32c <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     324:	05 e0       	ldi	r16, 0x05	; 5
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	0e 19       	sub	r16, r14
     32a:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32c:	99 23       	and	r25, r25
     32e:	84 f4       	brge	.+32     	; 0x350 <LCDWriteInt+0xa2>
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	8d e2       	ldi	r24, 0x2D	; 45
     334:	37 df       	rcall	.-402    	; 0x1a4 <LCDByte>
     336:	0c c0       	rjmp	.+24     	; 0x350 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	e0 0f       	add	r30, r16
     342:	f1 1f       	adc	r31, r17
     344:	80 81       	ld	r24, Z
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	80 5d       	subi	r24, 0xD0	; 208
     34a:	2c df       	rcall	.-424    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34c:	0f 5f       	subi	r16, 0xFF	; 255
     34e:	1f 4f       	sbci	r17, 0xFF	; 255
     350:	05 30       	cpi	r16, 0x05	; 5
     352:	11 05       	cpc	r17, r1
     354:	8c f3       	brlt	.-30     	; 0x338 <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36e:	88 32       	cpi	r24, 0x28	; 40
     370:	28 f4       	brcc	.+10     	; 0x37c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     372:	61 11       	cpse	r22, r1
     374:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	14 cf       	rjmp	.-472    	; 0x1a4 <LCDByte>
     37c:	08 95       	ret

0000037e <step>:
extern volatile char DECELFLAG;
extern volatile char EXFLAG;
extern volatile char PAUSEFLAG;

uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     37e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
     382:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     386:	89 0f       	add	r24, r25
     388:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     38c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     390:	84 30       	cpi	r24, 0x04	; 4
     392:	1c f0       	brlt	.+6      	; 0x39a <step+0x1c>
     394:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     39a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     39e:	88 23       	and	r24, r24
     3a0:	1c f4       	brge	.+6      	; 0x3a8 <step+0x2a>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     3a8:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
     3ac:	0e 2e       	mov	r0, r30
     3ae:	00 0c       	add	r0, r0
     3b0:	ff 0b       	sbc	r31, r31
     3b2:	ef 5f       	subi	r30, 0xFF	; 255
     3b4:	fd 4f       	sbci	r31, 0xFD	; 253
     3b6:	80 81       	ld	r24, Z
     3b8:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     3ba:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     3be:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Dir>
     3c2:	89 0f       	add	r24, r25
     3c4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <CurPosition>
	//protect against roll over
	if(CurPosition > 200 && Dir==1){CurPosition -=  200;}
     3c8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     3cc:	89 3c       	cpi	r24, 0xC9	; 201
     3ce:	50 f0       	brcs	.+20     	; 0x3e4 <step+0x66>
     3d0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <step+0x66>
     3d8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     3dc:	88 5c       	subi	r24, 0xC8	; 200
     3de:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <CurPosition>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <step+0x80>
	else if(CurPosition < 50 && Dir==-1){CurPosition += 200;}
     3e4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     3e8:	82 33       	cpi	r24, 0x32	; 50
     3ea:	48 f4       	brcc	.+18     	; 0x3fe <step+0x80>
     3ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     3f0:	8f 3f       	cpi	r24, 0xFF	; 255
     3f2:	29 f4       	brne	.+10     	; 0x3fe <step+0x80>
     3f4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     3f8:	88 53       	subi	r24, 0x38	; 56
     3fa:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     3fe:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     402:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	08 95       	ret

0000040a <stepUpdateDir>:


uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     40a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     40e:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     412:	89 2b       	or	r24, r25
     414:	61 f4       	brne	.+24     	; 0x42e <stepUpdateDir+0x24>
		{
			if(CurDelay!= MAXDELAY){
     416:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     41a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     41e:	81 15       	cp	r24, r1
     420:	9a 40       	sbci	r25, 0x0A	; 10
     422:	09 f0       	breq	.+2      	; 0x426 <stepUpdateDir+0x1c>
     424:	73 c0       	rjmp	.+230    	; 0x50c <stepUpdateDir+0x102>
				//DECELFLAG = 1;
				return 0;
			}else
			{
				Dir = 0;
     426:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <Dir>
				return 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	08 95       	ret
			}
		}else if(CurError>118)
     42e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     432:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     436:	87 37       	cpi	r24, 0x77	; 119
     438:	91 05       	cpc	r25, r1
     43a:	24 f0       	brlt	.+8      	; 0x444 <stepUpdateDir+0x3a>
		{//target is more than 100 steps CW
			NextDir = -1;//turn CCW
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     442:	46 c0       	rjmp	.+140    	; 0x4d0 <stepUpdateDir+0xc6>
		}else if(CurError<(-118))
     444:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     448:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     44c:	8a 38       	cpi	r24, 0x8A	; 138
     44e:	9f 4f       	sbci	r25, 0xFF	; 255
     450:	24 f4       	brge	.+8      	; 0x45a <stepUpdateDir+0x50>
		{//target is more than 100 steps CCW
			NextDir = +1;//turn CW
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     458:	3b c0       	rjmp	.+118    	; 0x4d0 <stepUpdateDir+0xc6>
		}else if((abs(CurError)<118) && (abs(CurError)>82))
     45a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     45e:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     462:	99 23       	and	r25, r25
     464:	1c f4       	brge	.+6      	; 0x46c <stepUpdateDir+0x62>
     466:	91 95       	neg	r25
     468:	81 95       	neg	r24
     46a:	91 09       	sbc	r25, r1
     46c:	86 37       	cpi	r24, 0x76	; 118
     46e:	91 05       	cpc	r25, r1
     470:	dc f4       	brge	.+54     	; 0x4a8 <stepUpdateDir+0x9e>
     472:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     476:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     47a:	99 23       	and	r25, r25
     47c:	1c f4       	brge	.+6      	; 0x484 <stepUpdateDir+0x7a>
     47e:	91 95       	neg	r25
     480:	81 95       	neg	r24
     482:	91 09       	sbc	r25, r1
     484:	83 35       	cpi	r24, 0x53	; 83
     486:	91 05       	cpc	r25, r1
     488:	7c f0       	brlt	.+30     	; 0x4a8 <stepUpdateDir+0x9e>
		{//Next target is exactly 100 steps away
			DECELFLAG = 0;
     48a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <DECELFLAG>
			if(Dir != 0){
     48e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     492:	88 23       	and	r24, r24
     494:	29 f0       	breq	.+10     	; 0x4a0 <stepUpdateDir+0x96>
				NextDir = Dir;//Keep direction
     496:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     49a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		{//target is more than 100 steps CCW
			NextDir = +1;//turn CW
		}else if((abs(CurError)<118) && (abs(CurError)>82))
		{//Next target is exactly 100 steps away
			DECELFLAG = 0;
			if(Dir != 0){
     49e:	18 c0       	rjmp	.+48     	; 0x4d0 <stepUpdateDir+0xc6>
				NextDir = Dir;//Keep direction
			}else
			{
				Dir = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Dir>
				return 1;
     4a6:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);
     4a8:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <CurError>
     4ac:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <CurError+0x1>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	12 16       	cp	r1, r18
     4b4:	13 06       	cpc	r1, r19
     4b6:	0c f0       	brlt	.+2      	; 0x4ba <stepUpdateDir+0xb0>
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <CurError>
     4be:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <CurError+0x1>
     4c2:	93 2f       	mov	r25, r19
     4c4:	99 1f       	adc	r25, r25
     4c6:	99 27       	eor	r25, r25
     4c8:	99 1f       	adc	r25, r25
     4ca:	89 1b       	sub	r24, r25
     4cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			
		}

		//Set Direction or Decelerate
		if(CurDelay >= MAXDELAY){
     4d0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     4d4:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     4d8:	81 15       	cp	r24, r1
     4da:	9a 40       	sbci	r25, 0x0A	; 10
     4dc:	30 f0       	brcs	.+12     	; 0x4ea <stepUpdateDir+0xe0>
			Dir = NextDir;
     4de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4e2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Dir>
			return 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	08 95       	ret
		}
		
		
		
		if(NextDir == Dir)
     4ea:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4ee:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Dir>
     4f2:	98 13       	cpse	r25, r24
     4f4:	06 c0       	rjmp	.+12     	; 0x502 <stepUpdateDir+0xf8>
		{//stepper is slow or next direction is the same
			Dir = NextDir;
     4f6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4fa:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Dir>
			return 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	08 95       	ret
		}else
		{
			DECELFLAG = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <DECELFLAG>
			return 0;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	08 95       	ret
	//if(!DECELFLAG){
		if(CurError == 0)
		{
			if(CurDelay!= MAXDELAY){
				//DECELFLAG = 1;
				return 0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
			DECELFLAG = 1;
			return 0;
		}
	//}
	return 1;
}
     50e:	08 95       	ret

00000510 <stepUpdateDelay>:



uint8_t stepUpdateDelay(void)
{
	if(PAUSEFLAG)
     510:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PAUSEFLAG>
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <stepUpdateDelay+0xa>
     518:	6a c0       	rjmp	.+212    	; 0x5ee <stepUpdateDelay+0xde>
	{	
		
		exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
     51a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     51e:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     522:	88 5a       	subi	r24, 0xA8	; 168
     524:	92 40       	sbci	r25, 0x02	; 2
     526:	96 95       	lsr	r25
     528:	87 95       	ror	r24
     52a:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
     52e:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	24 1b       	sub	r18, r20
     536:	31 09       	sbc	r19, r1
     538:	28 9f       	mul	r18, r24
     53a:	a0 01       	movw	r20, r0
     53c:	29 9f       	mul	r18, r25
     53e:	50 0d       	add	r21, r0
     540:	38 9f       	mul	r19, r24
     542:	50 0d       	add	r21, r0
     544:	11 24       	eor	r1, r1
		+ ((DROP_REGION - abs(CurPosition - Parts[countSort-1])) - (Steps2Acc - accSteps))*MINDELAY;
     546:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     54a:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	e4 54       	subi	r30, 0x44	; 68
     552:	fd 4f       	sbci	r31, 0xFD	; 253
     554:	20 81       	ld	r18, Z
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	82 1b       	sub	r24, r18
     55a:	91 09       	sbc	r25, r1
     55c:	9c 01       	movw	r18, r24
     55e:	22 f4       	brpl	.+8      	; 0x568 <stepUpdateDelay+0x58>
     560:	22 27       	eor	r18, r18
     562:	33 27       	eor	r19, r19
     564:	28 1b       	sub	r18, r24
     566:	39 0b       	sbc	r19, r25
     568:	86 e1       	ldi	r24, 0x16	; 22
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	82 1b       	sub	r24, r18
     56e:	93 0b       	sbc	r25, r19
     570:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
     574:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	26 1b       	sub	r18, r22
     57c:	31 09       	sbc	r19, r1
     57e:	82 1b       	sub	r24, r18
     580:	93 0b       	sbc	r25, r19
     582:	68 ea       	ldi	r22, 0xA8	; 168
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	86 9f       	mul	r24, r22
     588:	90 01       	movw	r18, r0
     58a:	87 9f       	mul	r24, r23
     58c:	30 0d       	add	r19, r0
     58e:	96 9f       	mul	r25, r22
     590:	30 0d       	add	r19, r0
     592:	11 24       	eor	r1, r1
     594:	42 0f       	add	r20, r18
     596:	53 1f       	adc	r21, r19
uint8_t stepUpdateDelay(void)
{
	if(PAUSEFLAG)
	{	
		
		exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
     598:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <exitTime+0x1>
     59c:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <exitTime>
		+ ((DROP_REGION - abs(CurPosition - Parts[countSort-1])) - (Steps2Acc - accSteps))*MINDELAY;
		
		exitdropTime -=CurDelay;
     5a0:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <CurDelay>
     5a4:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <CurDelay+0x1>
     5a8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <exitdropTime>
     5ac:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <exitdropTime+0x1>
     5b0:	82 1b       	sub	r24, r18
     5b2:	93 0b       	sbc	r25, r19
     5b4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
     5b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
		
		if(exitTime<exitdropTime){
     5bc:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <exitTime>
     5c0:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <exitTime+0x1>
     5c4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <exitdropTime>
     5c8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <exitdropTime+0x1>
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	20 f4       	brcc	.+8      	; 0x5da <stepUpdateDelay+0xca>
			DECELFLAG = 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <DECELFLAG>
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <stepUpdateDelay+0xde>
		}else
		{
				
			//LCDWriteString("R");
			exitdropTime =EXIT_DROP_TIME;
     5da:	88 ea       	ldi	r24, 0xA8	; 168
     5dc:	98 e7       	ldi	r25, 0x78	; 120
     5de:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
     5e2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
			DECELFLAG = 0;
     5e6:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <DECELFLAG>
			PAUSEFLAG = 0;	
     5ea:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <PAUSEFLAG>
		}
	}
	
	if((Steps2Acc >= abs(CurError) && !EXFLAG) || DECELFLAG)
     5ee:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Steps2Acc>
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <CurError>
     5f8:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <CurError+0x1>
     5fc:	33 23       	and	r19, r19
     5fe:	1c f4       	brge	.+6      	; 0x606 <stepUpdateDelay+0xf6>
     600:	31 95       	neg	r19
     602:	21 95       	neg	r18
     604:	31 09       	sbc	r19, r1
     606:	82 17       	cp	r24, r18
     608:	93 07       	cpc	r25, r19
     60a:	24 f0       	brlt	.+8      	; 0x614 <stepUpdateDelay+0x104>
     60c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <EXFLAG>
     610:	88 23       	and	r24, r24
     612:	21 f0       	breq	.+8      	; 0x61c <stepUpdateDelay+0x10c>
     614:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <DECELFLAG>
     618:	88 23       	and	r24, r24
     61a:	81 f1       	breq	.+96     	; 0x67c <stepUpdateDelay+0x16c>
	{

		CurDelay = CurDelay + CurAcc[accSteps];
     61c:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e7 5a       	subi	r30, 0xA7	; 167
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	20 81       	ld	r18, Z
     62c:	31 81       	ldd	r19, Z+1	; 0x01
     62e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     632:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     63e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		
		if (CurDelay > MAXDELAY)
     642:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     646:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	9a 40       	sbci	r25, 0x0A	; 10
     64e:	58 f0       	brcs	.+22     	; 0x666 <stepUpdateDelay+0x156>
		{
			CurDelay = MAXDELAY;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	9a e0       	ldi	r25, 0x0A	; 10
     654:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     658:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
			accSteps = 0;
     65c:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
			DECELFLAG = 0;
     660:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <DECELFLAG>
     664:	44 c0       	rjmp	.+136    	; 0x6ee <stepUpdateDelay+0x1de>
		}else if(accSteps>0){
     666:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     66a:	88 23       	and	r24, r24
     66c:	09 f4       	brne	.+2      	; 0x670 <stepUpdateDelay+0x160>
     66e:	3f c0       	rjmp	.+126    	; 0x6ee <stepUpdateDelay+0x1de>
			accSteps--;
     670:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     674:	81 50       	subi	r24, 0x01	; 1
     676:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
     67a:	39 c0       	rjmp	.+114    	; 0x6ee <stepUpdateDelay+0x1de>
		}
		
	}else if(CurDelay>MINDELAY)
     67c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     680:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     684:	89 3a       	cpi	r24, 0xA9	; 169
     686:	92 40       	sbci	r25, 0x02	; 2
     688:	e0 f1       	brcs	.+120    	; 0x702 <stepUpdateDelay+0x1f2>
	{
		//Accelerate
		CurDelay = CurDelay -  CurAcc[accSteps];
     68a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     68e:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     692:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e7 5a       	subi	r30, 0xA7	; 167
     69e:	fd 4f       	sbci	r31, 0xFD	; 253
     6a0:	20 81       	ld	r18, Z
     6a2:	31 81       	ldd	r19, Z+1	; 0x01
     6a4:	82 1b       	sub	r24, r18
     6a6:	93 0b       	sbc	r25, r19
     6a8:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     6ac:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)//overflow protection
     6b0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     6b4:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     6b8:	89 3a       	cpi	r24, 0xA9	; 169
     6ba:	92 40       	sbci	r25, 0x02	; 2
     6bc:	38 f0       	brcs	.+14     	; 0x6cc <stepUpdateDelay+0x1bc>
     6be:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     6c2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	9a 40       	sbci	r25, 0x0A	; 10
     6ca:	30 f0       	brcs	.+12     	; 0x6d8 <stepUpdateDelay+0x1c8>
		{
			CurDelay = MINDELAY;
     6cc:	88 ea       	ldi	r24, 0xA8	; 168
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     6d4:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		}
		if(accSteps<Steps2Acc){
     6d8:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <accSteps>
     6dc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Steps2Acc>
     6e0:	98 17       	cp	r25, r24
     6e2:	28 f4       	brcc	.+10     	; 0x6ee <stepUpdateDelay+0x1de>
			accSteps++;
     6e4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
		return 0;
	}
	
	
	
	OCR3A = CurDelay;//set the new delay
     6ee:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     6f2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     6f6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6fa:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	08 95       	ret
		if(accSteps<Steps2Acc){
			accSteps++;
		}
	}else
	{
		return 0;
     702:	80 e0       	ldi	r24, 0x00	; 0
	
	
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     704:	08 95       	ret

00000706 <stepRes>:



void stepRes(void){
	accSteps = 0;
     706:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
	StepsDelta = 0;
     70a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <StepsDelta>
	CurDelay = MAXDELAY;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	9a e0       	ldi	r25, 0x0A	; 10
     712:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     716:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
     71a:	08 95       	ret

0000071c <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     71c:	e1 e9       	ldi	r30, 0x91	; 145
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 60       	ori	r24, 0x08	; 8
     724:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	9f ef       	ldi	r25, 0xFF	; 255
     72a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     72e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     732:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     736:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     73a:	e1 e7       	ldi	r30, 0x71	; 113
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	82 60       	ori	r24, 0x02	; 2
     742:	80 83       	st	Z, r24
     744:	08 95       	ret

00000746 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     746:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     74a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	3a e0       	ldi	r19, 0x0A	; 10
     752:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     756:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     75a:	e1 e9       	ldi	r30, 0x91	; 145
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	83 60       	ori	r24, 0x03	; 3
     762:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     764:	88 b3       	in	r24, 0x18	; 24
     766:	82 60       	ori	r24, 0x02	; 2
     768:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     76a:	30 93 34 02 	sts	0x0234, r19	; 0x800234 <CurDelay+0x1>
     76e:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <CurDelay>
     772:	08 95       	ret

00000774 <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     774:	e1 e9       	ldi	r30, 0x91	; 145
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     77e:	80 81       	ld	r24, Z
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	80 83       	st	Z, r24
     784:	08 95       	ret

00000786 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     786:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <CurAcc+0x1>
     78a:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	24 c0       	rjmp	.+72     	; 0x7e0 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     798:	fc 01       	movw	r30, r24
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e7 5a       	subi	r30, 0xA7	; 167
     7a2:	fd 4f       	sbci	r31, 0xFD	; 253
     7a4:	40 81       	ld	r20, Z
     7a6:	51 81       	ldd	r21, Z+1	; 0x01
     7a8:	24 1b       	sub	r18, r20
     7aa:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     7ac:	40 81       	ld	r20, Z
     7ae:	51 81       	ldd	r21, Z+1	; 0x01
     7b0:	48 5c       	subi	r20, 0xC8	; 200
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	fc 01       	movw	r30, r24
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	e7 5a       	subi	r30, 0xA7	; 167
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	51 83       	std	Z+1, r21	; 0x01
     7c0:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     7c2:	40 81       	ld	r20, Z
     7c4:	51 81       	ldd	r21, Z+1	; 0x01
     7c6:	41 3e       	cpi	r20, 0xE1	; 225
     7c8:	51 05       	cpc	r21, r1
     7ca:	48 f0       	brcs	.+18     	; 0x7de <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     7cc:	fc 01       	movw	r30, r24
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	e7 5a       	subi	r30, 0xA7	; 167
     7d4:	fd 4f       	sbci	r31, 0xFD	; 253
     7d6:	40 ee       	ldi	r20, 0xE0	; 224
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	51 83       	std	Z+1, r21	; 0x01
     7dc:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	84 30       	cpi	r24, 0x04	; 4
     7e2:	91 05       	cpc	r25, r1
     7e4:	c8 f2       	brcs	.-78     	; 0x798 <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     7e6:	fc 01       	movw	r30, r24
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e7 5a       	subi	r30, 0xA7	; 167
     7ee:	fd 4f       	sbci	r31, 0xFD	; 253
     7f0:	40 ee       	ldi	r20, 0xE0	; 224
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	51 83       	std	Z+1, r21	; 0x01
     7f6:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7f8:	1a c0       	rjmp	.+52     	; 0x82e <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     7fa:	fc 01       	movw	r30, r24
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e7 5a       	subi	r30, 0xA7	; 167
     804:	fd 4f       	sbci	r31, 0xFD	; 253
     806:	40 81       	ld	r20, Z
     808:	51 81       	ldd	r21, Z+1	; 0x01
     80a:	24 1b       	sub	r18, r20
     80c:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     80e:	28 3a       	cpi	r18, 0xA8	; 168
     810:	42 e0       	ldi	r20, 0x02	; 2
     812:	34 07       	cpc	r19, r20
     814:	10 f4       	brcc	.+4      	; 0x81a <stepCalcAcc+0x94>
			delay = MINDELAY;
     816:	28 ea       	ldi	r18, 0xA8	; 168
     818:	32 e0       	ldi	r19, 0x02	; 2
		}
		steps++;
     81a:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     81c:	fc 01       	movw	r30, r24
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	e7 5a       	subi	r30, 0xA7	; 167
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	40 ee       	ldi	r20, 0xE0	; 224
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	51 83       	std	Z+1, r21	; 0x01
     82c:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     82e:	a9 01       	movw	r20, r18
     830:	40 5a       	subi	r20, 0xA0	; 160
     832:	52 40       	sbci	r21, 0x02	; 2
     834:	49 3a       	cpi	r20, 0xA9	; 169
     836:	52 40       	sbci	r21, 0x02	; 2
     838:	00 f7       	brcc	.-64     	; 0x7fa <stepCalcAcc+0x74>
     83a:	2a c0       	rjmp	.+84     	; 0x890 <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     83c:	ac 01       	movw	r20, r24
     83e:	4f 5f       	subi	r20, 0xFF	; 255
     840:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     842:	fc 01       	movw	r30, r24
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e7 5a       	subi	r30, 0xA7	; 167
     84a:	fd 4f       	sbci	r31, 0xFD	; 253
     84c:	60 81       	ld	r22, Z
     84e:	71 81       	ldd	r23, Z+1	; 0x01
     850:	26 1b       	sub	r18, r22
     852:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	68 33       	cpi	r22, 0x38	; 56
     85a:	71 05       	cpc	r23, r1
     85c:	48 f4       	brcc	.+18     	; 0x870 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     85e:	fa 01       	movw	r30, r20
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	e7 5a       	subi	r30, 0xA7	; 167
     866:	fd 4f       	sbci	r31, 0xFD	; 253
     868:	11 82       	std	Z+1, r1	; 0x01
     86a:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     86c:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     86e:	14 c0       	rjmp	.+40     	; 0x898 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	fc 01       	movw	r30, r24
     876:	e7 5a       	subi	r30, 0xA7	; 167
     878:	fd 4f       	sbci	r31, 0xFD	; 253
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	c8 97       	sbiw	r24, 0x38	; 56
     880:	fa 01       	movw	r30, r20
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e7 5a       	subi	r30, 0xA7	; 167
     888:	fd 4f       	sbci	r31, 0xFD	; 253
     88a:	91 83       	std	Z+1, r25	; 0x01
     88c:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     88e:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     890:	29 3a       	cpi	r18, 0xA9	; 169
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	34 07       	cpc	r19, r20
     896:	90 f6       	brcc	.-92     	; 0x83c <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     898:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Steps2Acc>
     89c:	08 95       	ret

0000089e <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     89e:	73 df       	rcall	.-282    	; 0x786 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	9a e0       	ldi	r25, 0x0A	; 10
     8a4:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     8a8:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     8ac:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     8b0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     8b4:	82 e3       	ldi	r24, 0x32	; 50
     8b6:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Parts>

	stepStart();//Start stepTimer
     8ba:	45 df       	rcall	.-374    	; 0x746 <stepStart>
		
	while(!HALLSENSOR){
     8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     8be:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
     8c2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
     8c6:	99 23       	and	r25, r25
     8c8:	1c f4       	brge	.+6      	; 0x8d0 <stepCalibrate+0x32>
     8ca:	91 95       	neg	r25
     8cc:	81 95       	neg	r24
     8ce:	91 09       	sbc	r25, r1
     8d0:	44 97       	sbiw	r24, 0x14	; 20
     8d2:	34 f4       	brge	.+12     	; 0x8e0 <stepCalibrate+0x42>
     8d4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <HALLSENSOR>
     8d8:	81 11       	cpse	r24, r1
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <stepCalibrate+0x42>
			CurPosition = 0;
     8dc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     8e0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <HALLSENSOR>
     8e4:	88 23       	and	r24, r24
     8e6:	59 f3       	breq	.-42     	; 0x8be <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     8e8:	82 e3       	ldi	r24, 0x32	; 50
     8ea:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	08 95       	ret

000008f2 <startMotor>:
		return 0x01;
	}else
	{
		return 0x04;
	}
}
     8f2:	85 b1       	in	r24, 0x05	; 5
     8f4:	80 78       	andi	r24, 0x80	; 128
     8f6:	85 b9       	out	0x05, r24	; 5
     8f8:	85 b1       	in	r24, 0x05	; 5
     8fa:	8b 60       	ori	r24, 0x0B	; 11
     8fc:	85 b9       	out	0x05, r24	; 5
     8fe:	16 bc       	out	0x26, r1	; 38
     900:	86 ee       	ldi	r24, 0xE6	; 230
     902:	87 bd       	out	0x27, r24	; 39
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <MOTORFLAG>
     90a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     90e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     912:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <MOTORFLAG>
     916:	08 95       	ret

00000918 <runMotor>:
     918:	85 b1       	in	r24, 0x05	; 5
     91a:	80 78       	andi	r24, 0x80	; 128
     91c:	85 b9       	out	0x05, r24	; 5
     91e:	85 b1       	in	r24, 0x05	; 5
     920:	8b 60       	ori	r24, 0x0B	; 11
     922:	85 b9       	out	0x05, r24	; 5
     924:	16 bc       	out	0x26, r1	; 38
     926:	84 eb       	ldi	r24, 0xB4	; 180
     928:	87 bd       	out	0x27, r24	; 39
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <MOTORFLAG>
     930:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <MOTORFLAG>
     934:	08 95       	ret

00000936 <brakeMotor>:
     936:	85 b1       	in	r24, 0x05	; 5
     938:	80 78       	andi	r24, 0x80	; 128
     93a:	85 b9       	out	0x05, r24	; 5
     93c:	85 b1       	in	r24, 0x05	; 5
     93e:	8f 60       	ori	r24, 0x0F	; 15
     940:	85 b9       	out	0x05, r24	; 5
     942:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <MOTORFLAG>
     946:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <MOTORFLAG>
     94a:	08 95       	ret

0000094c <stopMotor>:
     94c:	15 b8       	out	0x05, r1	; 5
     94e:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <MOTORFLAG>
     952:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <MOTORFLAG>
     956:	08 95       	ret

00000958 <Motor_init>:
     958:	84 b5       	in	r24, 0x24	; 36
     95a:	83 68       	ori	r24, 0x83	; 131
     95c:	84 bd       	out	0x24, r24	; 36
     95e:	85 b5       	in	r24, 0x25	; 37
     960:	82 60       	ori	r24, 0x02	; 2
     962:	85 bd       	out	0x25, r24	; 37
     964:	85 b3       	in	r24, 0x15	; 21
     966:	82 60       	ori	r24, 0x02	; 2
     968:	85 bb       	out	0x15, r24	; 21
     96a:	17 bc       	out	0x27, r1	; 39
     96c:	ef cf       	rjmp	.-34     	; 0x94c <stopMotor>
     96e:	08 95       	ret

00000970 <motorTimerStart>:
     970:	e1 e2       	ldi	r30, 0x21	; 33
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	88 60       	ori	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     982:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     986:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     98a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     98e:	a3 e7       	ldi	r26, 0x73	; 115
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	8c 91       	ld	r24, X
     994:	82 60       	ori	r24, 0x02	; 2
     996:	8c 93       	st	X, r24
     998:	80 81       	ld	r24, Z
     99a:	85 60       	ori	r24, 0x05	; 5
     99c:	80 83       	st	Z, r24
     99e:	8a b3       	in	r24, 0x1a	; 26
     9a0:	82 60       	ori	r24, 0x02	; 2
     9a2:	8a bb       	out	0x1a, r24	; 26
     9a4:	84 eb       	ldi	r24, 0xB4	; 180
     9a6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     9aa:	08 95       	ret

000009ac <motorTimerStop>:
     9ac:	e1 e2       	ldi	r30, 0x21	; 33
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	80 81       	ld	r24, Z
     9b2:	8a 7f       	andi	r24, 0xFA	; 250
     9b4:	80 83       	st	Z, r24
     9b6:	08 95       	ret

000009b8 <__vector_47>:
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	0b b6       	in	r0, 0x3b	; 59
     9c4:	0f 92       	push	r0
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     9f0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     9f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     9f8:	86 39       	cpi	r24, 0x96	; 150
     9fa:	20 f4       	brcc	.+8      	; 0xa04 <__vector_47+0x4c>
     9fc:	86 e9       	ldi	r24, 0x96	; 150
     9fe:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     a02:	d4 df       	rcall	.-88     	; 0x9ac <motorTimerStop>
     a04:	16 bc       	out	0x26, r1	; 38
     a06:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     a0a:	87 bd       	out	0x27, r24	; 39
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0b be       	out	0x3b, r0	; 59
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <ADC_Init>:
     a32:	ec e7       	ldi	r30, 0x7C	; 124
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	80 64       	ori	r24, 0x40	; 64
     a3a:	80 83       	st	Z, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	80 83       	st	Z, r24
     a42:	ea e7       	ldi	r30, 0x7A	; 122
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	80 83       	st	Z, r24
     a4c:	80 81       	ld	r24, Z
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 83       	st	Z, r24
     a52:	80 81       	ld	r24, Z
     a54:	83 60       	ori	r24, 0x03	; 3
     a56:	80 83       	st	Z, r24
     a58:	08 95       	ret

00000a5a <classify>:
     a5a:	86 3b       	cpi	r24, 0xB6	; 182
     a5c:	23 e0       	ldi	r18, 0x03	; 3
     a5e:	92 07       	cpc	r25, r18
     a60:	38 f0       	brcs	.+14     	; 0xa70 <classify+0x16>
     a62:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <countB>
     a6c:	82 e3       	ldi	r24, 0x32	; 50
     a6e:	08 95       	ret
     a70:	80 32       	cpi	r24, 0x20	; 32
     a72:	23 e0       	ldi	r18, 0x03	; 3
     a74:	92 07       	cpc	r25, r18
     a76:	38 f0       	brcs	.+14     	; 0xa86 <classify+0x2c>
     a78:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <countW>
     a82:	86 e9       	ldi	r24, 0x96	; 150
     a84:	08 95       	ret
     a86:	80 39       	cpi	r24, 0x90	; 144
     a88:	91 40       	sbci	r25, 0x01	; 1
     a8a:	38 f0       	brcs	.+14     	; 0xa9a <classify+0x40>
     a8c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     a90:	8f 5f       	subi	r24, 0xFF	; 255
     a92:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <countS>
     a96:	88 ec       	ldi	r24, 0xC8	; 200
     a98:	08 95       	ret
     a9a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <countA>
     aa4:	84 e6       	ldi	r24, 0x64	; 100
     aa6:	08 95       	ret

00000aa8 <debounce>:
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	08 2e       	mov	r0, r24
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <debounce+0xc>
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <debounce+0x8>
     ab8:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <debounce+0x18>
     abe:	66 0f       	add	r22, r22
     ac0:	8a 95       	dec	r24
     ac2:	ea f7       	brpl	.-6      	; 0xabe <debounce+0x16>
     ac4:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     ac8:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     acc:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     ad0:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <debounce+0x4c>
     ad6:	99 b1       	in	r25, 0x09	; 9
     ad8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     adc:	89 23       	and	r24, r25
     ade:	68 13       	cpse	r22, r24
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <debounce+0x62>
     ae2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     ae6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     af0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     af4:	84 2f       	mov	r24, r20
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     afc:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     b00:	28 17       	cp	r18, r24
     b02:	39 07       	cpc	r19, r25
     b04:	40 f3       	brcs	.-48     	; 0xad6 <debounce+0x2e>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	08 95       	ret

00000b0e <debouncePINJ>:
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	08 2e       	mov	r0, r24
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <debouncePINJ+0xc>
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	0a 94       	dec	r0
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <debouncePINJ+0x8>
     b1e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <debouncePINJ+0x18>
     b24:	66 0f       	add	r22, r22
     b26:	8a 95       	dec	r24
     b28:	ea f7       	brpl	.-6      	; 0xb24 <debouncePINJ+0x16>
     b2a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     b2e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     b32:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     b36:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     b3a:	10 c0       	rjmp	.+32     	; 0xb5c <debouncePINJ+0x4e>
     b3c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     b40:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     b44:	89 23       	and	r24, r25
     b46:	68 13       	cpse	r22, r24
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <debouncePINJ+0x64>
     b4a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     b4e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     b58:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     b5c:	84 2f       	mov	r24, r20
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     b64:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     b68:	28 17       	cp	r18, r24
     b6a:	39 07       	cpc	r19, r25
     b6c:	38 f3       	brcs	.-50     	; 0xb3c <debouncePINJ+0x2e>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	08 95       	ret
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	08 95       	ret

00000b76 <mTimer_init>:




void mTimer_init(){
	TCCR1B |= _BV(CS11);//Set prescaler to 8
     b76:	e1 e8       	ldi	r30, 0x81	; 129
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); // Configure counter for CTC mode;
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 83       	st	Z, r24
	OCR1A = 0x03E8; //Set top value for Timer counter
     b86:	88 ee       	ldi	r24, 0xE8	; 232
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     b8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     b92:	08 95       	ret

00000b94 <mTimer>:


void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
     b94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     b98:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
     b9c:	26 b3       	in	r18, 0x16	; 22
     b9e:	22 60       	ori	r18, 0x02	; 2
     ba0:	26 bb       	out	0x16, r18	; 22



void mTimer(int count){
	int i; //counter for ms
	i = 0;
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <mTimer+0x22>
		if((TIFR1 & 0x02) == 0x02){
     ba8:	b1 9b       	sbis	0x16, 1	; 22
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <mTimer+0x22>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
     bac:	46 b3       	in	r20, 0x16	; 22
     bae:	42 60       	ori	r20, 0x02	; 2
     bb0:	46 bb       	out	0x16, r20	; 22
			i++;	//increment counter to count milliseconds
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	b4 f3       	brlt	.-20     	; 0xba8 <mTimer+0x14>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     bbc:	08 95       	ret

00000bbe <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     bbe:	e1 ea       	ldi	r30, 0xA1	; 161
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	88 60       	ori	r24, 0x08	; 8
     bc6:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     bc8:	87 e0       	ldi	r24, 0x07	; 7
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     bd0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     bd4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     bd8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     bdc:	a2 e7       	ldi	r26, 0x72	; 114
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	8c 91       	ld	r24, X
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     be6:	80 81       	ld	r24, Z
     be8:	85 60       	ori	r24, 0x05	; 5
     bea:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     bec:	89 b3       	in	r24, 0x19	; 25
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	89 bb       	out	0x19, r24	; 25
     bf2:	08 95       	ret

00000bf4 <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     bf4:	e1 ea       	ldi	r30, 0xA1	; 161
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8a 7f       	andi	r24, 0xFA	; 250
     bfc:	80 83       	st	Z, r24
     bfe:	08 95       	ret

00000c00 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     c00:	e1 ea       	ldi	r30, 0xA1	; 161
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	85 60       	ori	r24, 0x05	; 5
     c08:	80 83       	st	Z, r24
     c0a:	08 95       	ret

00000c0c <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     c1a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     c1e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <runTime_d+0x1>
     c28:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <runTime_d>
	
}//ISR
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	8f 93       	push	r24
	PORTC = 0xFF;
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     c4a:	8f 91       	pop	r24
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	a4 da       	rcall	.-2744   	; 0x1a4 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	86 db       	rcall	.-2292   	; 0x36e <LCDGotoXY>
     c62:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     c66:	62 e0       	ldi	r22, 0x02	; 2
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	20 db       	rcall	.-2496   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c6e:	85 e1       	ldi	r24, 0x15	; 21
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	10 db       	rcall	.-2528   	; 0x294 <LCDWriteString>
     c74:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
		LCDWriteInt( countA, 2);
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	17 db       	rcall	.-2514   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c80:	85 e1       	ldi	r24, 0x15	; 21
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	07 db       	rcall	.-2546   	; 0x294 <LCDWriteString>
		LCDWriteInt( countW, 2);
     c86:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e db       	rcall	.-2532   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c92:	85 e1       	ldi	r24, 0x15	; 21
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	fe da       	rcall	.-2564   	; 0x294 <LCDWriteString>
		LCDWriteInt(countS, 2);
     c98:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	05 db       	rcall	.-2550   	; 0x2ae <LCDWriteInt>
		LCDWriteString("->");
     ca4:	87 e1       	ldi	r24, 0x17	; 23
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	f5 da       	rcall	.-2582   	; 0x294 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     caa:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	fc da       	rcall	.-2568   	; 0x2ae <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	59 db       	rcall	.-2382   	; 0x36e <LCDGotoXY>
     cbc:	8a e1       	ldi	r24, 0x1A	; 26
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	e9 da       	rcall	.-2606   	; 0x294 <LCDWriteString>
     cc2:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     cc6:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <runTime_d+0x1>
     cca:	36 95       	lsr	r19
     ccc:	27 95       	ror	r18
     cce:	36 95       	lsr	r19
     cd0:	27 95       	ror	r18
     cd2:	36 95       	lsr	r19
     cd4:	27 95       	ror	r18
     cd6:	a5 ec       	ldi	r26, 0xC5	; 197
     cd8:	b0 e2       	ldi	r27, 0x20	; 32
     cda:	1e d5       	rcall	.+2620   	; 0x1718 <__umulhisi3>
     cdc:	62 e0       	ldi	r22, 0x02	; 2
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	92 95       	swap	r25
     ce2:	82 95       	swap	r24
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	89 27       	eor	r24, r25
     ce8:	9f 70       	andi	r25, 0x0F	; 15
     cea:	89 27       	eor	r24, r25
     cec:	e0 da       	rcall	.-2624   	; 0x2ae <LCDWriteInt>
		LCDWriteString( ".");
     cee:	8d e1       	ldi	r24, 0x1D	; 29
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	d0 da       	rcall	.-2656   	; 0x294 <LCDWriteString>
     cf4:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
     cf8:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <runTime_d+0x1>
     cfc:	9a 01       	movw	r18, r20
     cfe:	ad ec       	ldi	r26, 0xCD	; 205
     d00:	bc ec       	ldi	r27, 0xCC	; 204
     d02:	0a d5       	rcall	.+2580   	; 0x1718 <__umulhisi3>
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24
     d08:	96 95       	lsr	r25
     d0a:	87 95       	ror	r24
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	9c 01       	movw	r18, r24
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	9a 01       	movw	r18, r20
     d2c:	28 1b       	sub	r18, r24
     d2e:	39 0b       	sbc	r19, r25
     d30:	c9 01       	movw	r24, r18
     d32:	bd da       	rcall	.-2694   	; 0x2ae <LCDWriteInt>
     d34:	8f e1       	ldi	r24, 0x1F	; 31
		LCDWriteString("s Complete");
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	ad ca       	rjmp	.-2726   	; 0x294 <LCDWriteString>
     d3a:	08 95       	ret

00000d3c <dispStatus>:
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
     d40:	31 da       	rcall	.-2974   	; 0x1a4 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	13 db       	rcall	.-2522   	; 0x36e <LCDGotoXY>
     d48:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
     d4c:	62 e0       	ldi	r22, 0x02	; 2
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	ad da       	rcall	.-2726   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0a db       	rcall	.-2540   	; 0x36e <LCDGotoXY>
     d5a:	8a e2       	ldi	r24, 0x2A	; 42
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	9a da       	rcall	.-2764   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	04 db       	rcall	.-2552   	; 0x36e <LCDGotoXY>
     d66:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9e da       	rcall	.-2756   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	fb da       	rcall	.-2570   	; 0x36e <LCDGotoXY>
     d78:	8c e2       	ldi	r24, 0x2C	; 44
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	8b da       	rcall	.-2794   	; 0x294 <LCDWriteString>
     d7e:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	f5 da       	rcall	.-2582   	; 0x36e <LCDGotoXY>
     d84:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	8f da       	rcall	.-2786   	; 0x2ae <LCDWriteInt>
     d90:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
     d92:	87 e0       	ldi	r24, 0x07	; 7
     d94:	ec da       	rcall	.-2600   	; 0x36e <LCDGotoXY>
     d96:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	86 da       	rcall	.-2804   	; 0x2ae <LCDWriteInt>
     da2:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
     da4:	88 e0       	ldi	r24, 0x08	; 8
     da6:	e3 da       	rcall	.-2618   	; 0x36e <LCDGotoXY>
     da8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	7d da       	rcall	.-2822   	; 0x2ae <LCDWriteInt>
     db4:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
     db6:	89 e0       	ldi	r24, 0x09	; 9
     db8:	da da       	rcall	.-2636   	; 0x36e <LCDGotoXY>
     dba:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	74 da       	rcall	.-2840   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	d1 da       	rcall	.-2654   	; 0x36e <LCDGotoXY>
     dcc:	8e e2       	ldi	r24, 0x2E	; 46
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	61 da       	rcall	.-2878   	; 0x294 <LCDWriteString>
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
     dd6:	cb da       	rcall	.-2666   	; 0x36e <LCDGotoXY>
     dd8:	80 e3       	ldi	r24, 0x30	; 48
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	5b da       	rcall	.-2890   	; 0x294 <LCDWriteString>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
     de2:	c5 da       	rcall	.-2678   	; 0x36e <LCDGotoXY>
     de4:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <runTime_d>
     de8:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <runTime_d+0x1>
     dec:	36 95       	lsr	r19
     dee:	27 95       	ror	r18
     df0:	36 95       	lsr	r19
     df2:	27 95       	ror	r18
     df4:	ab e7       	ldi	r26, 0x7B	; 123
     df6:	b4 e1       	ldi	r27, 0x14	; 20
     df8:	8f d4       	rcall	.+2334   	; 0x1718 <__umulhisi3>
     dfa:	63 e0       	ldi	r22, 0x03	; 3
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	55 da       	rcall	.-2902   	; 0x2ae <LCDWriteInt>
	

	LCDWriteIntXY(0, 1, CurPosition, 3);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	b2 da       	rcall	.-2716   	; 0x36e <LCDGotoXY>
     e0a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
     e0e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <ORFLAG>
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	4b da       	rcall	.-2922   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(3,1, ">");
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	a8 da       	rcall	.-2736   	; 0x36e <LCDGotoXY>
     e1e:	88 e1       	ldi	r24, 0x18	; 24
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	38 da       	rcall	.-2960   	; 0x294 <LCDWriteString>
     e24:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(4, 1, Parts[countSort], 3);
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	a2 da       	rcall	.-2748   	; 0x36e <LCDGotoXY>
     e2a:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e3 54       	subi	r30, 0x43	; 67
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	80 81       	ld	r24, Z
     e36:	63 e0       	ldi	r22, 0x03	; 3
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	38 da       	rcall	.-2960   	; 0x2ae <LCDWriteInt>
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	95 da       	rcall	.-2774   	; 0x36e <LCDGotoXY>
	//LCDWriteStringXY(8, 1,"D" );
	//LCDWriteIntXY(8, 1, exitdropTime/1000, 2);//delay in ms
	LCDWriteIntXY(12, 1, adcDisp, 4);
     e44:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcDisp>
     e48:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcDisp+0x1>
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	2e ca       	rjmp	.-2980   	; 0x2ae <LCDWriteInt>
     e52:	08 95       	ret

00000e54 <main>:
     e54:	e1 e6       	ldi	r30, 0x61	; 97
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 e8       	ldi	r24, 0x80	; 128
     e5a:	80 83       	st	Z, r24
     e5c:	81 e0       	ldi	r24, 0x01	; 1


int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
     e5e:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
     e60:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
     e66:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
     e68:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
     e6a:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0);
     e6c:	e4 e0       	ldi	r30, 0x04	; 4
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	80 81       	ld	r24, Z
     e72:	8e 7f       	andi	r24, 0xFE	; 254
     e74:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
     e76:	e9 e6       	ldi	r30, 0x69	; 105
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
     e80:	80 81       	ld	r24, Z
     e82:	8c 60       	ori	r24, 0x0C	; 12
     e84:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);// | _BV(ISC20);//EX
     e86:	80 81       	ld	r24, Z
     e88:	80 62       	ori	r24, 0x20	; 32
     e8a:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
     e8c:	80 81       	ld	r24, Z
     e8e:	80 6c       	ori	r24, 0xC0	; 192
     e90:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);
     e92:	e8 e6       	ldi	r30, 0x68	; 104
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	82 60       	ori	r24, 0x02	; 2
     e9a:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);
     e9c:	ec e6       	ldi	r30, 0x6C	; 108
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 83       	st	Z, r24


	ADC_Init();
     ea6:	c5 dd       	rcall	.-1142   	; 0xa32 <ADC_Init>
	mTimer_init();
     ea8:	66 de       	rcall	.-820    	; 0xb76 <mTimer_init>
	stepTimer_init();
     eaa:	38 dc       	rcall	.-1936   	; 0x71c <stepTimer_init>
	InitLCD(LS_BLINK|LS_ULINE);
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	b1 d9       	rcall	.-3230   	; 0x212 <InitLCD>
	LCDClear();
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	77 d9       	rcall	.-3346   	; 0x1a4 <LCDByte>
	
	EIMSK |= 0x08;
     eb6:	8d b3       	in	r24, 0x1d	; 29
     eb8:	88 60       	ori	r24, 0x08	; 8
	sei();// Enable global interrupts
     eba:	8d bb       	out	0x1d, r24	; 29

	//CALIBRATION
	
	stepCalibrate();
     ebc:	78 94       	sei
     ebe:	ef dc       	rcall	.-1570   	; 0x89e <stepCalibrate>
	mTimer(2000);
     ec0:	80 ed       	ldi	r24, 0xD0	; 208
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	67 de       	rcall	.-818    	; 0xb94 <mTimer>
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
     ec6:	8d b3       	in	r24, 0x1d	; 29
     ec8:	87 60       	ori	r24, 0x07	; 7
     eca:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
     ecc:	8d b3       	in	r24, 0x1d	; 29
     ece:	87 7f       	andi	r24, 0xF7	; 247
	Motor_init();
     ed0:	8d bb       	out	0x1d, r24	; 29
     ed2:	42 dd       	rcall	.-1404   	; 0x958 <Motor_init>
	//sei();
	
	//MAIN OPERATION
	countPart=0;
     ed4:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <countPart>
	countSort = 0;
     ed8:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <countSort>

	startMotor();//Start Belt
     edc:	0a dd       	rcall	.-1516   	; 0x8f2 <startMotor>
     ede:	6f de       	rcall	.-802    	; 0xbbe <runTimerStart>
	runTimerStart();//Start System Timer
     ee0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
	STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{	
				
		if(ENABLE)
     ee4:	88 23       	and	r24, r24
     ee6:	b9 f1       	breq	.+110    	; 0xf56 <main+0x102>
     ee8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
     eec:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     ef0:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <refreshTime>
     ef4:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <refreshTime+0x1>
     ef8:	82 1b       	sub	r24, r18
     efa:	93 0b       	sbc	r25, r19
     efc:	85 36       	cpi	r24, 0x65	; 101
     efe:	91 05       	cpc	r25, r1
     f00:	48 f0       	brcs	.+18     	; 0xf14 <main+0xc0>
     f02:	1c df       	rcall	.-456    	; 0xd3c <dispStatus>
			{
				dispStatus();
     f04:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
				refreshTime = runTime_d;	
     f08:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     f0c:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <refreshTime+0x1>
     f10:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <refreshTime>
     f14:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
     f18:	88 23       	and	r24, r24
     f1a:	11 f3       	breq	.-60     	; 0xee0 <main+0x8c>
     f1c:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <countSort>
		{
			if(countSort != countPart)
     f20:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
     f24:	98 17       	cp	r25, r24
     f26:	49 f0       	breq	.+18     	; 0xf3a <main+0xe6>
     f28:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
			{
				rampTime_d = runTime_d;	
     f2c:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     f30:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rampTime_d+0x1>
     f34:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rampTime_d>
     f38:	d3 cf       	rjmp	.-90     	; 0xee0 <main+0x8c>
     f3a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
     f3e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     f42:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <rampTime_d>
     f46:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <rampTime_d+0x1>
     f4a:	82 1b       	sub	r24, r18
     f4c:	93 0b       	sbc	r25, r19
     f4e:	81 3a       	cpi	r24, 0xA1	; 161
     f50:	9f 40       	sbci	r25, 0x0F	; 15
     f52:	30 f2       	brcs	.-116    	; 0xee0 <main+0x8c>
	}//while ENABLE
	
	
	
	DISABLE:
	brakeMotor();
     f54:	20 c0       	rjmp	.+64     	; 0xf96 <main+0x142>
     f56:	ef dc       	rcall	.-1570   	; 0x936 <brakeMotor>
	stepStop();
     f58:	0d dc       	rcall	.-2022   	; 0x774 <stepStop>
	runTimerStop();
     f5a:	4c de       	rcall	.-872    	; 0xbf4 <runTimerStop>

	uint8_t INTState = EIMSK;
     f5c:	cd b3       	in	r28, 0x1d	; 29
	EIMSK = 0x01;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 &= ~_BV(PCINT9);
     f62:	ec e6       	ldi	r30, 0x6C	; 108
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8d 7f       	andi	r24, 0xFD	; 253
     f6a:	80 83       	st	Z, r24
	
	while((PIND & 0x01) == 0x00);
     f6c:	48 9b       	sbis	0x09, 0	; 9
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <main+0x118>
	stopMotor();
     f70:	ed dc       	rcall	.-1574   	; 0x94c <stopMotor>
	stepRes();
     f72:	c9 db       	rcall	.-2158   	; 0x706 <stepRes>
	dispStatus();
     f74:	e3 de       	rcall	.-570    	; 0xd3c <dispStatus>
     f76:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
	while(!ENABLE)
     f7a:	88 23       	and	r24, r24
     f7c:	e1 f3       	breq	.-8      	; 0xf76 <main+0x122>
	{
	}
	while((PIND & 0x01) == 0x00);
     f7e:	48 9b       	sbis	0x09, 0	; 9
     f80:	fe cf       	rjmp	.-4      	; 0xf7e <main+0x12a>
	
	EIMSK = INTState;
     f82:	cd bb       	out	0x1d, r28	; 29
	PCMSK1 |= _BV(PCINT9);
     f84:	ec e6       	ldi	r30, 0x6C	; 108
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	80 83       	st	Z, r24
	runTimerResume();
     f8e:	38 de       	rcall	.-912    	; 0xc00 <runTimerResume>
     f90:	da db       	rcall	.-2124   	; 0x746 <stepStart>
	stepStart();
     f92:	36 de       	rcall	.-916    	; 0xc00 <runTimerResume>
     f94:	a5 cf       	rjmp	.-182    	; 0xee0 <main+0x8c>
	runTimerResume();
     f96:	f8 94       	cli
     f98:	15 b8       	out	0x05, r1	; 5
	goto STANDBY;
     f9a:	12 b8       	out	0x02, r1	; 2
	
	
	SHUTDOWN:
	
	cli();
     f9c:	5c de       	rcall	.-840    	; 0xc56 <dispComplete>
	PORTB = 0x00;
     f9e:	ff cf       	rjmp	.-2      	; 0xf9e <main+0x14a>

00000fa0 <__vector_2>:
	PORTA = 0x00;
     fa0:	1f 92       	push	r1
	
	 dispComplete();
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
     fa8:	11 24       	eor	r1, r1
     faa:	0b b6       	in	r0, 0x3b	; 59
     fac:	0f 92       	push	r0
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	if(ORFLAG){
     fca:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
     fce:	88 23       	and	r24, r24
     fd0:	69 f1       	breq	.+90     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
		
		if(debounce(1, 1, NOISECHECK)){
     fd2:	4c e3       	ldi	r20, 0x3C	; 60
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	67 dd       	rcall	.-1330   	; 0xaa8 <debounce>
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <__vector_2+0x40>
     fde:	79 c0       	rjmp	.+242    	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
			ORFLAG  = 0; //Part has entered OR
     fe0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1);
     fe4:	8d b3       	in	r24, 0x1d	; 29
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
     fea:	e9 e6       	ldi	r30, 0x69	; 105
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
     ff4:	8d b3       	in	r24, 0x1d	; 29
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
     ffa:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <countADC+0x1>
     ffe:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <countADC>
			adcPart = 1023;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    100a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
		
			ADCSRA |=_BV(ADSC);
    100e:	ea e7       	ldi	r30, 0x7A	; 122
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 64       	ori	r24, 0x40	; 64
		
			motorTimerStart();//slow down motor on approach
    1016:	80 83       	st	Z, r24
    1018:	ab dc       	rcall	.-1706   	; 0x970 <motorTimerStart>
			ORTime_s = runTime_d;
    101a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    101e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    1022:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <ORTime_s+0x1>
    1026:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <ORTime_s>
    102a:	53 c0       	rjmp	.+166    	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    102c:	4c e3       	ldi	r20, 0x3C	; 60
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	3a dd       	rcall	.-1420   	; 0xaa8 <debounce>
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1038:	4c c0       	rjmp	.+152    	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
    103a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    103e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    1042:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <ORTime_s>
    1046:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <ORTime_s+0x1>
    104a:	82 1b       	sub	r24, r18
    104c:	93 0b       	sbc	r25, r19
    104e:	06 97       	sbiw	r24, 0x06	; 6
    1050:	08 f4       	brcc	.+2      	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    1052:	3f c0       	rjmp	.+126    	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
			ORFLAG  = 1;//Part has cleared OR	
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    105a:	8d b3       	in	r24, 0x1d	; 29
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    1060:	e9 e6       	ldi	r30, 0x69	; 105
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	84 60       	ori	r24, 0x04	; 4
    1068:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    106a:	8d b3       	in	r24, 0x1d	; 29
    106c:	82 60       	ori	r24, 0x02	; 2
    106e:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    1070:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1074:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1078:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcDisp+0x1>
    107c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    1080:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1084:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1088:	82 3f       	cpi	r24, 0xF2	; 242
    108a:	93 40       	sbci	r25, 0x03	; 3
    108c:	10 f5       	brcc	.+68     	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
    108e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countADC>
    1092:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <countADC+0x1>
    1096:	c3 97       	sbiw	r24, 0x33	; 51
    1098:	e0 f0       	brcs	.+56     	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    109a:	c0 91 51 02 	lds	r28, 0x0251	; 0x800251 <countPart>
    109e:	d0 e0       	ldi	r29, 0x00	; 0
    10a0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    10a4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    10a8:	d8 dc       	rcall	.-1616   	; 0xa5a <classify>
    10aa:	c3 54       	subi	r28, 0x43	; 67
    10ac:	dd 4f       	sbci	r29, 0xFD	; 253
    10ae:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    10b0:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <countPart>
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <countPart>
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	a3 54       	subi	r26, 0x43	; 67
    10be:	bd 4f       	sbci	r27, 0xFD	; 253
    10c0:	8c 91       	ld	r24, X
    10c2:	e2 54       	subi	r30, 0x42	; 66
    10c4:	fd 4f       	sbci	r31, 0xFD	; 253
    10c6:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    10c8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    10d2:	8c b3       	in	r24, 0x1c	; 28
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	8c bb       	out	0x1c, r24	; 28
}//OR
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0b be       	out	0x3b, r0	; 59
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_3>:


//EX ISR //376 - 471 cycles
ISR(INT2_vect){
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	0b b6       	in	r0, 0x3b	; 59
    110e:	0f 92       	push	r0
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	
	
	if(!EXFLAG)
    1128:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <EXFLAG>
    112c:	81 11       	cpse	r24, r1
    112e:	63 c0       	rjmp	.+198    	; 0x11f6 <__vector_3+0xf4>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK)){
    1130:	4c e3       	ldi	r20, 0x3C	; 60
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	b8 dc       	rcall	.-1680   	; 0xaa8 <debounce>
    1138:	88 23       	and	r24, r24
    113a:	09 f4       	brne	.+2      	; 0x113e <__vector_3+0x3c>
    113c:	e7 c0       	rjmp	.+462    	; 0x130c <__vector_3+0x20a>
		
				EXFLAG =1;//Part is at EX
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1144:	8d b3       	in	r24, 0x1d	; 29
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    114a:	e9 e6       	ldi	r30, 0x69	; 105
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	80 61       	ori	r24, 0x10	; 16
    1152:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1154:	8d b3       	in	r24, 0x1d	; 29
    1156:	84 60       	ori	r24, 0x04	; 4
    1158:	8d bb       	out	0x1d, r24	; 29
				
				enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) + (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
    115a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
    115e:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    1162:	88 5a       	subi	r24, 0xA8	; 168
    1164:	92 40       	sbci	r25, 0x02	; 2
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    116e:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	24 1b       	sub	r18, r20
    1176:	31 09       	sbc	r19, r1
    1178:	28 9f       	mul	r18, r24
    117a:	a0 01       	movw	r20, r0
    117c:	29 9f       	mul	r18, r25
    117e:	50 0d       	add	r21, r0
    1180:	38 9f       	mul	r19, r24
    1182:	50 0d       	add	r21, r0
    1184:	11 24       	eor	r1, r1
    1186:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    118a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    118e:	99 23       	and	r25, r25
    1190:	1c f4       	brge	.+6      	; 0x1198 <__vector_3+0x96>
    1192:	91 95       	neg	r25
    1194:	81 95       	neg	r24
    1196:	91 09       	sbc	r25, r1
    1198:	46 97       	sbiw	r24, 0x16	; 22
    119a:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    119e:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	26 1b       	sub	r18, r22
    11a6:	31 09       	sbc	r19, r1
    11a8:	82 1b       	sub	r24, r18
    11aa:	93 0b       	sbc	r25, r19
    11ac:	68 ea       	ldi	r22, 0xA8	; 168
    11ae:	72 e0       	ldi	r23, 0x02	; 2
    11b0:	86 9f       	mul	r24, r22
    11b2:	90 01       	movw	r18, r0
    11b4:	87 9f       	mul	r24, r23
    11b6:	30 0d       	add	r19, r0
    11b8:	96 9f       	mul	r25, r22
    11ba:	30 0d       	add	r19, r0
    11bc:	11 24       	eor	r1, r1
    11be:	c9 01       	movw	r24, r18
    11c0:	84 0f       	add	r24, r20
    11c2:	95 1f       	adc	r25, r21
    11c4:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <enterTime+0x1>
    11c8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <enterTime>
				
				//enterdropTime = ENTER_DROP_TIME;
				
				if(enterTime>enterdropTime)
    11cc:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <enterTime>
    11d0:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <enterTime+0x1>
    11d4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <enterdropTime>
    11d8:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <enterdropTime+0x1>
    11dc:	82 17       	cp	r24, r18
    11de:	93 07       	cpc	r25, r19
				{		
						brakeMotor();//Turn motor on	
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <__vector_3+0xe2>
    11e2:	a9 db       	rcall	.-2222   	; 0x936 <brakeMotor>
				
				//if(abs(CurError)>DROP_REGION){
				//	brakeMotor();
				//}
		
				EXTime_s = runTime_d;
    11e4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    11e8:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    11ec:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <EXTime_s+0x1>
    11f0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <EXTime_s>
    11f4:	8b c0       	rjmp	.+278    	; 0x130c <__vector_3+0x20a>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME)	){
    11f6:	4c e3       	ldi	r20, 0x3C	; 60
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	55 dc       	rcall	.-1878   	; 0xaa8 <debounce>
    11fe:	88 23       	and	r24, r24
    1200:	09 f4       	brne	.+2      	; 0x1204 <__vector_3+0x102>
    1202:	84 c0       	rjmp	.+264    	; 0x130c <__vector_3+0x20a>
    1204:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    1208:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    120c:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <EXTime_s>
    1210:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <EXTime_s+0x1>
    1214:	82 1b       	sub	r24, r18
    1216:	93 0b       	sbc	r25, r19
    1218:	06 97       	sbiw	r24, 0x06	; 6
    121a:	08 f4       	brcc	.+2      	; 0x121e <__vector_3+0x11c>
    121c:	77 c0       	rjmp	.+238    	; 0x130c <__vector_3+0x20a>

				EXFLAG = 0;
    121e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1222:	8d b3       	in	r24, 0x1d	; 29
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    1228:	e9 e6       	ldi	r30, 0x69	; 105
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7e       	andi	r24, 0xEF	; 239
    1230:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1232:	8d b3       	in	r24, 0x1d	; 29
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	8d bb       	out	0x1d, r24	; 29

				if(countSort<countPart)
    1238:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <countSort>
    123c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countPart>
    1240:	98 17       	cp	r25, r24
    1242:	28 f4       	brcc	.+10     	; 0x124e <__vector_3+0x14c>
				{
					countSort+=1;//go to next part immediately
    1244:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countSort>
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <countSort>
				}
				
				exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
    124e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
    1252:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    1256:	88 5a       	subi	r24, 0xA8	; 168
    1258:	92 40       	sbci	r25, 0x02	; 2
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    1262:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	24 1b       	sub	r18, r20
    126a:	31 09       	sbc	r19, r1
    126c:	28 9f       	mul	r18, r24
    126e:	a0 01       	movw	r20, r0
    1270:	29 9f       	mul	r18, r25
    1272:	50 0d       	add	r21, r0
    1274:	38 9f       	mul	r19, r24
    1276:	50 0d       	add	r21, r0
    1278:	11 24       	eor	r1, r1
				 + ((DROP_REGION - abs(CurPosition - Parts[countSort-1])) - (Steps2Acc - accSteps))*MINDELAY;
    127a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <CurPosition>
    127e:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	e4 54       	subi	r30, 0x44	; 68
    1286:	fd 4f       	sbci	r31, 0xFD	; 253
    1288:	20 81       	ld	r18, Z
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	82 1b       	sub	r24, r18
    128e:	91 09       	sbc	r25, r1
    1290:	9c 01       	movw	r18, r24
    1292:	22 f4       	brpl	.+8      	; 0x129c <__vector_3+0x19a>
    1294:	22 27       	eor	r18, r18
    1296:	33 27       	eor	r19, r19
    1298:	28 1b       	sub	r18, r24
    129a:	39 0b       	sbc	r19, r25
    129c:	86 e1       	ldi	r24, 0x16	; 22
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    12a8:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	26 1b       	sub	r18, r22
    12b0:	31 09       	sbc	r19, r1
    12b2:	82 1b       	sub	r24, r18
    12b4:	93 0b       	sbc	r25, r19
    12b6:	68 ea       	ldi	r22, 0xA8	; 168
    12b8:	72 e0       	ldi	r23, 0x02	; 2
    12ba:	86 9f       	mul	r24, r22
    12bc:	90 01       	movw	r18, r0
    12be:	87 9f       	mul	r24, r23
    12c0:	30 0d       	add	r19, r0
    12c2:	96 9f       	mul	r25, r22
    12c4:	30 0d       	add	r19, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	42 0f       	add	r20, r18
    12ca:	53 1f       	adc	r21, r19
				if(countSort<countPart)
				{
					countSort+=1;//go to next part immediately
				}
				
				exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
    12cc:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <exitTime+0x1>
    12d0:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <exitTime>
				 + ((DROP_REGION - abs(CurPosition - Parts[countSort-1])) - (Steps2Acc - accSteps))*MINDELAY;
				
					
				if(exitTime<exitdropTime)
    12d4:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <exitTime>
    12d8:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <exitTime+0x1>
    12dc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <exitdropTime>
    12e0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <exitdropTime+0x1>
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	18 f4       	brcc	.+6      	; 0x12f0 <__vector_3+0x1ee>
				{
					//LCDWriteString("P");
					PAUSEFLAG = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <PAUSEFLAG>
				}
				if(abs(CurError)>DROP_REGION){
    12f0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    12f4:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    12f8:	99 23       	and	r25, r25
    12fa:	1c f4       	brge	.+6      	; 0x1302 <__vector_3+0x200>
    12fc:	91 95       	neg	r25
    12fe:	81 95       	neg	r24
    1300:	91 09       	sbc	r25, r1
    1302:	47 97       	sbiw	r24, 0x17	; 23
    1304:	1c f0       	brlt	.+6      	; 0x130c <__vector_3+0x20a>
					SLIPFLAG = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SLIPFLAG>
				}	
		}//HI
	}
	EIFR |= _BV(INT2);
    130c:	8c b3       	in	r24, 0x1c	; 28
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	8c bb       	out	0x1c, r24	; 28
}//EX
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0b be       	out	0x3b, r0	; 59
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <__vector_32>:




//STEPPER ISR  //84 - 250 cycles
ISR(TIMER3_COMPA_vect){
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	0b b6       	in	r0, 0x3b	; 59
    1344:	0f 92       	push	r0
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    135e:	0f d8       	rcall	.-4066   	; 0x37e <step>
	
	if(!SLIPFLAG)
    1360:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SLIPFLAG>
    1364:	81 11       	cpse	r24, r1
    1366:	10 c0       	rjmp	.+32     	; 0x1388 <__vector_32+0x50>
	{
		CurError = Parts[countSort] - CurPosition;
    1368:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	e3 54       	subi	r30, 0x43	; 67
    1370:	fd 4f       	sbci	r31, 0xFD	; 253
    1372:	80 81       	ld	r24, Z
    1374:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <CurPosition>
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	82 1b       	sub	r24, r18
    137c:	91 09       	sbc	r25, r1
    137e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <CurError+0x1>
    1382:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CurError>
    1386:	1c c0       	rjmp	.+56     	; 0x13c0 <__vector_32+0x88>
	
	}else
	{
		CurError = Parts[countSort-1] - CurPosition;
    1388:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <countSort>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	e4 54       	subi	r30, 0x44	; 68
    1390:	fd 4f       	sbci	r31, 0xFD	; 253
    1392:	80 81       	ld	r24, Z
    1394:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <CurPosition>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 1b       	sub	r24, r18
    139c:	91 09       	sbc	r25, r1
    139e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <CurError+0x1>
    13a2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CurError>
		if(abs(CurError)<DROP_REGION)
    13a6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    13aa:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    13ae:	99 23       	and	r25, r25
    13b0:	1c f4       	brge	.+6      	; 0x13b8 <__vector_32+0x80>
    13b2:	91 95       	neg	r25
    13b4:	81 95       	neg	r24
    13b6:	91 09       	sbc	r25, r1
    13b8:	46 97       	sbiw	r24, 0x16	; 22
    13ba:	14 f4       	brge	.+4      	; 0x13c0 <__vector_32+0x88>
		{
			SLIPFLAG = 0;
    13bc:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <SLIPFLAG>
		}
	}
	
	
	if(abs(CurError)>100)
    13c0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    13c4:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    13c8:	99 23       	and	r25, r25
    13ca:	1c f4       	brge	.+6      	; 0x13d2 <__vector_32+0x9a>
    13cc:	91 95       	neg	r25
    13ce:	81 95       	neg	r24
    13d0:	91 09       	sbc	r25, r1
    13d2:	85 36       	cpi	r24, 0x65	; 101
    13d4:	91 05       	cpc	r25, r1
    13d6:	5c f0       	brlt	.+22     	; 0x13ee <__vector_32+0xb6>
	{
		CurError = CurError - 200;
    13d8:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    13dc:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    13e0:	88 5c       	subi	r24, 0xC8	; 200
    13e2:	91 09       	sbc	r25, r1
    13e4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <CurError+0x1>
    13e8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CurError>
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <__vector_32+0xd8>
	}else if(CurError<-100)
    13ee:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    13f2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    13f6:	8c 39       	cpi	r24, 0x9C	; 156
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	54 f4       	brge	.+20     	; 0x1410 <__vector_32+0xd8>
	{
		CurError = CurError + 200;
    13fc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    1400:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    1404:	88 53       	subi	r24, 0x38	; 56
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <CurError+0x1>
    140c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CurError>
	}
		

	stepUpdateDir();
    1410:	0e 94 05 02 	call	0x40a	; 0x40a <stepUpdateDir>
	stepUpdateDelay();
    1414:	7d d8       	rcall	.-3846   	; 0x510 <stepUpdateDelay>

	


//CONTROL MOTOR
	if(!MOTORFLAG){//If motor is OFF
    1416:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <MOTORFLAG>
    141a:	81 11       	cpse	r24, r1
    141c:	54 c0       	rjmp	.+168    	; 0x14c6 <__vector_32+0x18e>
		
		if(abs(CurError)> DROP_REGION){
    141e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    1422:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    1426:	99 23       	and	r25, r25
    1428:	1c f4       	brge	.+6      	; 0x1430 <__vector_32+0xf8>
    142a:	91 95       	neg	r25
    142c:	81 95       	neg	r24
    142e:	91 09       	sbc	r25, r1
    1430:	47 97       	sbiw	r24, 0x17	; 23
    1432:	0c f4       	brge	.+2      	; 0x1436 <__vector_32+0xfe>
    1434:	46 c0       	rjmp	.+140    	; 0x14c2 <__vector_32+0x18a>
			enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) + (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
    1436:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
    143a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    143e:	88 5a       	subi	r24, 0xA8	; 168
    1440:	92 40       	sbci	r25, 0x02	; 2
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    144a:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	24 1b       	sub	r18, r20
    1452:	31 09       	sbc	r19, r1
    1454:	28 9f       	mul	r18, r24
    1456:	a0 01       	movw	r20, r0
    1458:	29 9f       	mul	r18, r25
    145a:	50 0d       	add	r21, r0
    145c:	38 9f       	mul	r19, r24
    145e:	50 0d       	add	r21, r0
    1460:	11 24       	eor	r1, r1
    1462:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    1466:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    146a:	99 23       	and	r25, r25
    146c:	1c f4       	brge	.+6      	; 0x1474 <__vector_32+0x13c>
    146e:	91 95       	neg	r25
    1470:	81 95       	neg	r24
    1472:	91 09       	sbc	r25, r1
    1474:	46 97       	sbiw	r24, 0x16	; 22
    1476:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <Steps2Acc>
    147a:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	26 1b       	sub	r18, r22
    1482:	31 09       	sbc	r19, r1
    1484:	82 1b       	sub	r24, r18
    1486:	93 0b       	sbc	r25, r19
    1488:	68 ea       	ldi	r22, 0xA8	; 168
    148a:	72 e0       	ldi	r23, 0x02	; 2
    148c:	86 9f       	mul	r24, r22
    148e:	90 01       	movw	r18, r0
    1490:	87 9f       	mul	r24, r23
    1492:	30 0d       	add	r19, r0
    1494:	96 9f       	mul	r25, r22
    1496:	30 0d       	add	r19, r0
    1498:	11 24       	eor	r1, r1
    149a:	c9 01       	movw	r24, r18
    149c:	84 0f       	add	r24, r20
    149e:	95 1f       	adc	r25, r21
    14a0:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <enterTime+0x1>
    14a4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <enterTime>
			if(enterTime<enterdropTime)
    14a8:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <enterTime>
    14ac:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <enterTime+0x1>
    14b0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <enterdropTime>
    14b4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <enterdropTime+0x1>
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
			{				
				runMotor();//Turn motor on
    14bc:	98 f4       	brcc	.+38     	; 0x14e4 <__vector_32+0x1ac>
    14be:	2c da       	rcall	.-2984   	; 0x918 <runMotor>
			}
			
		}else
		{
			runMotor();
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <__vector_32+0x1ac>
    14c2:	2a da       	rcall	.-2988   	; 0x918 <runMotor>
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <__vector_32+0x1ac>
		}
	}else 
	{
		if((abs(CurError)>DROP_REGION) && EXFLAG)
    14c6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CurError>
    14ca:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <CurError+0x1>
    14ce:	99 23       	and	r25, r25
    14d0:	1c f4       	brge	.+6      	; 0x14d8 <__vector_32+0x1a0>
    14d2:	91 95       	neg	r25
    14d4:	81 95       	neg	r24
    14d6:	91 09       	sbc	r25, r1
    14d8:	47 97       	sbiw	r24, 0x17	; 23
    14da:	24 f0       	brlt	.+8      	; 0x14e4 <__vector_32+0x1ac>
    14dc:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <EXFLAG>
		{
			brakeMotor();
    14e0:	81 11       	cpse	r24, r1
    14e2:	29 da       	rcall	.-2990   	; 0x936 <brakeMotor>
		
	}

//CONTROL MOTOR	

}//stepTimer
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0b be       	out	0x3b, r0	; 59
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_29>:

//ADC ISR
ISR(ADC_vect){
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	0b b6       	in	r0, 0x3b	; 59
    1516:	0f 92       	push	r0
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    1524:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    152e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	adcTemp+= (ADCH<<8);
    1532:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	98 2f       	mov	r25, r24
    153a:	88 27       	eor	r24, r24
    153c:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    1540:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    154c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	countADC+=1;
    1550:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countADC>
    1554:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <countADC+0x1>
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <countADC+0x1>
    155e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <countADC>
	
	if(adcTemp<adcPart){
    1562:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    1566:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    156a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    156e:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1572:	28 17       	cp	r18, r24
    1574:	39 07       	cpc	r19, r25
    1576:	40 f4       	brcc	.+16     	; 0x1588 <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    1578:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcTemp>
    157c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcTemp+0x1>
    1580:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    1584:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
	}
	
	if(!ORFLAG){
    1588:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    158c:	81 11       	cpse	r24, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    1590:	ea e7       	ldi	r30, 0x7A	; 122
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	80 83       	st	Z, r24
	}
}//ADC
    159a:	ff 91       	pop	r31
    159c:	ef 91       	pop	r30
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0b be       	out	0x3b, r0	; 59
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	0b b6       	in	r0, 0x3b	; 59
    15c0:	0f 92       	push	r0
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    15da:	4c e3       	ldi	r20, 0x3C	; 60
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	63 da       	rcall	.-2874   	; 0xaa8 <debounce>
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    15e6:	82 e3       	ldi	r24, 0x32	; 50
    15e8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <CurPosition>
		HALLSENSOR= 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <HALLSENSOR>
	}
}//HE
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0b be       	out	0x3b, r0	; 59
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    1618:	1f 92       	push	r1
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	0f 92       	push	r0
    1620:	11 24       	eor	r1, r1
    1622:	0b b6       	in	r0, 0x3b	; 59
    1624:	0f 92       	push	r0
    1626:	2f 93       	push	r18
    1628:	3f 93       	push	r19
    162a:	4f 93       	push	r20
    162c:	5f 93       	push	r21
    162e:	6f 93       	push	r22
    1630:	7f 93       	push	r23
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25
    1636:	af 93       	push	r26
    1638:	bf 93       	push	r27
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    163e:	4a ef       	ldi	r20, 0xFA	; 250
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	31 da       	rcall	.-2974   	; 0xaa8 <debounce>
    1646:	88 23       	and	r24, r24
    1648:	51 f0       	breq	.+20     	; 0x165e <__vector_1+0x46>
		if(ENABLE)
    164a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
    164e:	88 23       	and	r24, r24
    1650:	19 f0       	breq	.+6      	; 0x1658 <__vector_1+0x40>
		{
			ENABLE = 0;
    1652:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <ENABLE>
    1656:	03 c0       	rjmp	.+6      	; 0x165e <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ENABLE>
		}
	}
}//ISR Pause Button
    165e:	ff 91       	pop	r31
    1660:	ef 91       	pop	r30
    1662:	bf 91       	pop	r27
    1664:	af 91       	pop	r26
    1666:	9f 91       	pop	r25
    1668:	8f 91       	pop	r24
    166a:	7f 91       	pop	r23
    166c:	6f 91       	pop	r22
    166e:	5f 91       	pop	r21
    1670:	4f 91       	pop	r20
    1672:	3f 91       	pop	r19
    1674:	2f 91       	pop	r18
    1676:	0f 90       	pop	r0
    1678:	0b be       	out	0x3b, r0	; 59
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_10>:

ISR(PCINT1_vect)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	0b b6       	in	r0, 0x3b	; 59
    1690:	0f 92       	push	r0
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	2e da       	rcall	.-2980   	; 0xb0e <debouncePINJ>
    16b2:	88 23       	and	r24, r24
    16b4:	59 f0       	breq	.+22     	; 0x16cc <__vector_10+0x48>
		RAMPDOWN = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <RAMPDOWN>
		rampTime_d = runTime_d;	
    16bc:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    16c0:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    16c4:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rampTime_d+0x1>
    16c8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rampTime_d>
	}
}//ISR Ramp Button
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0b be       	out	0x3b, r0	; 59
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__divmodhi4>:
    16f2:	97 fb       	bst	r25, 7
    16f4:	07 2e       	mov	r0, r23
    16f6:	16 f4       	brtc	.+4      	; 0x16fc <__divmodhi4+0xa>
    16f8:	00 94       	com	r0
    16fa:	06 d0       	rcall	.+12     	; 0x1708 <__divmodhi4_neg1>
    16fc:	77 fd       	sbrc	r23, 7
    16fe:	08 d0       	rcall	.+16     	; 0x1710 <__divmodhi4_neg2>
    1700:	1a d0       	rcall	.+52     	; 0x1736 <__udivmodhi4>
    1702:	07 fc       	sbrc	r0, 7
    1704:	05 d0       	rcall	.+10     	; 0x1710 <__divmodhi4_neg2>
    1706:	3e f4       	brtc	.+14     	; 0x1716 <__divmodhi4_exit>

00001708 <__divmodhi4_neg1>:
    1708:	90 95       	com	r25
    170a:	81 95       	neg	r24
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	08 95       	ret

00001710 <__divmodhi4_neg2>:
    1710:	70 95       	com	r23
    1712:	61 95       	neg	r22
    1714:	7f 4f       	sbci	r23, 0xFF	; 255

00001716 <__divmodhi4_exit>:
    1716:	08 95       	ret

00001718 <__umulhisi3>:
    1718:	a2 9f       	mul	r26, r18
    171a:	b0 01       	movw	r22, r0
    171c:	b3 9f       	mul	r27, r19
    171e:	c0 01       	movw	r24, r0
    1720:	a3 9f       	mul	r26, r19
    1722:	70 0d       	add	r23, r0
    1724:	81 1d       	adc	r24, r1
    1726:	11 24       	eor	r1, r1
    1728:	91 1d       	adc	r25, r1
    172a:	b2 9f       	mul	r27, r18
    172c:	70 0d       	add	r23, r0
    172e:	81 1d       	adc	r24, r1
    1730:	11 24       	eor	r1, r1
    1732:	91 1d       	adc	r25, r1
    1734:	08 95       	ret

00001736 <__udivmodhi4>:
    1736:	aa 1b       	sub	r26, r26
    1738:	bb 1b       	sub	r27, r27
    173a:	51 e1       	ldi	r21, 0x11	; 17
    173c:	07 c0       	rjmp	.+14     	; 0x174c <__udivmodhi4_ep>

0000173e <__udivmodhi4_loop>:
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	a6 17       	cp	r26, r22
    1744:	b7 07       	cpc	r27, r23
    1746:	10 f0       	brcs	.+4      	; 0x174c <__udivmodhi4_ep>
    1748:	a6 1b       	sub	r26, r22
    174a:	b7 0b       	sbc	r27, r23

0000174c <__udivmodhi4_ep>:
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	5a 95       	dec	r21
    1752:	a9 f7       	brne	.-22     	; 0x173e <__udivmodhi4_loop>
    1754:	80 95       	com	r24
    1756:	90 95       	com	r25
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	08 95       	ret

0000175e <_exit>:
    175e:	f8 94       	cli

00001760 <__stop_program>:
    1760:	ff cf       	rjmp	.-2      	; 0x1760 <__stop_program>
