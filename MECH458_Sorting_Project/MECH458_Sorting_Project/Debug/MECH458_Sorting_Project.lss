
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  000018ae  00001942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800240  00800240  00001982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029b0  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ff  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00006e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aca  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00007ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00009016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__vector_1>
       8:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_2>
       c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_3>
      10:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_4>
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_10>
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	36 c7       	rjmp	.+3692   	; 0xf16 <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	19 c6       	rjmp	.+3122   	; 0xcf0 <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ea       	ldi	r30, 0xAE	; 174
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 33       	cpi	r26, 0x37	; 55
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ae 08 	call	0x115c	; 0x115c <main>
     122:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <_exit>

00000126 <__bad_interrupt>:
     126:	0e c7       	rjmp	.+3612   	; 0xf44 <__vector_default>

00000128 <LCDBusyLoop>:

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
     128:	87 b1       	in	r24, 0x07	; 7
     12a:	80 7f       	andi	r24, 0xF0	; 240
     12c:	87 b9       	out	0x07, r24	; 7
     12e:	88 b1       	in	r24, 0x08	; 8
     130:	80 62       	ori	r24, 0x20	; 32
     132:	88 b9       	out	0x08, r24	; 8
     134:	88 b1       	in	r24, 0x08	; 8
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	88 b9       	out	0x08, r24	; 8
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0x14>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1a>
     142:	88 b1       	in	r24, 0x08	; 8
     144:	80 68       	ori	r24, 0x80	; 128
     146:	88 b9       	out	0x08, r24	; 8
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	9a 95       	dec	r25
     14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0x22>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x28>
     150:	86 b1       	in	r24, 0x06	; 6
     152:	82 95       	swap	r24
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	92 e0       	ldi	r25, 0x02	; 2
     158:	9a 95       	dec	r25
     15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0x30>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDBusyLoop+0x36>
     15e:	98 b1       	in	r25, 0x08	; 8
     160:	9f 77       	andi	r25, 0x7F	; 127
     162:	98 b9       	out	0x08, r25	; 8
     164:	95 e0       	ldi	r25, 0x05	; 5
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x3e>
     16a:	00 00       	nop
     16c:	98 b1       	in	r25, 0x08	; 8
     16e:	90 68       	ori	r25, 0x80	; 128
     170:	98 b9       	out	0x08, r25	; 8
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	9a 95       	dec	r25
     176:	f1 f7       	brne	.-4      	; 0x174 <LCDBusyLoop+0x4c>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCDBusyLoop+0x52>
     17a:	96 b1       	in	r25, 0x06	; 6
     17c:	80 78       	andi	r24, 0x80	; 128
     17e:	92 e0       	ldi	r25, 0x02	; 2
     180:	9a 95       	dec	r25
     182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x58>
     184:	00 c0       	rjmp	.+0      	; 0x186 <LCDBusyLoop+0x5e>
     186:	98 b1       	in	r25, 0x08	; 8
     188:	9f 77       	andi	r25, 0x7F	; 127
     18a:	98 b9       	out	0x08, r25	; 8
     18c:	95 e0       	ldi	r25, 0x05	; 5
     18e:	9a 95       	dec	r25
     190:	f1 f7       	brne	.-4      	; 0x18e <LCDBusyLoop+0x66>
     192:	00 00       	nop
     194:	81 11       	cpse	r24, r1
     196:	d5 cf       	rjmp	.-86     	; 0x142 <LCDBusyLoop+0x1a>
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	8f 7d       	andi	r24, 0xDF	; 223
     19c:	88 b9       	out	0x08, r24	; 8
     19e:	87 b1       	in	r24, 0x07	; 7
     1a0:	8f 60       	ori	r24, 0x0F	; 15
     1a2:	87 b9       	out	0x07, r24	; 7
     1a4:	08 95       	ret

000001a6 <LCDByte>:
     1a6:	28 2f       	mov	r18, r24
     1a8:	22 95       	swap	r18
     1aa:	2f 70       	andi	r18, 0x0F	; 15
     1ac:	8f 70       	andi	r24, 0x0F	; 15
     1ae:	61 11       	cpse	r22, r1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCDByte+0x14>
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 7b       	andi	r25, 0xBF	; 191
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCDByte+0x1a>
     1ba:	98 b1       	in	r25, 0x08	; 8
     1bc:	90 64       	ori	r25, 0x40	; 64
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	9a 95       	dec	r25
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCDByte+0x1c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCDByte+0x22>
     1c8:	98 b1       	in	r25, 0x08	; 8
     1ca:	90 68       	ori	r25, 0x80	; 128
     1cc:	98 b9       	out	0x08, r25	; 8
     1ce:	98 b1       	in	r25, 0x08	; 8
     1d0:	90 7f       	andi	r25, 0xF0	; 240
     1d2:	92 2b       	or	r25, r18
     1d4:	98 b9       	out	0x08, r25	; 8
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	9a 95       	dec	r25
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDByte+0x32>
     1dc:	00 00       	nop
     1de:	98 b1       	in	r25, 0x08	; 8
     1e0:	9f 77       	andi	r25, 0x7F	; 127
     1e2:	98 b9       	out	0x08, r25	; 8
     1e4:	95 e0       	ldi	r25, 0x05	; 5
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDByte+0x40>
     1ea:	00 00       	nop
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	90 68       	ori	r25, 0x80	; 128
     1f0:	98 b9       	out	0x08, r25	; 8
     1f2:	98 b1       	in	r25, 0x08	; 8
     1f4:	90 7f       	andi	r25, 0xF0	; 240
     1f6:	89 2b       	or	r24, r25
     1f8:	88 b9       	out	0x08, r24	; 8
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCDByte+0x56>
     200:	00 00       	nop
     202:	88 b1       	in	r24, 0x08	; 8
     204:	8f 77       	andi	r24, 0x7F	; 127
     206:	88 b9       	out	0x08, r24	; 8
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCDByte+0x64>
     20e:	00 00       	nop
     210:	8b cf       	rjmp	.-234    	; 0x128 <LCDBusyLoop>
     212:	08 95       	ret

00000214 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     21a:	03 c0       	rjmp	.+6      	; 0x222 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	c3 df       	rcall	.-122    	; 0x1a6 <LCDByte>
	msg++;
     220:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     222:	88 81       	ld	r24, Y
     224:	81 11       	cpse	r24, r1
     226:	fa cf       	rjmp	.-12     	; 0x21c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     22e:	ef 92       	push	r14
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <LCDWriteInt+0xe>
     23c:	1f 92       	push	r1
     23e:	1f 92       	push	r1
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     246:	fe 01       	movw	r30, r28
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	25 e0       	ldi	r18, 0x05	; 5
     24c:	df 01       	movw	r26, r30
     24e:	1d 92       	st	X+, r1
     250:	2a 95       	dec	r18
     252:	e9 f7       	brne	.-6      	; 0x24e <LCDWriteInt+0x20>
	int i=4,j=0;
     254:	24 e0       	ldi	r18, 0x04	; 4
     256:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     258:	0f c0       	rjmp	.+30     	; 0x278 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     25a:	6a e0       	ldi	r22, 0x0A	; 10
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 1f 0c 	call	0x183e	; 0x183e <__divmodhi4>
     262:	e1 e0       	ldi	r30, 0x01	; 1
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ec 0f       	add	r30, r28
     268:	fd 1f       	adc	r31, r29
     26a:	e2 0f       	add	r30, r18
     26c:	f3 1f       	adc	r31, r19
     26e:	80 83       	st	Z, r24
	val=val/10;
     270:	86 2f       	mov	r24, r22
     272:	97 2f       	mov	r25, r23
	i--;
     274:	21 50       	subi	r18, 0x01	; 1
     276:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     278:	00 97       	sbiw	r24, 0x00	; 0
     27a:	79 f7       	brne	.-34     	; 0x25a <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     27c:	bf ef       	ldi	r27, 0xFF	; 255
     27e:	eb 16       	cp	r14, r27
     280:	fb 06       	cpc	r15, r27
     282:	81 f4       	brne	.+32     	; 0x2a4 <LCDWriteInt+0x76>
     284:	03 c0       	rjmp	.+6      	; 0x28c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     286:	0f 5f       	subi	r16, 0xFF	; 255
     288:	1f 4f       	sbci	r17, 0xFF	; 255
     28a:	02 c0       	rjmp	.+4      	; 0x290 <LCDWriteInt+0x62>
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	e1 e0       	ldi	r30, 0x01	; 1
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ec 0f       	add	r30, r28
     296:	fd 1f       	adc	r31, r29
     298:	e0 0f       	add	r30, r16
     29a:	f1 1f       	adc	r31, r17
     29c:	20 81       	ld	r18, Z
     29e:	22 23       	and	r18, r18
     2a0:	91 f3       	breq	.-28     	; 0x286 <LCDWriteInt+0x58>
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     2a4:	05 e0       	ldi	r16, 0x05	; 5
     2a6:	10 e0       	ldi	r17, 0x00	; 0
     2a8:	0e 19       	sub	r16, r14
     2aa:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     2ac:	99 23       	and	r25, r25
     2ae:	84 f4       	brge	.+32     	; 0x2d0 <LCDWriteInt+0xa2>
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	8d e2       	ldi	r24, 0x2D	; 45
     2b4:	78 df       	rcall	.-272    	; 0x1a6 <LCDByte>
     2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2b8:	e1 e0       	ldi	r30, 0x01	; 1
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ec 0f       	add	r30, r28
     2be:	fd 1f       	adc	r31, r29
     2c0:	e0 0f       	add	r30, r16
     2c2:	f1 1f       	adc	r31, r17
     2c4:	80 81       	ld	r24, Z
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	6d df       	rcall	.-294    	; 0x1a6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	05 30       	cpi	r16, 0x05	; 5
     2d2:	11 05       	cpc	r17, r1
     2d4:	8c f3       	brlt	.-30     	; 0x2b8 <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	08 95       	ret

000002ee <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     2ee:	88 32       	cpi	r24, 0x28	; 40
     2f0:	28 f4       	brcc	.+10     	; 0x2fc <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     2f2:	61 11       	cpse	r22, r1
     2f4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	80 68       	ori	r24, 0x80	; 128
     2fa:	55 cf       	rjmp	.-342    	; 0x1a6 <LCDByte>
     2fc:	08 95       	ret

000002fe <step>:
extern volatile uint8_t Steps2Exit;
extern volatile char DROPFLAG;


uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     2fe:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__data_end>
     302:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     306:	89 0f       	add	r24, r25
     308:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     30c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	1c f0       	brlt	.+6      	; 0x31a <step+0x1c>
     314:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
     318:	07 c0       	rjmp	.+14     	; 0x328 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     31a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     31e:	88 23       	and	r24, r24
     320:	1c f4       	brge	.+6      	; 0x328 <step+0x2a>
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     328:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__data_end>
     32c:	0e 2e       	mov	r0, r30
     32e:	00 0c       	add	r0, r0
     330:	ff 0b       	sbc	r31, r31
     332:	e0 50       	subi	r30, 0x00	; 0
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	80 81       	ld	r24, Z
     338:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     33a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     33e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     342:	89 0f       	add	r24, r25
     344:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 225 && Dir==1){CurPosition -=  200;}
     348:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     34c:	82 3e       	cpi	r24, 0xE2	; 226
     34e:	50 f0       	brcs	.+20     	; 0x364 <step+0x66>
     350:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	31 f4       	brne	.+12     	; 0x364 <step+0x66>
     358:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     35c:	88 5c       	subi	r24, 0xC8	; 200
     35e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     362:	0d c0       	rjmp	.+26     	; 0x37e <step+0x80>
	else if(CurPosition < 25 && Dir==-1){CurPosition += 200;}
     364:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     368:	89 31       	cpi	r24, 0x19	; 25
     36a:	48 f4       	brcc	.+18     	; 0x37e <step+0x80>
     36c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	29 f4       	brne	.+10     	; 0x37e <step+0x80>
     374:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     378:	88 53       	subi	r24, 0x38	; 56
     37a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     37e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     382:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	08 95       	ret

0000038a <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(HOLDFLAG)
     38a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <HOLDFLAG>
     38e:	88 23       	and	r24, r24
     390:	81 f1       	breq	.+96     	; 0x3f2 <stepUpdateError+0x68>
	{
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
     392:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     396:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     39a:	99 23       	and	r25, r25
     39c:	1c f4       	brge	.+6      	; 0x3a4 <stepUpdateError+0x1a>
     39e:	91 95       	neg	r25
     3a0:	81 95       	neg	r24
     3a2:	91 09       	sbc	r25, r1
     3a4:	0f 97       	sbiw	r24, 0x0f	; 15
     3a6:	ac f4       	brge	.+42     	; 0x3d2 <stepUpdateError+0x48>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			HOLDFLAG = 0;
     3a8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <HOLDFLAG>
            PAUSEFLAG = 0;
     3ac:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
            runMotor();
     3b0:	7d d4       	rcall	.+2298   	; 0xcac <runMotor>
			CurError = Parts[countSort] - CurPosition;
     3b2:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	ed 52       	subi	r30, 0x2D	; 45
     3ba:	fd 4f       	sbci	r31, 0xFD	; 253
     3bc:	80 81       	ld	r24, Z
     3be:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	82 1b       	sub	r24, r18
     3c6:	91 09       	sbc	r25, r1
     3c8:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     3cc:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     3d0:	1f c0       	rjmp	.+62     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}else
		{
			CurError = Parts[countSort-1] - CurPosition;
     3d2:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	ee 52       	subi	r30, 0x2E	; 46
     3da:	fd 4f       	sbci	r31, 0xFD	; 253
     3dc:	80 81       	ld	r24, Z
     3de:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	82 1b       	sub	r24, r18
     3e6:	91 09       	sbc	r25, r1
     3e8:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     3ec:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     3f0:	0f c0       	rjmp	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     3f2:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ed 52       	subi	r30, 0x2D	; 45
     3fa:	fd 4f       	sbci	r31, 0xFD	; 253
     3fc:	80 81       	ld	r24, Z
     3fe:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	82 1b       	sub	r24, r18
     406:	91 09       	sbc	r25, r1
     408:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     40c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	
	if(CurError>100)
     410:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     414:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     418:	85 36       	cpi	r24, 0x65	; 101
     41a:	91 05       	cpc	r25, r1
     41c:	5c f0       	brlt	.+22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		CurError = CurError - 200;
     41e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     422:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     426:	88 5c       	subi	r24, 0xC8	; 200
     428:	91 09       	sbc	r25, r1
     42a:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     42e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     432:	11 c0       	rjmp	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	}else if(CurError<-100)
     434:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     438:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     43c:	8c 39       	cpi	r24, 0x9C	; 156
     43e:	9f 4f       	sbci	r25, 0xFF	; 255
     440:	54 f4       	brge	.+20     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		CurError = CurError + 200;
     442:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     446:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     44a:	88 53       	subi	r24, 0x38	; 56
     44c:	9f 4f       	sbci	r25, 0xFF	; 255
     44e:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     452:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	if(abs(CurError) < Steps2Acc && !DROPFLAG)//change if slowing down to quickly at zone; may cause oscillation
     456:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     45a:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     45e:	33 23       	and	r19, r19
     460:	1c f4       	brge	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     462:	31 95       	neg	r19
     464:	21 95       	neg	r18
     466:	31 09       	sbc	r19, r1
     468:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	28 17       	cp	r18, r24
     470:	39 07       	cpc	r19, r25
     472:	44 f4       	brge	.+16     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     474:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <DROPFLAG>
     478:	81 11       	cpse	r24, r1
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		TARGETFLAG = 1;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <TARGETFLAG>
     482:	02 c0       	rjmp	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	}else
	{
		TARGETFLAG = 0;
     484:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
	}
	return 1;
}
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	08 95       	ret

0000048c <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     48c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     490:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     494:	89 2b       	or	r24, r25
     496:	91 f4       	brne	.+36     	; 0x4bc <stepUpdateDir+0x30>
		{// if stepper is at target
			if(CurDelay > (MAXDELAY-MINDELAY))
     498:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     49c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	97 40       	sbci	r25, 0x07	; 7
     4a4:	30 f0       	brcs	.+12     	; 0x4b2 <stepUpdateDir+0x26>
			{// if stepper can stop
				Dir = 0; //stop stepping
     4a6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				TARGETFLAG = 0; //clear target flag
     4aa:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
				return 1;	
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	08 95       	ret
			}else
			{//Decelerate stepper
				DECELFLAG = 1;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DECELFLAG>
				return 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
     4bc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4c0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4c4:	99 23       	and	r25, r25
     4c6:	1c f4       	brge	.+6      	; 0x4ce <stepUpdateDir+0x42>
     4c8:	91 95       	neg	r25
     4ca:	81 95       	neg	r24
     4cc:	91 09       	sbc	r25, r1
     4ce:	8b 35       	cpi	r24, 0x5B	; 91
     4d0:	91 05       	cpc	r25, r1
     4d2:	b4 f0       	brlt	.+44     	; 0x500 <stepUpdateDir+0x74>
     4d4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     4d8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     4dc:	81 15       	cp	r24, r1
     4de:	9a 40       	sbci	r25, 0x0A	; 10
     4e0:	78 f4       	brcc	.+30     	; 0x500 <stepUpdateDir+0x74>
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
     4e2:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <DECELFLAG>
			if(Dir != 0)
     4e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     4ea:	88 23       	and	r24, r24
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <stepUpdateDir+0x6c>
			{//Keep direction
				NextDir = Dir;
     4ee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     4f2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
				return 0;
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
			if(Dir != 0)
     4f6:	18 c0       	rjmp	.+48     	; 0x528 <stepUpdateDir+0x9c>
			{//Keep direction
				NextDir = Dir;
			}else
			{//edge case where Dir might be zero
				Dir = 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     4fe:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     500:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     504:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	12 16       	cp	r1, r18
     50c:	13 06       	cpc	r1, r19
     50e:	0c f0       	brlt	.+2      	; 0x512 <stepUpdateDir+0x86>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     516:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     51a:	93 2f       	mov	r25, r19
     51c:	99 1f       	adc	r25, r25
     51e:	99 27       	eor	r25, r25
     520:	99 1f       	adc	r25, r25
     522:	89 1b       	sub	r24, r25
     524:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		if(NextDir == Dir)
     528:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     52c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     530:	98 13       	cpse	r25, r24
     532:	06 c0       	rjmp	.+12     	; 0x540 <stepUpdateDir+0xb4>
		{//next direction is the same
			Dir = NextDir;
     534:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     538:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
		}else if(CurDelay >= MAXDELAY)
     540:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     544:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     548:	81 15       	cp	r24, r1
     54a:	9a 40       	sbci	r25, 0x0A	; 10
     54c:	30 f0       	brcs	.+12     	; 0x55a <stepUpdateDir+0xce>
		{//stepper is can change direction
			Dir = NextDir;
     54e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     552:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	08 95       	ret
		}else
		{//Decelerate stepper to switch directions
			DECELFLAG = 1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DECELFLAG>
			return 0;
     560:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 1;
}
     562:	08 95       	ret

00000564 <stepRes>:
}



void stepRes(void){
	accSteps = 0;
     564:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
	StepsDelta = 0;
     568:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <StepsDelta>
	CurDelay = MAXDELAY;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	9a e0       	ldi	r25, 0x0A	; 10
     570:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     574:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
     578:	08 95       	ret

0000057a <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
     57a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     57e:	81 11       	cpse	r24, r1
     580:	02 c0       	rjmp	.+4      	; 0x586 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
     582:	f0 df       	rcall	.-32     	; 0x564 <stepRes>
     584:	7e c0       	rjmp	.+252    	; 0x682 <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     586:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <TARGETFLAG>
     58a:	81 11       	cpse	r24, r1
     58c:	08 c0       	rjmp	.+16     	; 0x59e <stepUpdateDelay+0x24>
     58e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <DECELFLAG>
     592:	81 11       	cpse	r24, r1
     594:	04 c0       	rjmp	.+8      	; 0x59e <stepUpdateDelay+0x24>
     596:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <PAUSEFLAG>
     59a:	88 23       	and	r24, r24
     59c:	c9 f1       	breq	.+114    	; 0x610 <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
     59e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	e1 59       	subi	r30, 0x91	; 145
     5aa:	fd 4f       	sbci	r31, 0xFD	; 253
     5ac:	20 81       	ld	r18, Z
     5ae:	31 81       	ldd	r19, Z+1	; 0x01
     5b0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     5b4:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     5c0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay > MAXDELAY)
     5c4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     5c8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	9a 40       	sbci	r25, 0x0A	; 10
     5d0:	a0 f0       	brcs	.+40     	; 0x5fa <stepUpdateDelay+0x80>
		{
			accSteps = 0;
     5d2:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
			if(PAUSEFLAG && (Steps2Exit<3))
     5d6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <PAUSEFLAG>
     5da:	88 23       	and	r24, r24
     5dc:	29 f0       	breq	.+10     	; 0x5e8 <stepUpdateDelay+0x6e>
     5de:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	08 f4       	brcc	.+2      	; 0x5e8 <stepUpdateDelay+0x6e>
     5e6:	4d c0       	rjmp	.+154    	; 0x682 <stepUpdateDelay+0x108>
			{
				
				
			}else
			{
				CurDelay = MAXDELAY;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	9a e0       	ldi	r25, 0x0A	; 10
     5ec:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     5f0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
				DECELFLAG = 0;
     5f4:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <DECELFLAG>
     5f8:	44 c0       	rjmp	.+136    	; 0x682 <stepUpdateDelay+0x108>
			}		     
		}else if(accSteps>0){
     5fa:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     5fe:	88 23       	and	r24, r24
     600:	09 f4       	brne	.+2      	; 0x604 <stepUpdateDelay+0x8a>
     602:	3f c0       	rjmp	.+126    	; 0x682 <stepUpdateDelay+0x108>
			accSteps--;
     604:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
     60e:	39 c0       	rjmp	.+114    	; 0x682 <stepUpdateDelay+0x108>
		}
	
	}else if(CurDelay>MINDELAY)
     610:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     614:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	93 40       	sbci	r25, 0x03	; 3
     61c:	e0 f1       	brcs	.+120    	; 0x696 <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
     61e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     622:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     626:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	e1 59       	subi	r30, 0x91	; 145
     632:	fd 4f       	sbci	r31, 0xFD	; 253
     634:	20 81       	ld	r18, Z
     636:	31 81       	ldd	r19, Z+1	; 0x01
     638:	82 1b       	sub	r24, r18
     63a:	93 0b       	sbc	r25, r19
     63c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     640:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
     644:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     648:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	93 40       	sbci	r25, 0x03	; 3
     650:	38 f0       	brcs	.+14     	; 0x660 <stepUpdateDelay+0xe6>
     652:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     656:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	9a 40       	sbci	r25, 0x0A	; 10
     65e:	30 f0       	brcs	.+12     	; 0x66c <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     668:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		}
		if(accSteps<Steps2Acc)
     66c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     670:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     674:	98 17       	cp	r25, r24
     676:	28 f4       	brcc	.+10     	; 0x682 <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
     678:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
     682:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     686:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     68a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     68e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
     696:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     698:	08 95       	ret

0000069a <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     69a:	e1 e9       	ldi	r30, 0x91	; 145
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	88 60       	ori	r24, 0x08	; 8
     6a2:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	9f ef       	ldi	r25, 0xFF	; 255
     6a8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6ac:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     6b0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     6b4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     6b8:	e1 e7       	ldi	r30, 0x71	; 113
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	82 60       	ori	r24, 0x02	; 2
     6c0:	80 83       	st	Z, r24
     6c2:	08 95       	ret

000006c4 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     6c4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     6c8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	3a e0       	ldi	r19, 0x0A	; 10
     6d0:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6d4:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     6d8:	e1 e9       	ldi	r30, 0x91	; 145
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	83 60       	ori	r24, 0x03	; 3
     6e0:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     6e2:	88 b3       	in	r24, 0x18	; 24
     6e4:	82 60       	ori	r24, 0x02	; 2
     6e6:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     6e8:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <CurDelay+0x1>
     6ec:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <CurDelay>
     6f0:	08 95       	ret

000006f2 <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     6f2:	e1 e9       	ldi	r30, 0x91	; 145
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8d 7f       	andi	r24, 0xFD	; 253
     6fa:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     6fc:	80 81       	ld	r24, Z
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	80 83       	st	Z, r24
     702:	08 95       	ret

00000704 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     704:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <CurAcc+0x1>
     708:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	24 c0       	rjmp	.+72     	; 0x75e <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     716:	fc 01       	movw	r30, r24
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e1 59       	subi	r30, 0x91	; 145
     720:	fd 4f       	sbci	r31, 0xFD	; 253
     722:	40 81       	ld	r20, Z
     724:	51 81       	ldd	r21, Z+1	; 0x01
     726:	24 1b       	sub	r18, r20
     728:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     72a:	40 81       	ld	r20, Z
     72c:	51 81       	ldd	r21, Z+1	; 0x01
     72e:	48 5d       	subi	r20, 0xD8	; 216
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	fc 01       	movw	r30, r24
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e1 59       	subi	r30, 0x91	; 145
     73a:	fd 4f       	sbci	r31, 0xFD	; 253
     73c:	51 83       	std	Z+1, r21	; 0x01
     73e:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     740:	40 81       	ld	r20, Z
     742:	51 81       	ldd	r21, Z+1	; 0x01
     744:	41 3a       	cpi	r20, 0xA1	; 161
     746:	51 05       	cpc	r21, r1
     748:	48 f0       	brcs	.+18     	; 0x75c <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     74a:	fc 01       	movw	r30, r24
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	e1 59       	subi	r30, 0x91	; 145
     752:	fd 4f       	sbci	r31, 0xFD	; 253
     754:	40 ea       	ldi	r20, 0xA0	; 160
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	51 83       	std	Z+1, r21	; 0x01
     75a:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	91 05       	cpc	r25, r1
     762:	c8 f2       	brcs	.-78     	; 0x716 <stepCalcAcc+0x12>
		if(CurAcc[steps]>MAXACC){
			CurAcc[steps] = MAXACC;
		}
	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     764:	fc 01       	movw	r30, r24
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	e1 59       	subi	r30, 0x91	; 145
     76c:	fd 4f       	sbci	r31, 0xFD	; 253
     76e:	40 ea       	ldi	r20, 0xA0	; 160
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	51 83       	std	Z+1, r21	; 0x01
     774:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     776:	1a c0       	rjmp	.+52     	; 0x7ac <stepCalcAcc+0xa8>
		delay -=CurAcc[steps-1];
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e1 59       	subi	r30, 0x91	; 145
     782:	fd 4f       	sbci	r31, 0xFD	; 253
     784:	40 81       	ld	r20, Z
     786:	51 81       	ldd	r21, Z+1	; 0x01
     788:	24 1b       	sub	r18, r20
     78a:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     78c:	21 15       	cp	r18, r1
     78e:	43 e0       	ldi	r20, 0x03	; 3
     790:	34 07       	cpc	r19, r20
     792:	10 f4       	brcc	.+4      	; 0x798 <stepCalcAcc+0x94>
			delay = MINDELAY;
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
     798:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e1 59       	subi	r30, 0x91	; 145
     7a2:	fd 4f       	sbci	r31, 0xFD	; 253
     7a4:	40 ea       	ldi	r20, 0xA0	; 160
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	51 83       	std	Z+1, r21	; 0x01
     7aa:	40 83       	st	Z, r20
			CurAcc[steps] = MAXACC;
		}
	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7ac:	a9 01       	movw	r20, r18
     7ae:	40 5e       	subi	r20, 0xE0	; 224
     7b0:	51 40       	sbci	r21, 0x01	; 1
     7b2:	41 30       	cpi	r20, 0x01	; 1
     7b4:	53 40       	sbci	r21, 0x03	; 3
     7b6:	00 f7       	brcc	.-64     	; 0x778 <stepCalcAcc+0x74>
     7b8:	2a c0       	rjmp	.+84     	; 0x80e <stepCalcAcc+0x10a>
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     7ba:	ac 01       	movw	r20, r24
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     7c0:	fc 01       	movw	r30, r24
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	e1 59       	subi	r30, 0x91	; 145
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	60 81       	ld	r22, Z
     7cc:	71 81       	ldd	r23, Z+1	; 0x01
     7ce:	26 1b       	sub	r18, r22
     7d0:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     7d2:	60 81       	ld	r22, Z
     7d4:	71 81       	ldd	r23, Z+1	; 0x01
     7d6:	68 32       	cpi	r22, 0x28	; 40
     7d8:	71 05       	cpc	r23, r1
     7da:	48 f4       	brcc	.+18     	; 0x7ee <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     7dc:	fa 01       	movw	r30, r20
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e1 59       	subi	r30, 0x91	; 145
     7e4:	fd 4f       	sbci	r31, 0xFD	; 253
     7e6:	11 82       	std	Z+1, r1	; 0x01
     7e8:	10 82       	st	Z, r1
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     7ea:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	fc 01       	movw	r30, r24
     7f4:	e1 59       	subi	r30, 0x91	; 145
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	88 97       	sbiw	r24, 0x28	; 40
     7fe:	fa 01       	movw	r30, r20
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e1 59       	subi	r30, 0x91	; 145
     806:	fd 4f       	sbci	r31, 0xFD	; 253
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     80c:	ca 01       	movw	r24, r20
		}
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
     80e:	21 30       	cpi	r18, 0x01	; 1
     810:	43 e0       	ldi	r20, 0x03	; 3
     812:	34 07       	cpc	r19, r20
     814:	90 f6       	brcc	.-92     	; 0x7ba <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     816:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     81a:	08 95       	ret

0000081c <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     81c:	73 df       	rcall	.-282    	; 0x704 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	9a e0       	ldi	r25, 0x0A	; 10
     822:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     826:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     82a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     82e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     832:	82 e3       	ldi	r24, 0x32	; 50
     834:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Parts>

	stepStart();//Start stepTimer
     838:	45 df       	rcall	.-374    	; 0x6c4 <stepStart>
	while(CurError !=0)
     83a:	03 c0       	rjmp	.+6      	; 0x842 <stepCalibrate+0x26>
	{
		DECELFLAG = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DECELFLAG>
	HALLSENSOR = 0;//reset HALLSENSOR
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
	while(CurError !=0)
     842:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     846:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     84a:	89 2b       	or	r24, r25
     84c:	b9 f7       	brne	.-18     	; 0x83c <stepCalibrate+0x20>
	{
		DECELFLAG = 1;
	}	
	HALLSENSOR = 0;
     84e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <HALLSENSOR>
	CurPosition = 0;
     852:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	while(!HALLSENSOR){
     856:	11 c0       	rjmp	.+34     	; 0x87a <stepCalibrate+0x5e>
		if(abs(CurError)<30 && !HALLSENSOR){
     858:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     85c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     860:	99 23       	and	r25, r25
     862:	1c f4       	brge	.+6      	; 0x86a <stepCalibrate+0x4e>
     864:	91 95       	neg	r25
     866:	81 95       	neg	r24
     868:	91 09       	sbc	r25, r1
     86a:	4e 97       	sbiw	r24, 0x1e	; 30
     86c:	34 f4       	brge	.+12     	; 0x87a <stepCalibrate+0x5e>
     86e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <HALLSENSOR>
     872:	81 11       	cpse	r24, r1
     874:	02 c0       	rjmp	.+4      	; 0x87a <stepCalibrate+0x5e>
			CurPosition = 0;
     876:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	{
		DECELFLAG = 1;
	}	
	HALLSENSOR = 0;
	CurPosition = 0;
	while(!HALLSENSOR){
     87a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <HALLSENSOR>
     87e:	88 23       	and	r24, r24
     880:	59 f3       	breq	.-42     	; 0x858 <stepCalibrate+0x3c>
		if(abs(CurError)<30 && !HALLSENSOR){
			CurPosition = 0;
		}	
	}//Wait for hall sensor to trigger
	Parts[0] = B_ID;
     882:	82 e3       	ldi	r24, 0x32	; 50
     884:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Parts>

	return 1;
}
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret

0000088c <CalcExitTime>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     88c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <HOLDFLAG>
     890:	81 11       	cpse	r24, r1
     892:	bc c0       	rjmp	.+376    	; 0xa0c <CalcExitTime+0x180>
     894:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     898:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ee 52       	subi	r30, 0x2E	; 46
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
     8a2:	20 81       	ld	r18, Z
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 1b       	sub	r24, r18
     8a8:	91 09       	sbc	r25, r1
     8aa:	9c 01       	movw	r18, r24
     8ac:	22 f4       	brpl	.+8      	; 0x8b6 <CalcExitTime+0x2a>
     8ae:	22 27       	eor	r18, r18
     8b0:	33 27       	eor	r19, r19
     8b2:	28 1b       	sub	r18, r24
     8b4:	39 0b       	sbc	r19, r25
     8b6:	8f e0       	ldi	r24, 0x0F	; 15
     8b8:	82 1b       	sub	r24, r18
     8ba:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <Steps2Exit>
     8be:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     8c2:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     8c6:	89 1b       	sub	r24, r25
     8c8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     8cc:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     8d0:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     8d4:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     8d8:	42 03       	mulsu	r20, r18
     8da:	c0 01       	movw	r24, r0
     8dc:	43 9f       	mul	r20, r19
     8de:	90 0d       	add	r25, r0
     8e0:	11 24       	eor	r1, r1
     8e2:	18 16       	cp	r1, r24
     8e4:	19 06       	cpc	r1, r25
     8e6:	44 f0       	brlt	.+16     	; 0x8f8 <CalcExitTime+0x6c>
     8e8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     8ec:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     8f0:	81 15       	cp	r24, r1
     8f2:	9a 40       	sbci	r25, 0x0A	; 10
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <CalcExitTime+0x6c>
     8f6:	3f c0       	rjmp	.+126    	; 0x976 <CalcExitTime+0xea>
     8f8:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <Steps2Exit>
     8fc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     900:	98 17       	cp	r25, r24
     902:	98 f4       	brcc	.+38     	; 0x92a <CalcExitTime+0x9e>
     904:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     908:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     90c:	93 50       	subi	r25, 0x03	; 3
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2Exit>
     916:	48 9f       	mul	r20, r24
     918:	90 01       	movw	r18, r0
     91a:	49 9f       	mul	r20, r25
     91c:	30 0d       	add	r19, r0
     91e:	11 24       	eor	r1, r1
     920:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <exitTime+0x1>
     924:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <exitTime>
     928:	64 c0       	rjmp	.+200    	; 0x9f2 <CalcExitTime+0x166>
     92a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     92e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     932:	93 50       	subi	r25, 0x03	; 3
     934:	96 95       	lsr	r25
     936:	87 95       	ror	r24
     938:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     93c:	48 9f       	mul	r20, r24
     93e:	90 01       	movw	r18, r0
     940:	49 9f       	mul	r20, r25
     942:	30 0d       	add	r19, r0
     944:	11 24       	eor	r1, r1
     946:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     94a:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	84 1b       	sub	r24, r20
     952:	91 09       	sbc	r25, r1
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	86 9f       	mul	r24, r22
     95a:	a0 01       	movw	r20, r0
     95c:	87 9f       	mul	r24, r23
     95e:	50 0d       	add	r21, r0
     960:	96 9f       	mul	r25, r22
     962:	50 0d       	add	r21, r0
     964:	11 24       	eor	r1, r1
     966:	ca 01       	movw	r24, r20
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     970:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     974:	3e c0       	rjmp	.+124    	; 0x9f2 <CalcExitTime+0x166>
     976:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     97a:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	9a e0       	ldi	r25, 0x0A	; 10
     982:	82 1b       	sub	r24, r18
     984:	93 0b       	sbc	r25, r19
     986:	96 95       	lsr	r25
     988:	87 95       	ror	r24
     98a:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     98e:	48 9f       	mul	r20, r24
     990:	90 01       	movw	r18, r0
     992:	49 9f       	mul	r20, r25
     994:	30 0d       	add	r19, r0
     996:	11 24       	eor	r1, r1
     998:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Steps2Acc>
     99c:	89 2f       	mov	r24, r25
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	ac 01       	movw	r20, r24
     9a2:	56 95       	lsr	r21
     9a4:	54 2f       	mov	r21, r20
     9a6:	44 27       	eor	r20, r20
     9a8:	57 95       	ror	r21
     9aa:	47 95       	ror	r20
     9ac:	98 2f       	mov	r25, r24
     9ae:	88 27       	eor	r24, r24
     9b0:	99 0f       	add	r25, r25
     9b2:	99 0f       	add	r25, r25
     9b4:	84 1b       	sub	r24, r20
     9b6:	95 0b       	sbc	r25, r21
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <Steps2Exit>
     9c0:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     9c4:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <Steps2MIN>
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	43 1b       	sub	r20, r19
     9cc:	51 09       	sbc	r21, r1
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	24 1b       	sub	r18, r20
     9d2:	35 0b       	sbc	r19, r21
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	73 e0       	ldi	r23, 0x03	; 3
     9d8:	26 9f       	mul	r18, r22
     9da:	a0 01       	movw	r20, r0
     9dc:	27 9f       	mul	r18, r23
     9de:	50 0d       	add	r21, r0
     9e0:	36 9f       	mul	r19, r22
     9e2:	50 0d       	add	r21, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	84 0f       	add	r24, r20
     9e8:	95 1f       	adc	r25, r21
     9ea:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     9ee:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     9f2:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <exitTime>
     9f6:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <exitTime+0x1>
     9fa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
     9fe:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
     a02:	28 17       	cp	r18, r24
     a04:	39 07       	cpc	r19, r25
     a06:	20 f4       	brcc	.+8      	; 0xa10 <CalcExitTime+0x184>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	08 95       	ret
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret

00000a14 <CalcEnterTime>:
     a14:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a18:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a1c:	99 23       	and	r25, r25
     a1e:	1c f4       	brge	.+6      	; 0xa26 <CalcEnterTime+0x12>
     a20:	91 95       	neg	r25
     a22:	81 95       	neg	r24
     a24:	91 09       	sbc	r25, r1
     a26:	0f 97       	sbiw	r24, 0x0f	; 15
     a28:	0c f4       	brge	.+2      	; 0xa2c <CalcEnterTime+0x18>
     a2a:	d9 c0       	rjmp	.+434    	; 0xbde <CalcEnterTime+0x1ca>
     a2c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a30:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a34:	99 23       	and	r25, r25
     a36:	1c f4       	brge	.+6      	; 0xa3e <CalcEnterTime+0x2a>
     a38:	91 95       	neg	r25
     a3a:	81 95       	neg	r24
     a3c:	91 09       	sbc	r25, r1
     a3e:	8f 50       	subi	r24, 0x0F	; 15
     a40:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <Steps2Enter>
     a44:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     a48:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     a4c:	89 1b       	sub	r24, r25
     a4e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     a52:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     a56:	89 32       	cpi	r24, 0x29	; 41
     a58:	08 f0       	brcs	.+2      	; 0xa5c <CalcEnterTime+0x48>
     a5a:	c3 c0       	rjmp	.+390    	; 0xbe2 <CalcEnterTime+0x1ce>
     a5c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     a60:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     a64:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     a68:	42 03       	mulsu	r20, r18
     a6a:	c0 01       	movw	r24, r0
     a6c:	43 9f       	mul	r20, r19
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	18 16       	cp	r1, r24
     a74:	19 06       	cpc	r1, r25
     a76:	44 f0       	brlt	.+16     	; 0xa88 <CalcEnterTime+0x74>
     a78:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     a7c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     a80:	81 15       	cp	r24, r1
     a82:	9a 40       	sbci	r25, 0x0A	; 10
     a84:	08 f4       	brcc	.+2      	; 0xa88 <CalcEnterTime+0x74>
     a86:	4e c0       	rjmp	.+156    	; 0xb24 <CalcEnterTime+0x110>
     a88:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Steps2MIN>
     a8c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     a90:	89 17       	cp	r24, r25
     a92:	98 f4       	brcc	.+38     	; 0xaba <CalcEnterTime+0xa6>
     a94:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     a98:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     a9c:	93 50       	subi	r25, 0x03	; 3
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     aa6:	48 9f       	mul	r20, r24
     aa8:	90 01       	movw	r18, r0
     aaa:	49 9f       	mul	r20, r25
     aac:	30 0d       	add	r19, r0
     aae:	11 24       	eor	r1, r1
     ab0:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <enterTime+0x1>
     ab4:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <enterTime>
     ab8:	85 c0       	rjmp	.+266    	; 0xbc4 <CalcEnterTime+0x1b0>
     aba:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     abe:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <Steps2MIN>
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	82 1b       	sub	r24, r18
     ac6:	91 09       	sbc	r25, r1
     ac8:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     acc:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     ad0:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <enterTime>
     ad4:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <enterTime+0x1>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	33 e0       	ldi	r19, 0x03	; 3
     adc:	42 9f       	mul	r20, r18
     ade:	c0 01       	movw	r24, r0
     ae0:	43 9f       	mul	r20, r19
     ae2:	90 0d       	add	r25, r0
     ae4:	52 9f       	mul	r21, r18
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     aee:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     af2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     af6:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     afa:	93 50       	subi	r25, 0x03	; 3
     afc:	96 95       	lsr	r25
     afe:	87 95       	ror	r24
     b00:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b04:	48 9f       	mul	r20, r24
     b06:	90 01       	movw	r18, r0
     b08:	49 9f       	mul	r20, r25
     b0a:	30 0d       	add	r19, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <enterTime>
     b12:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <enterTime+0x1>
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b1e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b22:	50 c0       	rjmp	.+160    	; 0xbc4 <CalcEnterTime+0x1b0>
     b24:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     b28:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <Steps2MIN>
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	82 1b       	sub	r24, r18
     b30:	91 09       	sbc	r25, r1
     b32:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b36:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b3a:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <enterTime>
     b3e:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <enterTime+0x1>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	33 e0       	ldi	r19, 0x03	; 3
     b46:	42 9f       	mul	r20, r18
     b48:	c0 01       	movw	r24, r0
     b4a:	43 9f       	mul	r20, r19
     b4c:	90 0d       	add	r25, r0
     b4e:	52 9f       	mul	r21, r18
     b50:	90 0d       	add	r25, r0
     b52:	11 24       	eor	r1, r1
     b54:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b58:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b5c:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     b60:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	9a e0       	ldi	r25, 0x0A	; 10
     b68:	82 1b       	sub	r24, r18
     b6a:	93 0b       	sbc	r25, r19
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     b74:	48 9f       	mul	r20, r24
     b76:	90 01       	movw	r18, r0
     b78:	49 9f       	mul	r20, r25
     b7a:	30 0d       	add	r19, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <enterTime>
     b82:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <enterTime+0x1>
     b86:	82 0f       	add	r24, r18
     b88:	93 1f       	adc	r25, r19
     b8a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b8e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b92:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	9c 01       	movw	r18, r24
     b9a:	36 95       	lsr	r19
     b9c:	32 2f       	mov	r19, r18
     b9e:	22 27       	eor	r18, r18
     ba0:	37 95       	ror	r19
     ba2:	27 95       	ror	r18
     ba4:	98 2f       	mov	r25, r24
     ba6:	88 27       	eor	r24, r24
     ba8:	99 0f       	add	r25, r25
     baa:	99 0f       	add	r25, r25
     bac:	82 1b       	sub	r24, r18
     bae:	93 0b       	sbc	r25, r19
     bb0:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <enterTime>
     bb4:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <enterTime+0x1>
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     bc0:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     bc4:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <enterTime>
     bc8:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <enterTime+0x1>
     bcc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <enterdropTime>
     bd0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <enterdropTime+0x1>
     bd4:	82 17       	cp	r24, r18
     bd6:	93 07       	cpc	r25, r19
     bd8:	30 f4       	brcc	.+12     	; 0xbe6 <CalcEnterTime+0x1d2>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	08 95       	ret
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret

00000bea <brakeMotor>:
     bea:	85 b1       	in	r24, 0x05	; 5
     bec:	80 78       	andi	r24, 0x80	; 128
     bee:	85 b9       	out	0x05, r24	; 5
     bf0:	85 b1       	in	r24, 0x05	; 5
     bf2:	8f 60       	ori	r24, 0x0F	; 15
     bf4:	85 b9       	out	0x05, r24	; 5
     bf6:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <MOTORFLAG>
     bfa:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     bfe:	08 95       	ret

00000c00 <stopMotor>:
     c00:	15 b8       	out	0x05, r1	; 5
     c02:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <MOTORFLAG>
     c06:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c0a:	08 95       	ret

00000c0c <Motor_init>:
     c0c:	84 b5       	in	r24, 0x24	; 36
     c0e:	83 68       	ori	r24, 0x83	; 131
     c10:	84 bd       	out	0x24, r24	; 36
     c12:	85 b5       	in	r24, 0x25	; 37
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	85 bd       	out	0x25, r24	; 37
     c18:	85 b3       	in	r24, 0x15	; 21
     c1a:	82 60       	ori	r24, 0x02	; 2
     c1c:	85 bb       	out	0x15, r24	; 21
     c1e:	17 bc       	out	0x27, r1	; 39
     c20:	ef cf       	rjmp	.-34     	; 0xc00 <stopMotor>
     c22:	08 95       	ret

00000c24 <motorTimerStart>:
     c24:	e1 e2       	ldi	r30, 0x21	; 33
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	80 83       	st	Z, r24
     c2e:	80 ef       	ldi	r24, 0xF0	; 240
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     c36:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     c3a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     c3e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     c42:	a3 e7       	ldi	r26, 0x73	; 115
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	8c 91       	ld	r24, X
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	8c 93       	st	X, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	85 60       	ori	r24, 0x05	; 5
     c50:	80 83       	st	Z, r24
     c52:	8a b3       	in	r24, 0x1a	; 26
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	8a bb       	out	0x1a, r24	; 26
     c58:	8a ea       	ldi	r24, 0xAA	; 170
     c5a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     c5e:	08 95       	ret

00000c60 <startMotor>:
     c60:	85 b1       	in	r24, 0x05	; 5
     c62:	80 78       	andi	r24, 0x80	; 128
     c64:	85 b9       	out	0x05, r24	; 5
     c66:	85 b1       	in	r24, 0x05	; 5
     c68:	8b 60       	ori	r24, 0x0B	; 11
     c6a:	85 b9       	out	0x05, r24	; 5
     c6c:	16 bc       	out	0x26, r1	; 38
     c6e:	8c ed       	ldi	r24, 0xDC	; 220
     c70:	87 bd       	out	0x27, r24	; 39
     c72:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c76:	81 11       	cpse	r24, r1
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <startMotor+0x3e>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <MOTORFLAG>
     c80:	d1 df       	rcall	.-94     	; 0xc24 <motorTimerStart>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	94 e2       	ldi	r25, 0x24	; 36
     c86:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     c8a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     c8e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     c92:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     c96:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     c9a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     c9e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     ca2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     ca6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     caa:	08 95       	ret

00000cac <runMotor>:
     cac:	85 b1       	in	r24, 0x05	; 5
     cae:	80 78       	andi	r24, 0x80	; 128
     cb0:	85 b9       	out	0x05, r24	; 5
     cb2:	85 b1       	in	r24, 0x05	; 5
     cb4:	8b 60       	ori	r24, 0x0B	; 11
     cb6:	85 b9       	out	0x05, r24	; 5
     cb8:	16 bc       	out	0x26, r1	; 38
     cba:	8a ea       	ldi	r24, 0xAA	; 170
     cbc:	87 bd       	out	0x27, r24	; 39
     cbe:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     cc2:	81 11       	cpse	r24, r1
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <runMotor+0x32>
     cc6:	ae df       	rcall	.-164    	; 0xc24 <motorTimerStart>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <MOTORFLAG>
     cce:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     cd2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     cd6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     cda:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     cde:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     ce2:	08 95       	ret

00000ce4 <motorTimerStop>:
     ce4:	e1 e2       	ldi	r30, 0x21	; 33
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	80 81       	ld	r24, Z
     cea:	8a 7f       	andi	r24, 0xFA	; 250
     cec:	80 83       	st	Z, r24
     cee:	08 95       	ret

00000cf0 <__vector_47>:
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
     d16:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d1a:	82 50       	subi	r24, 0x02	; 2
     d1c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     d28:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     d2c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d30:	8e 36       	cpi	r24, 0x6E	; 110
     d32:	30 f4       	brcc	.+12     	; 0xd40 <__vector_47+0x50>
     d34:	8e e6       	ldi	r24, 0x6E	; 110
     d36:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     d3a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <MOTORFLAG>
     d3e:	d2 df       	rcall	.-92     	; 0xce4 <motorTimerStop>
     d40:	16 bc       	out	0x26, r1	; 38
     d42:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d46:	87 bd       	out	0x27, r24	; 39
     d48:	ff 91       	pop	r31
     d4a:	ef 91       	pop	r30
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	7f 91       	pop	r23
     d56:	6f 91       	pop	r22
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	0f 90       	pop	r0
     d62:	0b be       	out	0x3b, r0	; 59
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <ADC_Init>:
     d6e:	ec e7       	ldi	r30, 0x7C	; 124
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	80 83       	st	Z, r24
     d78:	80 81       	ld	r24, Z
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	80 83       	st	Z, r24
     d7e:	ea e7       	ldi	r30, 0x7A	; 122
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	80 83       	st	Z, r24
     d88:	80 81       	ld	r24, Z
     d8a:	88 60       	ori	r24, 0x08	; 8
     d8c:	80 83       	st	Z, r24
     d8e:	80 81       	ld	r24, Z
     d90:	83 60       	ori	r24, 0x03	; 3
     d92:	80 83       	st	Z, r24
     d94:	08 95       	ret

00000d96 <classify>:
     d96:	80 3c       	cpi	r24, 0xC0	; 192
     d98:	23 e0       	ldi	r18, 0x03	; 3
     d9a:	92 07       	cpc	r25, r18
     d9c:	38 f0       	brcs	.+14     	; 0xdac <classify+0x16>
     d9e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <countB>
     da8:	82 e3       	ldi	r24, 0x32	; 50
     daa:	08 95       	ret
     dac:	80 32       	cpi	r24, 0x20	; 32
     dae:	23 e0       	ldi	r18, 0x03	; 3
     db0:	92 07       	cpc	r25, r18
     db2:	38 f0       	brcs	.+14     	; 0xdc2 <classify+0x2c>
     db4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <countW>
     dbe:	86 e9       	ldi	r24, 0x96	; 150
     dc0:	08 95       	ret
     dc2:	8c 32       	cpi	r24, 0x2C	; 44
     dc4:	91 40       	sbci	r25, 0x01	; 1
     dc6:	38 f0       	brcs	.+14     	; 0xdd6 <classify+0x40>
     dc8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <countS>
     dd2:	88 ec       	ldi	r24, 0xC8	; 200
     dd4:	08 95       	ret
     dd6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <countA>
     de0:	84 e6       	ldi	r24, 0x64	; 100
     de2:	08 95       	ret

00000de4 <debounce>:
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	08 2e       	mov	r0, r24
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <debounce+0xc>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <debounce+0x8>
     df4:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <debounce+0x18>
     dfa:	66 0f       	add	r22, r22
     dfc:	8a 95       	dec	r24
     dfe:	ea f7       	brpl	.-6      	; 0xdfa <debounce+0x16>
     e00:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e04:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e08:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e0c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <debounce+0x4c>
     e12:	99 b1       	in	r25, 0x09	; 9
     e14:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     e18:	89 23       	and	r24, r25
     e1a:	68 13       	cpse	r22, r24
     e1c:	12 c0       	rjmp	.+36     	; 0xe42 <debounce+0x5e>
     e1e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e22:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     e2c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     e30:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e34:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e38:	84 17       	cp	r24, r20
     e3a:	95 07       	cpc	r25, r21
     e3c:	50 f3       	brcs	.-44     	; 0xe12 <debounce+0x2e>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	08 95       	ret
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret

00000e46 <debouncePINJ>:
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	08 2e       	mov	r0, r24
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <debouncePINJ+0xc>
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <debouncePINJ+0x8>
     e56:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <debouncePINJ+0x18>
     e5c:	66 0f       	add	r22, r22
     e5e:	8a 95       	dec	r24
     e60:	ea f7       	brpl	.-6      	; 0xe5c <debouncePINJ+0x16>
     e62:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e66:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e6a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e6e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e72:	10 c0       	rjmp	.+32     	; 0xe94 <debouncePINJ+0x4e>
     e74:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     e78:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     e7c:	89 23       	and	r24, r25
     e7e:	68 13       	cpse	r22, r24
     e80:	12 c0       	rjmp	.+36     	; 0xea6 <debouncePINJ+0x60>
     e82:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e86:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     e90:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     e94:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e98:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e9c:	84 17       	cp	r24, r20
     e9e:	95 07       	cpc	r25, r21
     ea0:	48 f3       	brcs	.-46     	; 0xe74 <debouncePINJ+0x2e>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	08 95       	ret

00000eaa <mTimer_init>:
     eaa:	e1 e8       	ldi	r30, 0x81	; 129
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	80 83       	st	Z, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	88 60       	ori	r24, 0x08	; 8
     eb8:	80 83       	st	Z, r24
     eba:	88 ee       	ldi	r24, 0xE8	; 232
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     ec2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     ec6:	08 95       	ret

00000ec8 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     ec8:	e1 ea       	ldi	r30, 0xA1	; 161
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     ed2:	87 e0       	ldi	r24, 0x07	; 7
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     eda:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     ede:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     ee2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     ee6:	a2 e7       	ldi	r26, 0x72	; 114
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	8c 91       	ld	r24, X
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     ef0:	80 81       	ld	r24, Z
     ef2:	85 60       	ori	r24, 0x05	; 5
     ef4:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     ef6:	89 b3       	in	r24, 0x19	; 25
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	89 bb       	out	0x19, r24	; 25
     efc:	08 95       	ret

00000efe <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     efe:	e1 ea       	ldi	r30, 0xA1	; 161
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8a 7f       	andi	r24, 0xFA	; 250
     f06:	80 83       	st	Z, r24
     f08:	08 95       	ret

00000f0a <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     f0a:	e1 ea       	ldi	r30, 0xA1	; 161
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	85 60       	ori	r24, 0x05	; 5
     f12:	80 83       	st	Z, r24
     f14:	08 95       	ret

00000f16 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     f24:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     f28:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <runTime_d+0x1>
     f32:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <runTime_d>
	
}//ISR
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	8f 93       	push	r24
	PORTC = 0xFF;
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     f54:	8f 91       	pop	r24
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	20 d9       	rcall	.-3520   	; 0x1a6 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	c1 d9       	rcall	.-3198   	; 0x2ee <LCDGotoXY>
     f6c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	5b d9       	rcall	.-3402   	; 0x22e <LCDWriteInt>
		LCDWriteString(",");
     f78:	85 e1       	ldi	r24, 0x15	; 21
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	4b d9       	rcall	.-3434   	; 0x214 <LCDWriteString>
     f7e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
		LCDWriteInt( countA, 2);
     f82:	62 e0       	ldi	r22, 0x02	; 2
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	52 d9       	rcall	.-3420   	; 0x22e <LCDWriteInt>
		LCDWriteString(",");
     f8a:	85 e1       	ldi	r24, 0x15	; 21
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	42 d9       	rcall	.-3452   	; 0x214 <LCDWriteString>
		LCDWriteInt( countW, 2);
     f90:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	49 d9       	rcall	.-3438   	; 0x22e <LCDWriteInt>
		LCDWriteString(",");
     f9c:	85 e1       	ldi	r24, 0x15	; 21
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	39 d9       	rcall	.-3470   	; 0x214 <LCDWriteString>
		LCDWriteInt(countS, 2);
     fa2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     fa6:	62 e0       	ldi	r22, 0x02	; 2
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	40 d9       	rcall	.-3456   	; 0x22e <LCDWriteInt>
		LCDWriteString("->");
     fae:	87 e1       	ldi	r24, 0x17	; 23
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	30 d9       	rcall	.-3488   	; 0x214 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     fb4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	37 d9       	rcall	.-3474   	; 0x22e <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	94 d9       	rcall	.-3288   	; 0x2ee <LCDGotoXY>
     fc6:	8a e1       	ldi	r24, 0x1A	; 26
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	24 d9       	rcall	.-3512   	; 0x214 <LCDWriteString>
     fcc:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     fd0:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
     fd4:	36 95       	lsr	r19
     fd6:	27 95       	ror	r18
     fd8:	36 95       	lsr	r19
     fda:	27 95       	ror	r18
     fdc:	36 95       	lsr	r19
     fde:	27 95       	ror	r18
     fe0:	a5 ec       	ldi	r26, 0xC5	; 197
     fe2:	b0 e2       	ldi	r27, 0x20	; 32
     fe4:	3f d4       	rcall	.+2174   	; 0x1864 <__umulhisi3>
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	92 95       	swap	r25
     fec:	82 95       	swap	r24
     fee:	8f 70       	andi	r24, 0x0F	; 15
     ff0:	89 27       	eor	r24, r25
     ff2:	9f 70       	andi	r25, 0x0F	; 15
     ff4:	89 27       	eor	r24, r25
     ff6:	1b d9       	rcall	.-3530   	; 0x22e <LCDWriteInt>
		LCDWriteString( ".");
     ff8:	8d e1       	ldi	r24, 0x1D	; 29
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0b d9       	rcall	.-3562   	; 0x214 <LCDWriteString>
     ffe:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
    1002:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <runTime_d+0x1>
    1006:	9a 01       	movw	r18, r20
    1008:	ad ec       	ldi	r26, 0xCD	; 205
    100a:	bc ec       	ldi	r27, 0xCC	; 204
    100c:	2b d4       	rcall	.+2134   	; 0x1864 <__umulhisi3>
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	9c 01       	movw	r18, r24
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	9a 01       	movw	r18, r20
    1036:	28 1b       	sub	r18, r24
    1038:	39 0b       	sbc	r19, r25
    103a:	c9 01       	movw	r24, r18
    103c:	f8 d8       	rcall	.-3600   	; 0x22e <LCDWriteInt>
    103e:	8f e1       	ldi	r24, 0x1F	; 31
		LCDWriteString("s Complete");
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	e8 c8       	rjmp	.-3632   	; 0x214 <LCDWriteString>
    1044:	08 95       	ret

00001046 <dispStatus>:
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
    104a:	ad d8       	rcall	.-3750   	; 0x1a6 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	4e d9       	rcall	.-3428   	; 0x2ee <LCDGotoXY>
    1052:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	e8 d8       	rcall	.-3632   	; 0x22e <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	45 d9       	rcall	.-3446   	; 0x2ee <LCDGotoXY>
    1064:	8a e2       	ldi	r24, 0x2A	; 42
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	d5 d8       	rcall	.-3670   	; 0x214 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	3f d9       	rcall	.-3458   	; 0x2ee <LCDGotoXY>
    1070:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	d9 d8       	rcall	.-3662   	; 0x22e <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	36 d9       	rcall	.-3476   	; 0x2ee <LCDGotoXY>
    1082:	8c e2       	ldi	r24, 0x2C	; 44
    1084:	92 e0       	ldi	r25, 0x02	; 2
    1086:	c6 d8       	rcall	.-3700   	; 0x214 <LCDWriteString>
    1088:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	30 d9       	rcall	.-3488   	; 0x2ee <LCDGotoXY>
    108e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	ca d8       	rcall	.-3692   	; 0x22e <LCDWriteInt>
    109a:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	27 d9       	rcall	.-3506   	; 0x2ee <LCDGotoXY>
    10a0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	c1 d8       	rcall	.-3710   	; 0x22e <LCDWriteInt>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
    10ae:	88 e0       	ldi	r24, 0x08	; 8
    10b0:	1e d9       	rcall	.-3524   	; 0x2ee <LCDGotoXY>
    10b2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	b8 d8       	rcall	.-3728   	; 0x22e <LCDWriteInt>
    10be:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
    10c0:	89 e0       	ldi	r24, 0x09	; 9
    10c2:	15 d9       	rcall	.-3542   	; 0x2ee <LCDGotoXY>
    10c4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	af d8       	rcall	.-3746   	; 0x22e <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	0c d9       	rcall	.-3560   	; 0x2ee <LCDGotoXY>
    10d6:	8e e2       	ldi	r24, 0x2E	; 46
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	9c d8       	rcall	.-3784   	; 0x214 <LCDWriteString>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
    10e0:	06 d9       	rcall	.-3572   	; 0x2ee <LCDGotoXY>
    10e2:	86 e3       	ldi	r24, 0x36	; 54
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	96 d8       	rcall	.-3796   	; 0x214 <LCDWriteString>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
    10ec:	00 d9       	rcall	.-3584   	; 0x2ee <LCDGotoXY>
    10ee:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
    10f2:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
    10f6:	36 95       	lsr	r19
    10f8:	27 95       	ror	r18
    10fa:	36 95       	lsr	r19
    10fc:	27 95       	ror	r18
    10fe:	ab e7       	ldi	r26, 0x7B	; 123
    1100:	b4 e1       	ldi	r27, 0x14	; 20
    1102:	b0 d3       	rcall	.+1888   	; 0x1864 <__umulhisi3>
    1104:	63 e0       	ldi	r22, 0x03	; 3
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	90 d8       	rcall	.-3808   	; 0x22e <LCDWriteInt>
	//LCDWriteStringXY(0,1,"N=" );
	//LCDWriteInt(enterTime,8);
	//LCDWriteString(" X=");
	//LCDWriteInt(exitTime,6);	

LCDWriteIntXY(0, 1, CurPosition, 3);
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	ed d8       	rcall	.-3622   	; 0x2ee <LCDGotoXY>
    1114:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
    1118:	63 e0       	ldi	r22, 0x03	; 3
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	87 d8       	rcall	.-3826   	; 0x22e <LCDWriteInt>
LCDWriteStringXY(3,1, ">");
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	e4 d8       	rcall	.-3640   	; 0x2ee <LCDGotoXY>
    1126:	88 e1       	ldi	r24, 0x18	; 24
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	74 d8       	rcall	.-3864   	; 0x214 <LCDWriteString>
    112c:	61 e0       	ldi	r22, 0x01	; 1
LCDWriteIntXY(4, 1, Parts[countSort], 3);
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	de d8       	rcall	.-3652   	; 0x2ee <LCDGotoXY>
    1132:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	ed 52       	subi	r30, 0x2D	; 45
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	80 81       	ld	r24, Z
    113e:	63 e0       	ldi	r22, 0x03	; 3
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	74 d8       	rcall	.-3864   	; 0x22e <LCDWriteInt>
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	8c e0       	ldi	r24, 0x0C	; 12
    114a:	d1 d8       	rcall	.-3678   	; 0x2ee <LCDGotoXY>
// 
// 	LCDWriteIntXY(8,1, PAUSEFLAG,1);
// 	LCDWriteInt(HOLDFLAG,1);
//  	LCDWriteInt(TARGETFLAG,1);
//  	LCDWriteInt(DECELFLAG,1);
LCDWriteIntXY(12, 1, adcDisp, 4);
    114c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcDisp>
    1150:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcDisp+0x1>
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	6a c8       	rjmp	.-3884   	; 0x22e <LCDWriteInt>
    115a:	08 95       	ret

0000115c <main>:
    115c:	e1 e6       	ldi	r30, 0x61	; 97
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	80 83       	st	Z, r24
    1164:	81 e0       	ldi	r24, 0x01	; 1


int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
    1166:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
    1168:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
    116e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
    1170:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
    1172:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
    1174:	e4 e0       	ldi	r30, 0x04	; 4
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	80 81       	ld	r24, Z
    117a:	8e 7f       	andi	r24, 0xFE	; 254
    117c:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
    117e:	e9 e6       	ldi	r30, 0x69	; 105
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	82 60       	ori	r24, 0x02	; 2
    1186:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
    1188:	80 81       	ld	r24, Z
    118a:	8c 60       	ori	r24, 0x0C	; 12
    118c:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
    118e:	80 81       	ld	r24, Z
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
    1194:	80 81       	ld	r24, Z
    1196:	80 6c       	ori	r24, 0xC0	; 192
    1198:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);//RAMPDOWN
    119a:	e8 e6       	ldi	r30, 0x68	; 104
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);
    11a4:	ec e6       	ldi	r30, 0x6C	; 108
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	82 60       	ori	r24, 0x02	; 2
    11ac:	80 83       	st	Z, r24


	ADC_Init();
    11ae:	df dd       	rcall	.-1090   	; 0xd6e <ADC_Init>
	mTimer_init();
    11b0:	7c de       	rcall	.-776    	; 0xeaa <mTimer_init>
	stepTimer_init();
    11b2:	73 da       	rcall	.-2842   	; 0x69a <stepTimer_init>
    11b4:	8d b3       	in	r24, 0x1d	; 29
	//InitLCD(LS_BLINK|LS_ULINE);
	//LCDClear();
	EIMSK |= 0x08;
    11b6:	88 60       	ori	r24, 0x08	; 8
    11b8:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
    11ba:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
    11bc:	2f db       	rcall	.-2466   	; 0x81c <stepCalibrate>
	//mTimer(2000);
	//testStep();
	//while(1);

	EIMSK |= 0x07;
    11be:	8d b3       	in	r24, 0x1d	; 29
    11c0:	87 60       	ori	r24, 0x07	; 7
    11c2:	8d bb       	out	0x1d, r24	; 29
	//EIMSK &= ~(0x08);
	Motor_init();
    11c4:	23 dd       	rcall	.-1466   	; 0xc0c <Motor_init>

	
	//MAIN OPERATION
	countPart=0;
    11c6:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <countPart>
	countSort = 0;
    11ca:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <countSort>

	startMotor();//Start Belt
    11ce:	48 dd       	rcall	.-1392   	; 0xc60 <startMotor>
	runTimerStart();//Start System Timer
    11d0:	7b de       	rcall	.-778    	; 0xec8 <runTimerStart>
    11d2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
    11d6:	88 23       	and	r24, r24
    11d8:	a9 f1       	breq	.+106    	; 0x1244 <main+0xe8>
    11da:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
    11de:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    11e2:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <refreshTime>
    11e6:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <refreshTime+0x1>
    11ea:	82 1b       	sub	r24, r18
    11ec:	93 0b       	sbc	r25, r19
    11ee:	c3 97       	sbiw	r24, 0x33	; 51
    11f0:	40 f0       	brcs	.+16     	; 0x1202 <main+0xa6>
    11f2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
			{
               //dispFLAGS();
				//dispStatus();
				refreshTime = runTime_d;	
    11f6:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    11fa:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <refreshTime+0x1>
    11fe:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <refreshTime>
    1202:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
    1206:	88 23       	and	r24, r24
    1208:	21 f3       	breq	.-56     	; 0x11d2 <main+0x76>
    120a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
		{
			if(countSort != countPart)
    120e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    1212:	98 17       	cp	r25, r24
    1214:	49 f0       	breq	.+18     	; 0x1228 <main+0xcc>
    1216:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
			{
				rampTime_d = runTime_d;	
    121a:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    121e:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    1222:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
    1226:	d5 cf       	rjmp	.-86     	; 0x11d2 <main+0x76>
    1228:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
    122c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1230:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <rampTime_d>
    1234:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <rampTime_d+0x1>
    1238:	82 1b       	sub	r24, r18
    123a:	93 0b       	sbc	r25, r19
    123c:	81 3a       	cpi	r24, 0xA1	; 161
    123e:	9f 40       	sbci	r25, 0x0F	; 15
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
    1240:	40 f2       	brcs	.-112    	; 0x11d2 <main+0x76>
    1242:	21 c0       	rjmp	.+66     	; 0x1286 <main+0x12a>
	
	while((PIND & 0x01) == 0x00);
    1244:	d2 dc       	rcall	.-1628   	; 0xbea <brakeMotor>
    1246:	48 9b       	sbis	0x09, 0	; 9
	stepStop();
    1248:	fe cf       	rjmp	.-4      	; 0x1246 <main+0xea>
    124a:	53 da       	rcall	.-2906   	; 0x6f2 <stepStop>
	runTimerStop();
    124c:	58 de       	rcall	.-848    	; 0xefe <runTimerStop>
	uint8_t INTState = EIMSK;
	EIMSK = 0x01;
    124e:	cd b3       	in	r28, 0x1d	; 29
    1250:	81 e0       	ldi	r24, 0x01	; 1
	PCMSK1 &= ~_BV(PCINT9);
    1252:	8d bb       	out	0x1d, r24	; 29
    1254:	ec e6       	ldi	r30, 0x6C	; 108
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8d 7f       	andi	r24, 0xFD	; 253
	brakeMotor();
    125c:	80 83       	st	Z, r24
    125e:	c5 dc       	rcall	.-1654   	; 0xbea <brakeMotor>
	stepRes();
    1260:	81 d9       	rcall	.-3326   	; 0x564 <stepRes>
    1262:	f1 de       	rcall	.-542    	; 0x1046 <dispStatus>
	dispStatus();
    1264:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
	while(!ENABLE)
    1268:	88 23       	and	r24, r24
	{
	}
	
	while((PIND & 0x01) == 0x00);
    126a:	e1 f3       	breq	.-8      	; 0x1264 <main+0x108>
    126c:	48 9b       	sbis	0x09, 0	; 9
	EIMSK = INTState;
    126e:	fe cf       	rjmp	.-4      	; 0x126c <main+0x110>
	PCMSK1 |= _BV(PCINT9);
    1270:	cd bb       	out	0x1d, r28	; 29
    1272:	ec e6       	ldi	r30, 0x6C	; 108
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
	runTimerResume();
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	80 83       	st	Z, r24
	stepStart();
    127c:	46 de       	rcall	.-884    	; 0xf0a <runTimerResume>
    127e:	22 da       	rcall	.-3004   	; 0x6c4 <stepStart>
	runMotor();
    1280:	15 dd       	rcall	.-1494   	; 0xcac <runMotor>
    1282:	43 de       	rcall	.-890    	; 0xf0a <runTimerResume>
	runTimerResume();
    1284:	a6 cf       	rjmp	.-180    	; 0x11d2 <main+0x76>
    1286:	f8 94       	cli
	
goto STANDBY;
    1288:	15 b8       	out	0x05, r1	; 5
	
	
	
	
SHUTDOWN:
	cli();
    128a:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
    128c:	69 de       	rcall	.-814    	; 0xf60 <dispComplete>
	PORTA = 0x00;
    128e:	ff cf       	rjmp	.-2      	; 0x128e <main+0x132>

00001290 <__vector_2>:
	
	dispComplete();
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	0b b6       	in	r0, 0x3b	; 59
    129c:	0f 92       	push	r0
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
	if(ORFLAG){
    12ba:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    12be:	88 23       	and	r24, r24
    12c0:	69 f1       	breq	.+90     	; 0x131c <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
    12c2:	4c e3       	ldi	r20, 0x3C	; 60
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	8c dd       	rcall	.-1256   	; 0xde4 <debounce>
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <__vector_2+0x42>
    12d0:	79 c0       	rjmp	.+242    	; 0x13c4 <__vector_2+0x134>
			ORFLAG  = 0; //Part has entered OR
    12d2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1);
    12d6:	8d b3       	in	r24, 0x1d	; 29
    12d8:	8d 7f       	andi	r24, 0xFD	; 253
    12da:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
    12dc:	e9 e6       	ldi	r30, 0x69	; 105
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8b 7f       	andi	r24, 0xFB	; 251
    12e4:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    12e6:	8d b3       	in	r24, 0x1d	; 29
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
    12ec:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <countADC+0x1>
    12f0:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <countADC>
			adcPart = 1023;
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    12fc:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
		
			ADCSRA |=_BV(ADSC);
    1300:	ea e7       	ldi	r30, 0x7A	; 122
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	80 83       	st	Z, r24
		
			//motorTimerStart();//slow down motor on approach
			ORTime_s = runTime_d;
    130a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    130e:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1312:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ORTime_s+0x1>
    1316:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ORTime_s>
    131a:	54 c0       	rjmp	.+168    	; 0x13c4 <__vector_2+0x134>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    131c:	4c e3       	ldi	r20, 0x3C	; 60
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	5f dd       	rcall	.-1346   	; 0xde4 <debounce>
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_2+0x9c>
    132a:	4c c0       	rjmp	.+152    	; 0x13c4 <__vector_2+0x134>
    132c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1330:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1334:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <ORTime_s>
    1338:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <ORTime_s+0x1>
    133c:	82 1b       	sub	r24, r18
    133e:	93 0b       	sbc	r25, r19
    1340:	4f 97       	sbiw	r24, 0x1f	; 31
    1342:	08 f4       	brcc	.+2      	; 0x1346 <__vector_2+0xb6>
    1344:	3f c0       	rjmp	.+126    	; 0x13c4 <__vector_2+0x134>
			ORFLAG  = 1;//Part has cleared OR	
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    134c:	8d b3       	in	r24, 0x1d	; 29
    134e:	8d 7f       	andi	r24, 0xFD	; 253
    1350:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    1352:	e9 e6       	ldi	r30, 0x69	; 105
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    135c:	8d b3       	in	r24, 0x1d	; 29
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    1362:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    1366:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    136a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcDisp+0x1>
    136e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    1372:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    1376:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    137a:	82 3f       	cpi	r24, 0xF2	; 242
    137c:	93 40       	sbci	r25, 0x03	; 3
    137e:	10 f5       	brcc	.+68     	; 0x13c4 <__vector_2+0x134>
    1380:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    1384:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    1388:	c3 97       	sbiw	r24, 0x33	; 51
    138a:	e0 f0       	brcs	.+56     	; 0x13c4 <__vector_2+0x134>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    138c:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <countPart>
    1390:	d0 e0       	ldi	r29, 0x00	; 0
    1392:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    1396:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    139a:	fd dc       	rcall	.-1542   	; 0xd96 <classify>
    139c:	cd 52       	subi	r28, 0x2D	; 45
    139e:	dd 4f       	sbci	r29, 0xFD	; 253
    13a0:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    13a2:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countPart>
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <countPart>
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ad 52       	subi	r26, 0x2D	; 45
    13b0:	bd 4f       	sbci	r27, 0xFD	; 253
    13b2:	8c 91       	ld	r24, X
    13b4:	ec 52       	subi	r30, 0x2C	; 44
    13b6:	fd 4f       	sbci	r31, 0xFD	; 253
    13b8:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    13ba:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    13c4:	8c b3       	in	r24, 0x1c	; 28
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	8c bb       	out	0x1c, r24	; 28
}//OR
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0b be       	out	0x3b, r0	; 59
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <__vector_3>:




//EX ISR //1706 with current debounce
ISR(INT2_vect){
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	0b b6       	in	r0, 0x3b	; 59
    1400:	0f 92       	push	r0
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
	
	if(!EXFLAG)
    141a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <EXFLAG>
    141e:	81 11       	cpse	r24, r1
    1420:	2e c0       	rjmp	.+92     	; 0x147e <__vector_3+0x8a>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    1422:	4c e3       	ldi	r20, 0x3C	; 60
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	dc dc       	rcall	.-1608   	; 0xde4 <debounce>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <__vector_3+0x3e>
    1430:	86 c0       	rjmp	.+268    	; 0x153e <__vector_3+0x14a>
			{
				EXFLAG =1;//Part is at EX
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1438:	8d b3       	in	r24, 0x1d	; 29
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    143e:	e9 e6       	ldi	r30, 0x69	; 105
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1448:	8d b3       	in	r24, 0x1d	; 29
    144a:	84 60       	ori	r24, 0x04	; 4
    144c:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    144e:	8c b3       	in	r24, 0x1c	; 28
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;
    1454:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <SORTFLAG>
				if(HOLDFLAG)
    1458:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <HOLDFLAG>
				{
					brakeMotor();
    145c:	81 11       	cpse	r24, r1
    145e:	c5 db       	rcall	.-2166   	; 0xbea <brakeMotor>
				}
				enterdropTime = ENTER_DROP_TIME;
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e2       	ldi	r25, 0x20	; 32
    1464:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    1468:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
				EXTime_s = runTime_d;
    146c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1470:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1474:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    1478:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
    147c:	60 c0       	rjmp	.+192    	; 0x153e <__vector_3+0x14a>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME))
    147e:	4c e3       	ldi	r20, 0x3C	; 60
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	ae dc       	rcall	.-1700   	; 0xde4 <debounce>
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <__vector_3+0x9a>
    148c:	58 c0       	rjmp	.+176    	; 0x153e <__vector_3+0x14a>
    148e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1492:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1496:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <EXTime_s>
    149a:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <EXTime_s+0x1>
    149e:	82 1b       	sub	r24, r18
    14a0:	93 0b       	sbc	r25, r19
    14a2:	4f 97       	sbiw	r24, 0x1f	; 31
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <__vector_3+0xb4>
    14a6:	4b c0       	rjmp	.+150    	; 0x153e <__vector_3+0x14a>
		{
				EXFLAG = 0;
    14a8:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <EXFLAG>
				EIMSK &= ~_BV(INT2);
    14ac:	8d b3       	in	r24, 0x1d	; 29
    14ae:	8b 7f       	andi	r24, 0xFB	; 251
    14b0:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    14b2:	e9 e6       	ldi	r30, 0x69	; 105
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8f 7e       	andi	r24, 0xEF	; 239
    14ba:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    14bc:	8d b3       	in	r24, 0x1d	; 29
    14be:	84 60       	ori	r24, 0x04	; 4
    14c0:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    14c2:	8c b3       	in	r24, 0x1c	; 28
    14c4:	84 60       	ori	r24, 0x04	; 4
    14c6:	8c bb       	out	0x1c, r24	; 28
                
				if(countSort<countPart)
    14c8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
    14cc:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    14d0:	98 17       	cp	r25, r24
    14d2:	38 f4       	brcc	.+14     	; 0x14e2 <__vector_3+0xee>
				{//if we won't overrun the array
					countSort+=1;//go to next part
    14d4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <countSort>
					TARGETFLAG =0;//New target; reset flag
    14de:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION)
    14e2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
    14e6:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
    14ea:	99 23       	and	r25, r25
    14ec:	1c f4       	brge	.+6      	; 0x14f4 <__vector_3+0x100>
    14ee:	91 95       	neg	r25
    14f0:	81 95       	neg	r24
    14f2:	91 09       	sbc	r25, r1
    14f4:	40 97       	sbiw	r24, 0x10	; 16
    14f6:	24 f0       	brlt	.+8      	; 0x1500 <__vector_3+0x10c>
				{//Current Error is for count-1 at this point
					HOLDFLAG = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <HOLDFLAG>
				}else
				{
					runMotor();
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <__vector_3+0x10e>
    1500:	d5 db       	rcall	.-2134   	; 0xcac <runMotor>
				}
				
			
                PAUSEFLAG=0;
    1502:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
				SORTFLAG = 0;
    1506:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <SORTFLAG>
				DROPFLAG = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <DROPFLAG>
				dropTime = DROP_TIME - (OCR3A - TCNT3);        
    1510:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    1514:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    1518:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    151c:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    1520:	82 1b       	sub	r24, r18
    1522:	93 0b       	sbc	r25, r19
    1524:	90 5a       	subi	r25, 0xA0	; 160
    1526:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    152a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
			EXTime_s = runTime_d;	
    152e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1532:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1536:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    153a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
		}//HI
	}	
}//EX
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0b be       	out	0x3b, r0	; 59
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	0b b6       	in	r0, 0x3b	; 59
    1570:	0f 92       	push	r0
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    158a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <step>
	stepUpdateError(); //calculate the stepper position error
    158e:	0e 94 c5 01 	call	0x38a	; 0x38a <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
    1592:	0e 94 46 02 	call	0x48c	; 0x48c <stepUpdateDir>
	stepUpdateDelay(); //update the stepper speed
    1596:	0e 94 bd 02 	call	0x57a	; 0x57a <stepUpdateDelay>

//CONTROL MOTOR
	if(DROPFLAG)
    159a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <DROPFLAG>
    159e:	88 23       	and	r24, r24
    15a0:	39 f1       	breq	.+78     	; 0x15f0 <__vector_32+0x8c>
	{
		if(dropTime<CurDelay)
    15a2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <dropTime>
    15a6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <dropTime+0x1>
    15aa:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
    15ae:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	28 f4       	brcc	.+10     	; 0x15c2 <__vector_32+0x5e>
		{
			DROPFLAG = 0;
    15b8:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <DROPFLAG>
			PAUSEFLAG = 0;
    15bc:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <__vector_32+0x8c>
		}else
		{
			dropTime -=CurDelay;
    15c2:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
    15c6:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
    15ca:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
    15ce:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
    15d2:	82 1b       	sub	r24, r18
    15d4:	93 0b       	sbc	r25, r19
    15d6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    15da:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
			if(CalcExitTime())
    15de:	56 d9       	rcall	.-3412   	; 0x88c <CalcExitTime>
    15e0:	88 23       	and	r24, r24
    15e2:	21 f0       	breq	.+8      	; 0x15ec <__vector_32+0x88>
			{
					PAUSEFLAG = 1;				
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <PAUSEFLAG>
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <__vector_32+0x8c>
			}else
			{
					PAUSEFLAG = 0;
    15ec:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
			}
		}
	}
	
	if(SORTFLAG ^ HOLDFLAG)
    15f0:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <SORTFLAG>
    15f4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <HOLDFLAG>
    15f8:	98 17       	cp	r25, r24
	{
			if(CalcEnterTime())
    15fa:	79 f0       	breq	.+30     	; 0x161a <__vector_32+0xb6>
    15fc:	0b da       	rcall	.-3050   	; 0xa14 <CalcEnterTime>
    15fe:	88 23       	and	r24, r24
			{
				brakeMotor();
    1600:	41 f0       	breq	.+16     	; 0x1612 <__vector_32+0xae>
    1602:	f3 da       	rcall	.-2586   	; 0xbea <brakeMotor>
				enterdropTime = BRAKE_DROP_TIME;
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	94 e3       	ldi	r25, 0x34	; 52
    1608:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    160c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
			}else
			{
				SORTFLAG = 0;
    1610:	0c c0       	rjmp	.+24     	; 0x162a <__vector_32+0xc6>
    1612:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <SORTFLAG>
				runMotor();
    1616:	4a db       	rcall	.-2412   	; 0xcac <runMotor>
    1618:	08 c0       	rjmp	.+16     	; 0x162a <__vector_32+0xc6>
			}
    }else if(SORTFLAG && HOLDFLAG)
    161a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <SORTFLAG>
    161e:	88 23       	and	r24, r24
    1620:	21 f0       	breq	.+8      	; 0x162a <__vector_32+0xc6>
    1622:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <HOLDFLAG>
	{
		brakeMotor();
    1626:	81 11       	cpse	r24, r1
    1628:	e0 da       	rcall	.-2624   	; 0xbea <brakeMotor>
	}
}//stepTimer
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0b be       	out	0x3b, r0	; 59
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	0f 90       	pop	r0
    164c:	1f 90       	pop	r1
    164e:	18 95       	reti

00001650 <__vector_29>:
	



//ADC ISR //runs every 140cc or 17.88 us
ISR(ADC_vect){
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	0b b6       	in	r0, 0x3b	; 59
    165c:	0f 92       	push	r0
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    166a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    1674:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	adcTemp+= (ADCH<<8);
    1678:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	98 2f       	mov	r25, r24
    1680:	88 27       	eor	r24, r24
    1682:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    1686:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    168a:	82 0f       	add	r24, r18
    168c:	93 1f       	adc	r25, r19
    168e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    1692:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	countADC+=1;
    1696:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    169a:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <countADC+0x1>
    16a4:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <countADC>
	
	if(adcTemp<adcPart){
    16a8:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    16ac:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    16b0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    16b4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	40 f4       	brcc	.+16     	; 0x16ce <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    16be:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcTemp>
    16c2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcTemp+0x1>
    16c6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    16ca:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
	}
	
	if(!ORFLAG){
    16ce:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    16d2:	81 11       	cpse	r24, r1
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    16d6:	ea e7       	ldi	r30, 0x7A	; 122
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 64       	ori	r24, 0x40	; 64
    16de:	80 83       	st	Z, r24
	}
}//ADC
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0b be       	out	0x3b, r0	; 59
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_4>:


//HE ISR
ISR(INT3_vect){
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    1720:	4c e3       	ldi	r20, 0x3C	; 60
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	5d db       	rcall	.-2374   	; 0xde4 <debounce>
    172a:	88 23       	and	r24, r24
    172c:	31 f0       	breq	.+12     	; 0x173a <__vector_4+0x40>
		//stepStop();
		CurPosition = B_ID;
    172e:	82 e3       	ldi	r24, 0x32	; 50
    1730:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <HALLSENSOR>
	}
}//HE
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	7f 91       	pop	r23
    1748:	6f 91       	pop	r22
    174a:	5f 91       	pop	r21
    174c:	4f 91       	pop	r20
    174e:	3f 91       	pop	r19
    1750:	2f 91       	pop	r18
    1752:	0f 90       	pop	r0
    1754:	0b be       	out	0x3b, r0	; 59
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    1760:	1f 92       	push	r1
    1762:	0f 92       	push	r0
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	0f 92       	push	r0
    1768:	11 24       	eor	r1, r1
    176a:	0b b6       	in	r0, 0x3b	; 59
    176c:	0f 92       	push	r0
    176e:	2f 93       	push	r18
    1770:	3f 93       	push	r19
    1772:	4f 93       	push	r20
    1774:	5f 93       	push	r21
    1776:	6f 93       	push	r22
    1778:	7f 93       	push	r23
    177a:	8f 93       	push	r24
    177c:	9f 93       	push	r25
    177e:	af 93       	push	r26
    1780:	bf 93       	push	r27
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    1786:	40 e3       	ldi	r20, 0x30	; 48
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	2a db       	rcall	.-2476   	; 0xde4 <debounce>
    1790:	88 23       	and	r24, r24
    1792:	51 f0       	breq	.+20     	; 0x17a8 <__vector_1+0x48>
		if(ENABLE)
    1794:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
    1798:	88 23       	and	r24, r24
    179a:	19 f0       	breq	.+6      	; 0x17a2 <__vector_1+0x42>
		{
			ENABLE = 0;
    179c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <ENABLE>
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <__vector_1+0x48>
		}else
		{
			ENABLE = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ENABLE>
		}
	}
}//ISR Pause Button
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0b be       	out	0x3b, r0	; 59
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <__vector_10>:

ISR(PCINT1_vect)
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	0b b6       	in	r0, 0x3b	; 59
    17da:	0f 92       	push	r0
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    17f4:	40 e3       	ldi	r20, 0x30	; 48
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	24 db       	rcall	.-2488   	; 0xe46 <debouncePINJ>
    17fe:	88 23       	and	r24, r24
    1800:	59 f0       	breq	.+22     	; 0x1818 <__vector_10+0x4a>
		RAMPDOWN = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <RAMPDOWN>
		rampTime_d = runTime_d;	
    1808:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    180c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1810:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    1814:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
	}
}//ISR Ramp Button
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0b be       	out	0x3b, r0	; 59
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <__divmodhi4>:
    183e:	97 fb       	bst	r25, 7
    1840:	07 2e       	mov	r0, r23
    1842:	16 f4       	brtc	.+4      	; 0x1848 <__divmodhi4+0xa>
    1844:	00 94       	com	r0
    1846:	06 d0       	rcall	.+12     	; 0x1854 <__divmodhi4_neg1>
    1848:	77 fd       	sbrc	r23, 7
    184a:	08 d0       	rcall	.+16     	; 0x185c <__divmodhi4_neg2>
    184c:	1a d0       	rcall	.+52     	; 0x1882 <__udivmodhi4>
    184e:	07 fc       	sbrc	r0, 7
    1850:	05 d0       	rcall	.+10     	; 0x185c <__divmodhi4_neg2>
    1852:	3e f4       	brtc	.+14     	; 0x1862 <__divmodhi4_exit>

00001854 <__divmodhi4_neg1>:
    1854:	90 95       	com	r25
    1856:	81 95       	neg	r24
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__divmodhi4_neg2>:
    185c:	70 95       	com	r23
    185e:	61 95       	neg	r22
    1860:	7f 4f       	sbci	r23, 0xFF	; 255

00001862 <__divmodhi4_exit>:
    1862:	08 95       	ret

00001864 <__umulhisi3>:
    1864:	a2 9f       	mul	r26, r18
    1866:	b0 01       	movw	r22, r0
    1868:	b3 9f       	mul	r27, r19
    186a:	c0 01       	movw	r24, r0
    186c:	a3 9f       	mul	r26, r19
    186e:	70 0d       	add	r23, r0
    1870:	81 1d       	adc	r24, r1
    1872:	11 24       	eor	r1, r1
    1874:	91 1d       	adc	r25, r1
    1876:	b2 9f       	mul	r27, r18
    1878:	70 0d       	add	r23, r0
    187a:	81 1d       	adc	r24, r1
    187c:	11 24       	eor	r1, r1
    187e:	91 1d       	adc	r25, r1
    1880:	08 95       	ret

00001882 <__udivmodhi4>:
    1882:	aa 1b       	sub	r26, r26
    1884:	bb 1b       	sub	r27, r27
    1886:	51 e1       	ldi	r21, 0x11	; 17
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <__udivmodhi4_ep>

0000188a <__udivmodhi4_loop>:
    188a:	aa 1f       	adc	r26, r26
    188c:	bb 1f       	adc	r27, r27
    188e:	a6 17       	cp	r26, r22
    1890:	b7 07       	cpc	r27, r23
    1892:	10 f0       	brcs	.+4      	; 0x1898 <__udivmodhi4_ep>
    1894:	a6 1b       	sub	r26, r22
    1896:	b7 0b       	sbc	r27, r23

00001898 <__udivmodhi4_ep>:
    1898:	88 1f       	adc	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	5a 95       	dec	r21
    189e:	a9 f7       	brne	.-22     	; 0x188a <__udivmodhi4_loop>
    18a0:	80 95       	com	r24
    18a2:	90 95       	com	r25
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	08 95       	ret

000018aa <_exit>:
    18aa:	f8 94       	cli

000018ac <__stop_program>:
    18ac:	ff cf       	rjmp	.-2      	; 0x18ac <__stop_program>
