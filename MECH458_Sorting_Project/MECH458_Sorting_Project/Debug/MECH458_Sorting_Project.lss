
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  00001744  000017d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  0080023e  0080023e  00001816  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002901  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161a  00000000  00000000  000054eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00006b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aaa  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00007b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_1>
       8:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_2>
       c:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_3>
      10:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_32>
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9d c6       	rjmp	.+3386   	; 0xde4 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7e c5       	rjmp	.+2812   	; 0xbba <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e4       	ldi	r30, 0x44	; 68
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 33       	cpi	r26, 0x3E	; 62
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	ae e3       	ldi	r26, 0x3E	; 62
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 33       	cpi	r26, 0x34	; 52
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	85 d7       	rcall	.+3850   	; 0x102a <main>
     120:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_exit>

00000124 <__bad_interrupt>:
     124:	76 c6       	rjmp	.+3308   	; 0xe12 <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__divmodhi4>
     2e2:	e1 e0       	ldi	r30, 0x01	; 1
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	80 83       	st	Z, r24
	val=val/10;
     2f0:	86 2f       	mov	r24, r22
     2f2:	97 2f       	mov	r25, r23
	i--;
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	79 f7       	brne	.-34     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fc:	bf ef       	ldi	r27, 0xFF	; 255
     2fe:	eb 16       	cp	r14, r27
     300:	fb 06       	cpc	r15, r27
     302:	81 f4       	brne	.+32     	; 0x324 <LCDWriteInt+0x76>
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     306:	0f 5f       	subi	r16, 0xFF	; 255
     308:	1f 4f       	sbci	r17, 0xFF	; 255
     30a:	02 c0       	rjmp	.+4      	; 0x310 <LCDWriteInt+0x62>
     30c:	00 e0       	ldi	r16, 0x00	; 0
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	e1 e0       	ldi	r30, 0x01	; 1
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	ec 0f       	add	r30, r28
     316:	fd 1f       	adc	r31, r29
     318:	e0 0f       	add	r30, r16
     31a:	f1 1f       	adc	r31, r17
     31c:	20 81       	ld	r18, Z
     31e:	22 23       	and	r18, r18
     320:	91 f3       	breq	.-28     	; 0x306 <LCDWriteInt+0x58>
     322:	04 c0       	rjmp	.+8      	; 0x32c <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     324:	05 e0       	ldi	r16, 0x05	; 5
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	0e 19       	sub	r16, r14
     32a:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32c:	99 23       	and	r25, r25
     32e:	84 f4       	brge	.+32     	; 0x350 <LCDWriteInt+0xa2>
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	8d e2       	ldi	r24, 0x2D	; 45
     334:	37 df       	rcall	.-402    	; 0x1a4 <LCDByte>
     336:	0c c0       	rjmp	.+24     	; 0x350 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	e0 0f       	add	r30, r16
     342:	f1 1f       	adc	r31, r17
     344:	80 81       	ld	r24, Z
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	80 5d       	subi	r24, 0xD0	; 208
     34a:	2c df       	rcall	.-424    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34c:	0f 5f       	subi	r16, 0xFF	; 255
     34e:	1f 4f       	sbci	r17, 0xFF	; 255
     350:	05 30       	cpi	r16, 0x05	; 5
     352:	11 05       	cpc	r17, r1
     354:	8c f3       	brlt	.-30     	; 0x338 <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36e:	88 32       	cpi	r24, 0x28	; 40
     370:	28 f4       	brcc	.+10     	; 0x37c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     372:	61 11       	cpse	r22, r1
     374:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	14 cf       	rjmp	.-472    	; 0x1a4 <LCDByte>
     37c:	08 95       	ret

0000037e <step>:
extern volatile char TARGETFLAG;
extern volatile char SLIPFLAG;


uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     37e:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <__data_end>
     382:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     386:	89 0f       	add	r24, r25
     388:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     38c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     390:	84 30       	cpi	r24, 0x04	; 4
     392:	1c f0       	brlt	.+6      	; 0x39a <step+0x1c>
     394:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     39a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     39e:	88 23       	and	r24, r24
     3a0:	1c f4       	brge	.+6      	; 0x3a8 <step+0x2a>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     3a8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__data_end>
     3ac:	0e 2e       	mov	r0, r30
     3ae:	00 0c       	add	r0, r0
     3b0:	ff 0b       	sbc	r31, r31
     3b2:	e0 50       	subi	r30, 0x00	; 0
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	80 81       	ld	r24, Z
     3b8:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     3ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3be:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     3c2:	89 0f       	add	r24, r25
     3c4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 200 && Dir==1){CurPosition -=  200;}
     3c8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3cc:	89 3c       	cpi	r24, 0xC9	; 201
     3ce:	50 f0       	brcs	.+20     	; 0x3e4 <step+0x66>
     3d0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <step+0x66>
     3d8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3dc:	88 5c       	subi	r24, 0xC8	; 200
     3de:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <step+0x80>
	else if(CurPosition < 50 && Dir==-1){CurPosition += 200;}
     3e4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3e8:	82 33       	cpi	r24, 0x32	; 50
     3ea:	48 f4       	brcc	.+18     	; 0x3fe <step+0x80>
     3ec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3f0:	8f 3f       	cpi	r24, 0xFF	; 255
     3f2:	29 f4       	brne	.+10     	; 0x3fe <step+0x80>
     3f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3f8:	88 53       	subi	r24, 0x38	; 56
     3fa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     3fe:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     402:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	08 95       	ret

0000040a <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(SLIPFLAG)
     40a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <SLIPFLAG>
     40e:	88 23       	and	r24, r24
     410:	61 f1       	breq	.+88     	; 0x46a <stepUpdateError+0x60>
	{
		CurError = Parts[countSort-1] - CurPosition;
     412:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <countSort>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e1 53       	subi	r30, 0x31	; 49
     41a:	fd 4f       	sbci	r31, 0xFD	; 253
     41c:	80 81       	ld	r24, Z
     41e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	82 1b       	sub	r24, r18
     426:	91 09       	sbc	r25, r1
     428:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <CurError+0x1>
     42c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <CurError>
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
     430:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     434:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     438:	99 23       	and	r25, r25
     43a:	1c f4       	brge	.+6      	; 0x442 <stepUpdateError+0x38>
     43c:	91 95       	neg	r25
     43e:	81 95       	neg	r24
     440:	91 09       	sbc	r25, r1
     442:	0f 97       	sbiw	r24, 0x0f	; 15
     444:	0c f5       	brge	.+66     	; 0x488 <stepUpdateError+0x7e>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			SLIPFLAG = 0;
     446:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <SLIPFLAG>
			CurError = Parts[countSort] - CurPosition;
     44a:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <countSort>
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	e0 53       	subi	r30, 0x30	; 48
     452:	fd 4f       	sbci	r31, 0xFD	; 253
     454:	80 81       	ld	r24, Z
     456:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	82 1b       	sub	r24, r18
     45e:	91 09       	sbc	r25, r1
     460:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <CurError+0x1>
     464:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <CurError>
     468:	0f c0       	rjmp	.+30     	; 0x488 <stepUpdateError+0x7e>
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     46a:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <countSort>
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	e0 53       	subi	r30, 0x30	; 48
     472:	fd 4f       	sbci	r31, 0xFD	; 253
     474:	80 81       	ld	r24, Z
     476:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	82 1b       	sub	r24, r18
     47e:	91 09       	sbc	r25, r1
     480:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <CurError+0x1>
     484:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <CurError>
	}
	
	
	if(CurError>100)
     488:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     48c:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     490:	85 36       	cpi	r24, 0x65	; 101
     492:	91 05       	cpc	r25, r1
     494:	5c f0       	brlt	.+22     	; 0x4ac <stepUpdateError+0xa2>
	{
		CurError = CurError - 200;
     496:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     49a:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     49e:	88 5c       	subi	r24, 0xC8	; 200
     4a0:	91 09       	sbc	r25, r1
     4a2:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <CurError+0x1>
     4a6:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <CurError>
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <stepUpdateError+0xc4>
	}else if(CurError<-100)
     4ac:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     4b0:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     4b4:	8c 39       	cpi	r24, 0x9C	; 156
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	54 f4       	brge	.+20     	; 0x4ce <stepUpdateError+0xc4>
	{
		CurError = CurError + 200;
     4ba:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     4be:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     4c2:	88 53       	subi	r24, 0x38	; 56
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <CurError+0x1>
     4ca:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <CurError>
	}
	
	if(abs(CurError) < Steps2Acc)//change if slowing down to quickly at zone; may cause oscillation
     4ce:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <CurError>
     4d2:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <CurError+0x1>
     4d6:	33 23       	and	r19, r19
     4d8:	1c f4       	brge	.+6      	; 0x4e0 <stepUpdateError+0xd6>
     4da:	31 95       	neg	r19
     4dc:	21 95       	neg	r18
     4de:	31 09       	sbc	r19, r1
     4e0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	28 17       	cp	r18, r24
     4e8:	39 07       	cpc	r19, r25
     4ea:	24 f4       	brge	.+8      	; 0x4f4 <stepUpdateError+0xea>
	{
		TARGETFLAG = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <TARGETFLAG>
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <stepUpdateError+0xee>
	}else
	{
		TARGETFLAG = 0;
     4f4:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <TARGETFLAG>
	}
	return 1;
}
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	08 95       	ret

000004fc <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     4fc:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     500:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     504:	89 2b       	or	r24, r25
     506:	91 f4       	brne	.+36     	; 0x52c <stepUpdateDir+0x30>
		{// if stepper is at target
			if(CurDelay > (MAXDELAY-MINDELAY))
     508:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     50c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	97 40       	sbci	r25, 0x07	; 7
     514:	30 f0       	brcs	.+12     	; 0x522 <stepUpdateDir+0x26>
			{// if stepper can stop
				Dir = 0; //stop stepping
     516:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				TARGETFLAG = 0; //clear target flag
     51a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <TARGETFLAG>
				return 1;	
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret
			}else
			{//Decelerate stepper
				DECELFLAG = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <DECELFLAG>
				return 0;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
     52c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     530:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     534:	99 23       	and	r25, r25
     536:	1c f4       	brge	.+6      	; 0x53e <stepUpdateDir+0x42>
     538:	91 95       	neg	r25
     53a:	81 95       	neg	r24
     53c:	91 09       	sbc	r25, r1
     53e:	8b 35       	cpi	r24, 0x5B	; 91
     540:	91 05       	cpc	r25, r1
     542:	b4 f0       	brlt	.+44     	; 0x570 <stepUpdateDir+0x74>
     544:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     548:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     54c:	81 15       	cp	r24, r1
     54e:	9a 40       	sbci	r25, 0x0A	; 10
     550:	78 f4       	brcc	.+30     	; 0x570 <stepUpdateDir+0x74>
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
     552:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <DECELFLAG>
			if(Dir != 0)
     556:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     55a:	88 23       	and	r24, r24
     55c:	29 f0       	breq	.+10     	; 0x568 <stepUpdateDir+0x6c>
			{//Keep direction
				NextDir = Dir;
     55e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     562:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
				return 0;
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
			if(Dir != 0)
     566:	18 c0       	rjmp	.+48     	; 0x598 <stepUpdateDir+0x9c>
			{//Keep direction
				NextDir = Dir;
			}else
			{//edge case where Dir might be zero
				Dir = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     56e:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     570:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <CurError>
     574:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <CurError+0x1>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	12 16       	cp	r1, r18
     57c:	13 06       	cpc	r1, r19
     57e:	0c f0       	brlt	.+2      	; 0x582 <stepUpdateDir+0x86>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <CurError>
     586:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <CurError+0x1>
     58a:	93 2f       	mov	r25, r19
     58c:	99 1f       	adc	r25, r25
     58e:	99 27       	eor	r25, r25
     590:	99 1f       	adc	r25, r25
     592:	89 1b       	sub	r24, r25
     594:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		
		if(CurDelay >= MAXDELAY)
     598:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     59c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     5a0:	81 15       	cp	r24, r1
     5a2:	9a 40       	sbci	r25, 0x0A	; 10
     5a4:	30 f0       	brcs	.+12     	; 0x5b2 <stepUpdateDir+0xb6>
		{//stepper is can change direction
			Dir = NextDir;
     5a6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5aa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret
		}else if(NextDir == Dir)
     5b2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     5b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5ba:	98 13       	cpse	r25, r24
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <stepUpdateDir+0xce>
		{//next direction is the same
			Dir = NextDir;
     5be:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5c2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	08 95       	ret
		}else
		{//Decelerate stepper to switch directions
			DECELFLAG = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <DECELFLAG>
			return 0;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 1;
}
     5d2:	08 95       	ret

000005d4 <stepRes>:
}



void stepRes(void){
	accSteps = 0;
     5d4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <accSteps>
	StepsDelta = 0;
     5d8:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <StepsDelta>
	CurDelay = MAXDELAY;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	9a e0       	ldi	r25, 0x0A	; 10
     5e0:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     5e4:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
     5e8:	08 95       	ret

000005ea <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
     5ea:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5ee:	81 11       	cpse	r24, r1
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
     5f2:	f0 df       	rcall	.-32     	; 0x5d4 <stepRes>
     5f4:	7e c0       	rjmp	.+252    	; 0x6f2 <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     5f6:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <TARGETFLAG>
     5fa:	81 11       	cpse	r24, r1
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <stepUpdateDelay+0x24>
     5fe:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <DECELFLAG>
     602:	81 11       	cpse	r24, r1
     604:	04 c0       	rjmp	.+8      	; 0x60e <stepUpdateDelay+0x24>
     606:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <PAUSEFLAG>
     60a:	88 23       	and	r24, r24
     60c:	c9 f1       	breq	.+114    	; 0x680 <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
     60e:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <accSteps>
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e4 59       	subi	r30, 0x94	; 148
     61a:	fd 4f       	sbci	r31, 0xFD	; 253
     61c:	20 81       	ld	r18, Z
     61e:	31 81       	ldd	r19, Z+1	; 0x01
     620:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     624:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     630:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
		if (CurDelay > MAXDELAY)
     634:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     638:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	9a 40       	sbci	r25, 0x0A	; 10
     640:	a0 f0       	brcs	.+40     	; 0x66a <stepUpdateDelay+0x80>
		{
			CurDelay = MAXDELAY;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	9a e0       	ldi	r25, 0x0A	; 10
     646:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     64a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
			accSteps = 0;
     64e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <accSteps>
			DECELFLAG = 0;
     652:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <DECELFLAG>
            if(PAUSEFLAG && (DROP_REGION-abs(CurError))<5)
     656:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <PAUSEFLAG>
     65a:	88 23       	and	r24, r24
     65c:	09 f4       	brne	.+2      	; 0x660 <stepUpdateDelay+0x76>
     65e:	49 c0       	rjmp	.+146    	; 0x6f2 <stepUpdateDelay+0x108>
     660:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     664:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     668:	44 c0       	rjmp	.+136    	; 0x6f2 <stepUpdateDelay+0x108>
            {
              //  CurDelay = 2*MAXDELAY;
              //  brakeMotor();
              //  while(1);
            }                
		}else if(accSteps>0){
     66a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <accSteps>
     66e:	88 23       	and	r24, r24
     670:	09 f4       	brne	.+2      	; 0x674 <stepUpdateDelay+0x8a>
     672:	3f c0       	rjmp	.+126    	; 0x6f2 <stepUpdateDelay+0x108>
			accSteps--;
     674:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <accSteps>
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <accSteps>
     67e:	39 c0       	rjmp	.+114    	; 0x6f2 <stepUpdateDelay+0x108>
		}
	}else if(CurDelay>MINDELAY)
     680:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     684:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	93 40       	sbci	r25, 0x03	; 3
     68c:	e0 f1       	brcs	.+120    	; 0x706 <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
     68e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     692:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     696:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <accSteps>
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	e4 59       	subi	r30, 0x94	; 148
     6a2:	fd 4f       	sbci	r31, 0xFD	; 253
     6a4:	20 81       	ld	r18, Z
     6a6:	31 81       	ldd	r19, Z+1	; 0x01
     6a8:	82 1b       	sub	r24, r18
     6aa:	93 0b       	sbc	r25, r19
     6ac:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     6b0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
     6b4:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     6b8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	93 40       	sbci	r25, 0x03	; 3
     6c0:	38 f0       	brcs	.+14     	; 0x6d0 <stepUpdateDelay+0xe6>
     6c2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     6c6:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	9a 40       	sbci	r25, 0x0A	; 10
     6ce:	30 f0       	brcs	.+12     	; 0x6dc <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     6d8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
		}
		if(accSteps<Steps2Acc)
     6dc:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <accSteps>
     6e0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     6e4:	98 17       	cp	r25, r24
     6e6:	28 f4       	brcc	.+10     	; 0x6f2 <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
     6e8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <accSteps>
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
     6f2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     6f6:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     6fa:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6fe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
     706:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     708:	08 95       	ret

0000070a <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     70a:	e1 e9       	ldi	r30, 0x91	; 145
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	88 60       	ori	r24, 0x08	; 8
     712:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	9f ef       	ldi	r25, 0xFF	; 255
     718:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     71c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     720:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     724:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     728:	e1 e7       	ldi	r30, 0x71	; 113
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	80 83       	st	Z, r24
     732:	08 95       	ret

00000734 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     734:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     738:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	3a e0       	ldi	r19, 0x0A	; 10
     740:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     744:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     748:	e1 e9       	ldi	r30, 0x91	; 145
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	83 60       	ori	r24, 0x03	; 3
     750:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     752:	88 b3       	in	r24, 0x18	; 24
     754:	82 60       	ori	r24, 0x02	; 2
     756:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     758:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <CurDelay+0x1>
     75c:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <CurDelay>
     760:	08 95       	ret

00000762 <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     762:	e1 e9       	ldi	r30, 0x91	; 145
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8d 7f       	andi	r24, 0xFD	; 253
     76a:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     76c:	80 81       	ld	r24, Z
     76e:	8e 7f       	andi	r24, 0xFE	; 254
     770:	80 83       	st	Z, r24
     772:	08 95       	ret

00000774 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     774:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <CurAcc+0x1>
     778:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	24 c0       	rjmp	.+72     	; 0x7ce <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     786:	fc 01       	movw	r30, r24
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e4 59       	subi	r30, 0x94	; 148
     790:	fd 4f       	sbci	r31, 0xFD	; 253
     792:	40 81       	ld	r20, Z
     794:	51 81       	ldd	r21, Z+1	; 0x01
     796:	24 1b       	sub	r18, r20
     798:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     79a:	40 81       	ld	r20, Z
     79c:	51 81       	ldd	r21, Z+1	; 0x01
     79e:	4c 5c       	subi	r20, 0xCC	; 204
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	fc 01       	movw	r30, r24
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	e4 59       	subi	r30, 0x94	; 148
     7aa:	fd 4f       	sbci	r31, 0xFD	; 253
     7ac:	51 83       	std	Z+1, r21	; 0x01
     7ae:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     7b0:	40 81       	ld	r20, Z
     7b2:	51 81       	ldd	r21, Z+1	; 0x01
     7b4:	41 3d       	cpi	r20, 0xD1	; 209
     7b6:	51 05       	cpc	r21, r1
     7b8:	48 f0       	brcs	.+18     	; 0x7cc <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     7ba:	fc 01       	movw	r30, r24
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	e4 59       	subi	r30, 0x94	; 148
     7c2:	fd 4f       	sbci	r31, 0xFD	; 253
     7c4:	40 ed       	ldi	r20, 0xD0	; 208
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	51 83       	std	Z+1, r21	; 0x01
     7ca:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	91 05       	cpc	r25, r1
     7d2:	c8 f2       	brcs	.-78     	; 0x786 <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     7d4:	fc 01       	movw	r30, r24
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	e4 59       	subi	r30, 0x94	; 148
     7dc:	fd 4f       	sbci	r31, 0xFD	; 253
     7de:	40 ed       	ldi	r20, 0xD0	; 208
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	51 83       	std	Z+1, r21	; 0x01
     7e4:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7e6:	1a c0       	rjmp	.+52     	; 0x81c <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	e4 59       	subi	r30, 0x94	; 148
     7f2:	fd 4f       	sbci	r31, 0xFD	; 253
     7f4:	40 81       	ld	r20, Z
     7f6:	51 81       	ldd	r21, Z+1	; 0x01
     7f8:	24 1b       	sub	r18, r20
     7fa:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     7fc:	21 15       	cp	r18, r1
     7fe:	43 e0       	ldi	r20, 0x03	; 3
     800:	34 07       	cpc	r19, r20
     802:	10 f4       	brcc	.+4      	; 0x808 <stepCalcAcc+0x94>
			delay = MINDELAY;
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
     808:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     80a:	fc 01       	movw	r30, r24
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e4 59       	subi	r30, 0x94	; 148
     812:	fd 4f       	sbci	r31, 0xFD	; 253
     814:	40 ed       	ldi	r20, 0xD0	; 208
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	51 83       	std	Z+1, r21	; 0x01
     81a:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     81c:	a9 01       	movw	r20, r18
     81e:	40 57       	subi	r20, 0x70	; 112
     820:	52 40       	sbci	r21, 0x02	; 2
     822:	41 30       	cpi	r20, 0x01	; 1
     824:	53 40       	sbci	r21, 0x03	; 3
     826:	00 f7       	brcc	.-64     	; 0x7e8 <stepCalcAcc+0x74>
     828:	2a c0       	rjmp	.+84     	; 0x87e <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     82a:	ac 01       	movw	r20, r24
     82c:	4f 5f       	subi	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     830:	fc 01       	movw	r30, r24
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e4 59       	subi	r30, 0x94	; 148
     838:	fd 4f       	sbci	r31, 0xFD	; 253
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	26 1b       	sub	r18, r22
     840:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     842:	60 81       	ld	r22, Z
     844:	71 81       	ldd	r23, Z+1	; 0x01
     846:	64 33       	cpi	r22, 0x34	; 52
     848:	71 05       	cpc	r23, r1
     84a:	48 f4       	brcc	.+18     	; 0x85e <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     84c:	fa 01       	movw	r30, r20
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	e4 59       	subi	r30, 0x94	; 148
     854:	fd 4f       	sbci	r31, 0xFD	; 253
     856:	11 82       	std	Z+1, r1	; 0x01
     858:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     85a:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     85c:	14 c0       	rjmp	.+40     	; 0x886 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	fc 01       	movw	r30, r24
     864:	e4 59       	subi	r30, 0x94	; 148
     866:	fd 4f       	sbci	r31, 0xFD	; 253
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	c4 97       	sbiw	r24, 0x34	; 52
     86e:	fa 01       	movw	r30, r20
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	e4 59       	subi	r30, 0x94	; 148
     876:	fd 4f       	sbci	r31, 0xFD	; 253
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     87c:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     87e:	21 30       	cpi	r18, 0x01	; 1
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	34 07       	cpc	r19, r20
     884:	90 f6       	brcc	.-92     	; 0x82a <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     886:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     88a:	08 95       	ret

0000088c <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     88c:	73 df       	rcall	.-282    	; 0x774 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	9a e0       	ldi	r25, 0x0A	; 10
     892:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurDelay+0x1>
     896:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     89a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     89e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     8a2:	82 e3       	ldi	r24, 0x32	; 50
     8a4:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <Parts>

	stepStart();//Start stepTimer
     8a8:	45 df       	rcall	.-374    	; 0x734 <stepStart>
		
	while(!HALLSENSOR){
     8aa:	11 c0       	rjmp	.+34     	; 0x8ce <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     8ac:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     8b0:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     8b4:	99 23       	and	r25, r25
     8b6:	1c f4       	brge	.+6      	; 0x8be <stepCalibrate+0x32>
     8b8:	91 95       	neg	r25
     8ba:	81 95       	neg	r24
     8bc:	91 09       	sbc	r25, r1
     8be:	44 97       	sbiw	r24, 0x14	; 20
     8c0:	34 f4       	brge	.+12     	; 0x8ce <stepCalibrate+0x42>
     8c2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HALLSENSOR>
     8c6:	81 11       	cpse	r24, r1
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <stepCalibrate+0x42>
			CurPosition = 0;
     8ca:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     8ce:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HALLSENSOR>
     8d2:	88 23       	and	r24, r24
     8d4:	59 f3       	breq	.-42     	; 0x8ac <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     8d6:	82 e3       	ldi	r24, 0x32	; 50
     8d8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <CalcExitTime>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     8e0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     8e4:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <countSort>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	e1 53       	subi	r30, 0x31	; 49
     8ec:	fd 4f       	sbci	r31, 0xFD	; 253
     8ee:	20 81       	ld	r18, Z
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	82 1b       	sub	r24, r18
     8f4:	91 09       	sbc	r25, r1
     8f6:	9c 01       	movw	r18, r24
     8f8:	22 f4       	brpl	.+8      	; 0x902 <CalcExitTime+0x22>
     8fa:	22 27       	eor	r18, r18
     8fc:	33 27       	eor	r19, r19
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	8f e0       	ldi	r24, 0x0F	; 15
     904:	82 1b       	sub	r24, r18
     906:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <Steps2DR>
     90a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     90e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <accSteps>
     912:	89 1b       	sub	r24, r25
     914:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <Steps2MIN>
     918:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     91c:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <CurError>
     920:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <CurError+0x1>
     924:	42 03       	mulsu	r20, r18
     926:	c0 01       	movw	r24, r0
     928:	43 9f       	mul	r20, r19
     92a:	90 0d       	add	r25, r0
     92c:	11 24       	eor	r1, r1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	0c f0       	brlt	.+2      	; 0x936 <CalcExitTime+0x56>
     934:	3f c0       	rjmp	.+126    	; 0x9b4 <CalcExitTime+0xd4>
     936:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <Steps2DR>
     93a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     93e:	98 17       	cp	r25, r24
     940:	98 f4       	brcc	.+38     	; 0x968 <CalcExitTime+0x88>
     942:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     946:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     94a:	93 50       	subi	r25, 0x03	; 3
     94c:	96 95       	lsr	r25
     94e:	87 95       	ror	r24
     950:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <Steps2DR>
     954:	48 9f       	mul	r20, r24
     956:	90 01       	movw	r18, r0
     958:	49 9f       	mul	r20, r25
     95a:	30 0d       	add	r19, r0
     95c:	11 24       	eor	r1, r1
     95e:	30 93 4f 02 	sts	0x024F, r19	; 0x80024f <exitTime+0x1>
     962:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <exitTime>
     966:	64 c0       	rjmp	.+200    	; 0xa30 <CalcExitTime+0x150>
     968:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     96c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     970:	93 50       	subi	r25, 0x03	; 3
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <Steps2MIN>
     97a:	48 9f       	mul	r20, r24
     97c:	90 01       	movw	r18, r0
     97e:	49 9f       	mul	r20, r25
     980:	30 0d       	add	r19, r0
     982:	11 24       	eor	r1, r1
     984:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <Steps2DR>
     988:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	84 1b       	sub	r24, r20
     990:	91 09       	sbc	r25, r1
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	73 e0       	ldi	r23, 0x03	; 3
     996:	86 9f       	mul	r24, r22
     998:	a0 01       	movw	r20, r0
     99a:	87 9f       	mul	r24, r23
     99c:	50 0d       	add	r21, r0
     99e:	96 9f       	mul	r25, r22
     9a0:	50 0d       	add	r21, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	ca 01       	movw	r24, r20
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <exitTime+0x1>
     9ae:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <exitTime>
     9b2:	3e c0       	rjmp	.+124    	; 0xa30 <CalcExitTime+0x150>
     9b4:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurDelay>
     9b8:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurDelay+0x1>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	9a e0       	ldi	r25, 0x0A	; 10
     9c0:	82 1b       	sub	r24, r18
     9c2:	93 0b       	sbc	r25, r19
     9c4:	96 95       	lsr	r25
     9c6:	87 95       	ror	r24
     9c8:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <Steps2MIN>
     9cc:	48 9f       	mul	r20, r24
     9ce:	90 01       	movw	r18, r0
     9d0:	49 9f       	mul	r20, r25
     9d2:	30 0d       	add	r19, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Steps2Acc>
     9da:	89 2f       	mov	r24, r25
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	ac 01       	movw	r20, r24
     9e0:	56 95       	lsr	r21
     9e2:	54 2f       	mov	r21, r20
     9e4:	44 27       	eor	r20, r20
     9e6:	57 95       	ror	r21
     9e8:	47 95       	ror	r20
     9ea:	98 2f       	mov	r25, r24
     9ec:	88 27       	eor	r24, r24
     9ee:	99 0f       	add	r25, r25
     9f0:	99 0f       	add	r25, r25
     9f2:	84 1b       	sub	r24, r20
     9f4:	95 0b       	sbc	r25, r21
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <Steps2DR>
     9fe:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     a02:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <Steps2MIN>
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	43 1b       	sub	r20, r19
     a0a:	51 09       	sbc	r21, r1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	24 1b       	sub	r18, r20
     a10:	35 0b       	sbc	r19, r21
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	73 e0       	ldi	r23, 0x03	; 3
     a16:	26 9f       	mul	r18, r22
     a18:	a0 01       	movw	r20, r0
     a1a:	27 9f       	mul	r18, r23
     a1c:	50 0d       	add	r21, r0
     a1e:	36 9f       	mul	r19, r22
     a20:	50 0d       	add	r21, r0
     a22:	11 24       	eor	r1, r1
     a24:	84 0f       	add	r24, r20
     a26:	95 1f       	adc	r25, r21
     a28:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <exitTime+0x1>
     a2c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <exitTime>
     a30:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <exitTime>
     a34:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <exitTime+0x1>
     a38:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dropTime>
     a3c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dropTime+0x1>
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	10 f4       	brcc	.+4      	; 0xa4a <CalcExitTime+0x16a>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

00000a4e <CalcEnterTime>:
     a4e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
     a52:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
     a56:	93 50       	subi	r25, 0x03	; 3
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     a60:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <accSteps>
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	24 1b       	sub	r18, r20
     a68:	31 09       	sbc	r19, r1
     a6a:	28 9f       	mul	r18, r24
     a6c:	a0 01       	movw	r20, r0
     a6e:	29 9f       	mul	r18, r25
     a70:	50 0d       	add	r21, r0
     a72:	38 9f       	mul	r19, r24
     a74:	50 0d       	add	r21, r0
     a76:	11 24       	eor	r1, r1
     a78:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <CurError>
     a7c:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <CurError+0x1>
     a80:	99 23       	and	r25, r25
     a82:	1c f4       	brge	.+6      	; 0xa8a <CalcEnterTime+0x3c>
     a84:	91 95       	neg	r25
     a86:	81 95       	neg	r24
     a88:	91 09       	sbc	r25, r1
     a8a:	0f 97       	sbiw	r24, 0x0f	; 15
     a8c:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
     a90:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <accSteps>
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	26 1b       	sub	r18, r22
     a98:	31 09       	sbc	r19, r1
     a9a:	82 1b       	sub	r24, r18
     a9c:	93 0b       	sbc	r25, r19
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	73 e0       	ldi	r23, 0x03	; 3
     aa2:	86 9f       	mul	r24, r22
     aa4:	90 01       	movw	r18, r0
     aa6:	87 9f       	mul	r24, r23
     aa8:	30 0d       	add	r19, r0
     aaa:	96 9f       	mul	r25, r22
     aac:	30 0d       	add	r19, r0
     aae:	11 24       	eor	r1, r1
     ab0:	c9 01       	movw	r24, r18
     ab2:	84 0f       	add	r24, r20
     ab4:	95 1f       	adc	r25, r21
     ab6:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <enterTime+0x1>
     aba:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <enterTime>
     abe:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <enterTime>
     ac2:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <enterTime+0x1>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	90 45       	sbci	r25, 0x50	; 80
     aca:	10 f0       	brcs	.+4      	; 0xad0 <CalcEnterTime+0x82>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	08 95       	ret
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret

00000ad4 <startMotor>:
     ad4:	85 b1       	in	r24, 0x05	; 5
     ad6:	80 78       	andi	r24, 0x80	; 128
     ad8:	85 b9       	out	0x05, r24	; 5
     ada:	85 b1       	in	r24, 0x05	; 5
     adc:	8b 60       	ori	r24, 0x0B	; 11
     ade:	85 b9       	out	0x05, r24	; 5
     ae0:	16 bc       	out	0x26, r1	; 38
     ae2:	88 ec       	ldi	r24, 0xC8	; 200
     ae4:	87 bd       	out	0x27, r24	; 39
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <MOTORFLAG>
     aec:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
     af0:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
     af4:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <motorTime_d+0x1>
     af8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <motorTime_d>
     afc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     b00:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     b04:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <MOTORFLAG>
     b08:	08 95       	ret

00000b0a <runMotor>:
     b0a:	85 b1       	in	r24, 0x05	; 5
     b0c:	80 78       	andi	r24, 0x80	; 128
     b0e:	85 b9       	out	0x05, r24	; 5
     b10:	85 b1       	in	r24, 0x05	; 5
     b12:	8b 60       	ori	r24, 0x0B	; 11
     b14:	85 b9       	out	0x05, r24	; 5
     b16:	16 bc       	out	0x26, r1	; 38
     b18:	86 e9       	ldi	r24, 0x96	; 150
     b1a:	87 bd       	out	0x27, r24	; 39
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <MOTORFLAG>
     b22:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
     b26:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
     b2a:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <motorTime_d+0x1>
     b2e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <motorTime_d>
     b32:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <MOTORFLAG>
     b36:	08 95       	ret

00000b38 <brakeMotor>:
     b38:	85 b1       	in	r24, 0x05	; 5
     b3a:	80 78       	andi	r24, 0x80	; 128
     b3c:	85 b9       	out	0x05, r24	; 5
     b3e:	85 b1       	in	r24, 0x05	; 5
     b40:	8f 60       	ori	r24, 0x0F	; 15
     b42:	85 b9       	out	0x05, r24	; 5
     b44:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <MOTORFLAG>
     b48:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <MOTORFLAG>
     b4c:	08 95       	ret

00000b4e <stopMotor>:
     b4e:	15 b8       	out	0x05, r1	; 5
     b50:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <MOTORFLAG>
     b54:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <MOTORFLAG>
     b58:	08 95       	ret

00000b5a <Motor_init>:
     b5a:	84 b5       	in	r24, 0x24	; 36
     b5c:	83 68       	ori	r24, 0x83	; 131
     b5e:	84 bd       	out	0x24, r24	; 36
     b60:	85 b5       	in	r24, 0x25	; 37
     b62:	82 60       	ori	r24, 0x02	; 2
     b64:	85 bd       	out	0x25, r24	; 37
     b66:	85 b3       	in	r24, 0x15	; 21
     b68:	82 60       	ori	r24, 0x02	; 2
     b6a:	85 bb       	out	0x15, r24	; 21
     b6c:	17 bc       	out	0x27, r1	; 39
     b6e:	ef cf       	rjmp	.-34     	; 0xb4e <stopMotor>
     b70:	08 95       	ret

00000b72 <motorTimerStart>:
     b72:	e1 e2       	ldi	r30, 0x21	; 33
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	80 83       	st	Z, r24
     b7c:	80 e8       	ldi	r24, 0x80	; 128
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     b84:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     b88:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     b8c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     b90:	a3 e7       	ldi	r26, 0x73	; 115
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	8c 91       	ld	r24, X
     b96:	82 60       	ori	r24, 0x02	; 2
     b98:	8c 93       	st	X, r24
     b9a:	80 81       	ld	r24, Z
     b9c:	85 60       	ori	r24, 0x05	; 5
     b9e:	80 83       	st	Z, r24
     ba0:	8a b3       	in	r24, 0x1a	; 26
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	8a bb       	out	0x1a, r24	; 26
     ba6:	86 e9       	ldi	r24, 0x96	; 150
     ba8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     bac:	08 95       	ret

00000bae <motorTimerStop>:
     bae:	e1 e2       	ldi	r30, 0x21	; 33
     bb0:	f1 e0       	ldi	r31, 0x01	; 1
     bb2:	80 81       	ld	r24, Z
     bb4:	8a 7f       	andi	r24, 0xFA	; 250
     bb6:	80 83       	st	Z, r24
     bb8:	08 95       	ret

00000bba <__vector_47>:
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	0b b6       	in	r0, 0x3b	; 59
     bc6:	0f 92       	push	r0
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	ef 93       	push	r30
     bde:	ff 93       	push	r31
     be0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     be4:	81 50       	subi	r24, 0x01	; 1
     be6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     bf2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     bf6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     bfa:	86 39       	cpi	r24, 0x96	; 150
     bfc:	20 f4       	brcc	.+8      	; 0xc06 <__vector_47+0x4c>
     bfe:	86 e9       	ldi	r24, 0x96	; 150
     c00:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motorDecSpeed>
     c04:	d4 df       	rcall	.-88     	; 0xbae <motorTimerStop>
     c06:	16 bc       	out	0x26, r1	; 38
     c08:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <motorDecSpeed>
     c0c:	87 bd       	out	0x27, r24	; 39
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <ADC_Init>:
     c34:	ec e7       	ldi	r30, 0x7C	; 124
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	80 83       	st	Z, r24
     c3e:	80 81       	ld	r24, Z
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 83       	st	Z, r24
     c44:	ea e7       	ldi	r30, 0x7A	; 122
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 68       	ori	r24, 0x80	; 128
     c4c:	80 83       	st	Z, r24
     c4e:	80 81       	ld	r24, Z
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	80 83       	st	Z, r24
     c54:	80 81       	ld	r24, Z
     c56:	83 60       	ori	r24, 0x03	; 3
     c58:	80 83       	st	Z, r24
     c5a:	08 95       	ret

00000c5c <classify>:
     c5c:	8b 3a       	cpi	r24, 0xAB	; 171
     c5e:	23 e0       	ldi	r18, 0x03	; 3
     c60:	92 07       	cpc	r25, r18
     c62:	38 f0       	brcs	.+14     	; 0xc72 <classify+0x16>
     c64:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countB>
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <countB>
     c6e:	82 e3       	ldi	r24, 0x32	; 50
     c70:	08 95       	ret
     c72:	80 32       	cpi	r24, 0x20	; 32
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	92 07       	cpc	r25, r18
     c78:	38 f0       	brcs	.+14     	; 0xc88 <classify+0x2c>
     c7a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <countW>
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <countW>
     c84:	86 e9       	ldi	r24, 0x96	; 150
     c86:	08 95       	ret
     c88:	84 36       	cpi	r24, 0x64	; 100
     c8a:	91 05       	cpc	r25, r1
     c8c:	38 f0       	brcs	.+14     	; 0xc9c <classify+0x40>
     c8e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countS>
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <countS>
     c98:	88 ec       	ldi	r24, 0xC8	; 200
     c9a:	08 95       	ret
     c9c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countA>
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <countA>
     ca6:	84 e6       	ldi	r24, 0x64	; 100
     ca8:	08 95       	ret

00000caa <debounce>:
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	08 2e       	mov	r0, r24
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <debounce+0xc>
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <debounce+0x8>
     cba:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <mask>
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <debounce+0x18>
     cc0:	66 0f       	add	r22, r22
     cc2:	8a 95       	dec	r24
     cc4:	ea f7       	brpl	.-6      	; 0xcc0 <debounce+0x16>
     cc6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <countCheck+0x1>
     cca:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <countCheck>
     cce:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <countCheck+0x1>
     cd2:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <countCheck>
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <debounce+0x4c>
     cd8:	99 b1       	in	r25, 0x09	; 9
     cda:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <mask>
     cde:	89 23       	and	r24, r25
     ce0:	68 13       	cpse	r22, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <debounce+0x62>
     ce4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <countCheck>
     ce8:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <countCheck+0x1>
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <countCheck+0x1>
     cf2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <countCheck>
     cf6:	84 2f       	mov	r24, r20
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <countCheck>
     cfe:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <countCheck+0x1>
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	40 f3       	brcs	.-48     	; 0xcd8 <debounce+0x2e>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret

00000d10 <debouncePINJ>:
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	08 2e       	mov	r0, r24
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <debouncePINJ+0xc>
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <debouncePINJ+0x8>
     d20:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <mask>
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <debouncePINJ+0x18>
     d26:	66 0f       	add	r22, r22
     d28:	8a 95       	dec	r24
     d2a:	ea f7       	brpl	.-6      	; 0xd26 <debouncePINJ+0x16>
     d2c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <countCheck+0x1>
     d30:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <countCheck>
     d34:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <countCheck+0x1>
     d38:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <countCheck>
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <debouncePINJ+0x4e>
     d3e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     d42:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <mask>
     d46:	89 23       	and	r24, r25
     d48:	68 13       	cpse	r22, r24
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <debouncePINJ+0x64>
     d4c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <countCheck>
     d50:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <countCheck+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <countCheck+0x1>
     d5a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <countCheck>
     d5e:	84 2f       	mov	r24, r20
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <countCheck>
     d66:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <countCheck+0x1>
     d6a:	28 17       	cp	r18, r24
     d6c:	39 07       	cpc	r19, r25
     d6e:	38 f3       	brcs	.-50     	; 0xd3e <debouncePINJ+0x2e>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	08 95       	ret
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	08 95       	ret

00000d78 <mTimer_init>:
     d78:	e1 e8       	ldi	r30, 0x81	; 129
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	82 60       	ori	r24, 0x02	; 2
     d80:	80 83       	st	Z, r24
     d82:	80 81       	ld	r24, Z
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	80 83       	st	Z, r24
     d88:	88 ee       	ldi	r24, 0xE8	; 232
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     d90:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     d94:	08 95       	ret

00000d96 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     d96:	e1 ea       	ldi	r30, 0xA1	; 161
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	88 60       	ori	r24, 0x08	; 8
     d9e:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     da0:	87 e0       	ldi	r24, 0x07	; 7
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     da8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     dac:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     db0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     db4:	a2 e7       	ldi	r26, 0x72	; 114
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	8c 91       	ld	r24, X
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     dbe:	80 81       	ld	r24, Z
     dc0:	85 60       	ori	r24, 0x05	; 5
     dc2:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     dc4:	89 b3       	in	r24, 0x19	; 25
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	89 bb       	out	0x19, r24	; 25
     dca:	08 95       	ret

00000dcc <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     dcc:	e1 ea       	ldi	r30, 0xA1	; 161
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8a 7f       	andi	r24, 0xFA	; 250
     dd4:	80 83       	st	Z, r24
     dd6:	08 95       	ret

00000dd8 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     dd8:	e1 ea       	ldi	r30, 0xA1	; 161
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	85 60       	ori	r24, 0x05	; 5
     de0:	80 83       	st	Z, r24
     de2:	08 95       	ret

00000de4 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     df2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
     df6:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <runTime_d+0x1>
     e00:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <runTime_d>
	
}//ISR
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	8f 93       	push	r24
	PORTC = 0xFF;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     e22:	8f 91       	pop	r24
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	b8 d9       	rcall	.-3216   	; 0x1a4 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	9a da       	rcall	.-2764   	; 0x36e <LCDGotoXY>
     e3a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countB>
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	34 da       	rcall	.-2968   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     e46:	83 e1       	ldi	r24, 0x13	; 19
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	24 da       	rcall	.-3000   	; 0x294 <LCDWriteString>
     e4c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countA>
		LCDWriteInt( countA, 2);
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2b da       	rcall	.-2986   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     e58:	83 e1       	ldi	r24, 0x13	; 19
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	1b da       	rcall	.-3018   	; 0x294 <LCDWriteString>
		LCDWriteInt( countW, 2);
     e5e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <countW>
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	22 da       	rcall	.-3004   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     e6a:	83 e1       	ldi	r24, 0x13	; 19
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	12 da       	rcall	.-3036   	; 0x294 <LCDWriteString>
		LCDWriteInt(countS, 2);
     e70:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countS>
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	19 da       	rcall	.-3022   	; 0x2ae <LCDWriteInt>
		LCDWriteString("->");
     e7c:	85 e1       	ldi	r24, 0x15	; 21
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	09 da       	rcall	.-3054   	; 0x294 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     e82:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <countSort>
     e86:	62 e0       	ldi	r22, 0x02	; 2
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	10 da       	rcall	.-3040   	; 0x2ae <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	6d da       	rcall	.-2854   	; 0x36e <LCDGotoXY>
     e94:	88 e1       	ldi	r24, 0x18	; 24
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	fd d9       	rcall	.-3078   	; 0x294 <LCDWriteString>
     e9a:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     e9e:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <runTime_d+0x1>
     ea2:	36 95       	lsr	r19
     ea4:	27 95       	ror	r18
     ea6:	36 95       	lsr	r19
     ea8:	27 95       	ror	r18
     eaa:	36 95       	lsr	r19
     eac:	27 95       	ror	r18
     eae:	a5 ec       	ldi	r26, 0xC5	; 197
     eb0:	b0 e2       	ldi	r27, 0x20	; 32
     eb2:	23 d4       	rcall	.+2118   	; 0x16fa <__umulhisi3>
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	92 95       	swap	r25
     eba:	82 95       	swap	r24
     ebc:	8f 70       	andi	r24, 0x0F	; 15
     ebe:	89 27       	eor	r24, r25
     ec0:	9f 70       	andi	r25, 0x0F	; 15
     ec2:	89 27       	eor	r24, r25
     ec4:	f4 d9       	rcall	.-3096   	; 0x2ae <LCDWriteInt>
		LCDWriteString( ".");
     ec6:	8b e1       	ldi	r24, 0x1B	; 27
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	e4 d9       	rcall	.-3128   	; 0x294 <LCDWriteString>
     ecc:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
     ed0:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <runTime_d+0x1>
     ed4:	9a 01       	movw	r18, r20
     ed6:	ad ec       	ldi	r26, 0xCD	; 205
     ed8:	bc ec       	ldi	r27, 0xCC	; 204
     eda:	0f d4       	rcall	.+2078   	; 0x16fa <__umulhisi3>
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	9c 01       	movw	r18, r24
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	9a 01       	movw	r18, r20
     f04:	28 1b       	sub	r18, r24
     f06:	39 0b       	sbc	r19, r25
     f08:	c9 01       	movw	r24, r18
     f0a:	d1 d9       	rcall	.-3166   	; 0x2ae <LCDWriteInt>
     f0c:	8d e1       	ldi	r24, 0x1D	; 29
		LCDWriteString("s Complete");
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	c1 c9       	rjmp	.-3198   	; 0x294 <LCDWriteString>
     f12:	08 95       	ret

00000f14 <dispStatus>:
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
     f18:	45 d9       	rcall	.-3446   	; 0x1a4 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	27 da       	rcall	.-2994   	; 0x36e <LCDGotoXY>
     f20:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <countSort>
     f24:	62 e0       	ldi	r22, 0x02	; 2
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	c1 d9       	rcall	.-3198   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	1e da       	rcall	.-3012   	; 0x36e <LCDGotoXY>
     f32:	88 e2       	ldi	r24, 0x28	; 40
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	ae d9       	rcall	.-3236   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	18 da       	rcall	.-3024   	; 0x36e <LCDGotoXY>
     f3e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countPart>
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	b2 d9       	rcall	.-3228   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	0f da       	rcall	.-3042   	; 0x36e <LCDGotoXY>
     f50:	8a e2       	ldi	r24, 0x2A	; 42
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	9f d9       	rcall	.-3266   	; 0x294 <LCDWriteString>
     f56:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	09 da       	rcall	.-3054   	; 0x36e <LCDGotoXY>
     f5c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countB>
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a3 d9       	rcall	.-3258   	; 0x2ae <LCDWriteInt>
     f68:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
     f6a:	87 e0       	ldi	r24, 0x07	; 7
     f6c:	00 da       	rcall	.-3072   	; 0x36e <LCDGotoXY>
     f6e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <countA>
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9a d9       	rcall	.-3276   	; 0x2ae <LCDWriteInt>
     f7a:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
     f7c:	88 e0       	ldi	r24, 0x08	; 8
     f7e:	f7 d9       	rcall	.-3090   	; 0x36e <LCDGotoXY>
     f80:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <countW>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	91 d9       	rcall	.-3294   	; 0x2ae <LCDWriteInt>
     f8c:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
     f8e:	89 e0       	ldi	r24, 0x09	; 9
     f90:	ee d9       	rcall	.-3108   	; 0x36e <LCDGotoXY>
     f92:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <countS>
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	88 d9       	rcall	.-3312   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	8a e0       	ldi	r24, 0x0A	; 10
     fa2:	e5 d9       	rcall	.-3126   	; 0x36e <LCDGotoXY>
     fa4:	8c e2       	ldi	r24, 0x2C	; 44
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	75 d9       	rcall	.-3350   	; 0x294 <LCDWriteString>
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
     fae:	df d9       	rcall	.-3138   	; 0x36e <LCDGotoXY>
     fb0:	84 e3       	ldi	r24, 0x34	; 52
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	6f d9       	rcall	.-3362   	; 0x294 <LCDWriteString>
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
     fba:	d9 d9       	rcall	.-3150   	; 0x36e <LCDGotoXY>
     fbc:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <runTime_d>
     fc0:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <runTime_d+0x1>
     fc4:	36 95       	lsr	r19
     fc6:	27 95       	ror	r18
     fc8:	36 95       	lsr	r19
     fca:	27 95       	ror	r18
     fcc:	ab e7       	ldi	r26, 0x7B	; 123
     fce:	b4 e1       	ldi	r27, 0x14	; 20
     fd0:	94 d3       	rcall	.+1832   	; 0x16fa <__umulhisi3>
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	69 d9       	rcall	.-3374   	; 0x2ae <LCDWriteInt>
	//LCDWriteStringXY(0,1,"N=" );
	//LCDWriteInt(enterTime,8);
	//LCDWriteString(" X=");
	//LCDWriteInt(exitTime,6);	

LCDWriteIntXY(0, 1, CurPosition, 3);
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	c6 d9       	rcall	.-3188   	; 0x36e <LCDGotoXY>
     fe2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     fe6:	63 e0       	ldi	r22, 0x03	; 3
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	60 d9       	rcall	.-3392   	; 0x2ae <LCDWriteInt>
LCDWriteStringXY(3,1, ">");
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	bd d9       	rcall	.-3206   	; 0x36e <LCDGotoXY>
     ff4:	86 e1       	ldi	r24, 0x16	; 22
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	4d d9       	rcall	.-3430   	; 0x294 <LCDWriteString>
     ffa:	61 e0       	ldi	r22, 0x01	; 1
LCDWriteIntXY(4, 1, Parts[countSort], 3);
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	b7 d9       	rcall	.-3218   	; 0x36e <LCDGotoXY>
    1000:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <countSort>
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	e0 53       	subi	r30, 0x30	; 48
    1008:	fd 4f       	sbci	r31, 0xFD	; 253
    100a:	80 81       	ld	r24, Z
    100c:	63 e0       	ldi	r22, 0x03	; 3
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	4d d9       	rcall	.-3430   	; 0x2ae <LCDWriteInt>
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	8c e0       	ldi	r24, 0x0C	; 12
    1018:	aa d9       	rcall	.-3244   	; 0x36e <LCDGotoXY>
// 
// 	LCDWriteIntXY(8,1, PAUSEFLAG,1);
// 	LCDWriteInt(SLIPFLAG,1);
//  	LCDWriteInt(TARGETFLAG,1);
//  	LCDWriteInt(DECELFLAG,1);
LCDWriteIntXY(12, 1, adcDisp, 4);
    101a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcDisp>
    101e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcDisp+0x1>
    1022:	64 e0       	ldi	r22, 0x04	; 4
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	43 c9       	rjmp	.-3450   	; 0x2ae <LCDWriteInt>
    1028:	08 95       	ret

0000102a <main>:
    102a:	e1 e6       	ldi	r30, 0x61	; 97
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	80 83       	st	Z, r24
    1032:	81 e0       	ldi	r24, 0x01	; 1
extern volatile uint16_t CurDelay;

int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
    1034:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
    1036:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
    103c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
    103e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
    1040:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
    1042:	e4 e0       	ldi	r30, 0x04	; 4
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	80 81       	ld	r24, Z
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
    104c:	e9 e6       	ldi	r30, 0x69	; 105
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
    1056:	80 81       	ld	r24, Z
    1058:	8c 60       	ori	r24, 0x0C	; 12
    105a:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
    105c:	80 81       	ld	r24, Z
    105e:	80 62       	ori	r24, 0x20	; 32
    1060:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
    1062:	80 81       	ld	r24, Z
    1064:	80 6c       	ori	r24, 0xC0	; 192
    1066:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);//RAMPDOWN
    1068:	e8 e6       	ldi	r30, 0x68	; 104
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);
    1072:	ec e6       	ldi	r30, 0x6C	; 108
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	80 83       	st	Z, r24


	ADC_Init();
    107c:	db dd       	rcall	.-1098   	; 0xc34 <ADC_Init>
	mTimer_init();
    107e:	7c de       	rcall	.-776    	; 0xd78 <mTimer_init>
	stepTimer_init();
    1080:	44 db       	rcall	.-2424   	; 0x70a <stepTimer_init>
	InitLCD(LS_BLINK|LS_ULINE);
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	c6 d8       	rcall	.-3700   	; 0x212 <InitLCD>
	LCDClear();
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	8c d8       	rcall	.-3816   	; 0x1a4 <LCDByte>
	EIMSK |= 0x08;
    108c:	8d b3       	in	r24, 0x1d	; 29
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
    1092:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
    1094:	fb db       	rcall	.-2058   	; 0x88c <stepCalibrate>
    1096:	8d b3       	in	r24, 0x1d	; 29
	//mTimer(2000);
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
    1098:	87 60       	ori	r24, 0x07	; 7
    109a:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
    109c:	8d b3       	in	r24, 0x1d	; 29
    109e:	87 7f       	andi	r24, 0xF7	; 247
	Motor_init();
    10a0:	8d bb       	out	0x1d, r24	; 29
	//sei();
	
	//MAIN OPERATION
	countPart=0;
    10a2:	5b dd       	rcall	.-1354   	; 0xb5a <Motor_init>
    10a4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <countPart>
	countSort = 0;
    10a8:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <countSort>

	startMotor();//Start Belt
    10ac:	13 dd       	rcall	.-1498   	; 0xad4 <startMotor>
	runTimerStart();//Start System Timer
    10ae:	73 de       	rcall	.-794    	; 0xd96 <runTimerStart>
    10b0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
    10b4:	88 23       	and	r24, r24
    10b6:	b1 f1       	breq	.+108    	; 0x1124 <main+0xfa>
    10b8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
    10bc:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    10c0:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <refreshTime>
    10c4:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <refreshTime+0x1>
    10c8:	82 1b       	sub	r24, r18
    10ca:	93 0b       	sbc	r25, r19
    10cc:	c3 97       	sbiw	r24, 0x33	; 51
    10ce:	48 f0       	brcs	.+18     	; 0x10e2 <main+0xb8>
			{
               //dispFLAGS();
				dispStatus();
    10d0:	21 df       	rcall	.-446    	; 0xf14 <dispStatus>
    10d2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
				refreshTime = runTime_d;	
    10d6:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    10da:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <refreshTime+0x1>
    10de:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <refreshTime>
    10e2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
    10e6:	88 23       	and	r24, r24
    10e8:	19 f3       	breq	.-58     	; 0x10b0 <main+0x86>
    10ea:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <countSort>
		{
			if(countSort != countPart)
    10ee:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countPart>
    10f2:	98 17       	cp	r25, r24
    10f4:	49 f0       	breq	.+18     	; 0x1108 <main+0xde>
    10f6:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
			{
				rampTime_d = runTime_d;	
    10fa:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    10fe:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <rampTime_d+0x1>
    1102:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <rampTime_d>
    1106:	d4 cf       	rjmp	.-88     	; 0x10b0 <main+0x86>
    1108:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
    110c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    1110:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <rampTime_d>
    1114:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <rampTime_d+0x1>
    1118:	82 1b       	sub	r24, r18
    111a:	93 0b       	sbc	r25, r19
    111c:	81 3a       	cpi	r24, 0xA1	; 161
    111e:	9f 40       	sbci	r25, 0x0F	; 15
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
    1120:	38 f2       	brcs	.-114    	; 0x10b0 <main+0x86>
    1122:	20 c0       	rjmp	.+64     	; 0x1164 <main+0x13a>
	
	while((PIND & 0x01) == 0x00);
    1124:	09 dd       	rcall	.-1518   	; 0xb38 <brakeMotor>
	stepStop();
    1126:	48 9b       	sbis	0x09, 0	; 9
	runTimerStop();
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <main+0xfc>
    112a:	1b db       	rcall	.-2506   	; 0x762 <stepStop>
	uint8_t INTState = EIMSK;
    112c:	4f de       	rcall	.-866    	; 0xdcc <runTimerStop>
	EIMSK = 0x01;
    112e:	cd b3       	in	r28, 0x1d	; 29
    1130:	81 e0       	ldi	r24, 0x01	; 1
	PCMSK1 &= ~_BV(PCINT9);
    1132:	8d bb       	out	0x1d, r24	; 29
    1134:	ec e6       	ldi	r30, 0x6C	; 108
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8d 7f       	andi	r24, 0xFD	; 253
	brakeMotor();
    113c:	80 83       	st	Z, r24
	//stopMotor();
	stepRes();
    113e:	fc dc       	rcall	.-1544   	; 0xb38 <brakeMotor>
	//dispStatus();
	while(!ENABLE)
    1140:	49 da       	rcall	.-2926   	; 0x5d4 <stepRes>
    1142:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
	{
	}
	
	while((PIND & 0x01) == 0x00);
    1146:	88 23       	and	r24, r24
	EIMSK = INTState;
    1148:	e1 f3       	breq	.-8      	; 0x1142 <main+0x118>
	PCMSK1 |= _BV(PCINT9);
    114a:	48 9b       	sbis	0x09, 0	; 9
    114c:	fe cf       	rjmp	.-4      	; 0x114a <main+0x120>
    114e:	cd bb       	out	0x1d, r28	; 29
    1150:	ec e6       	ldi	r30, 0x6C	; 108
    1152:	f0 e0       	ldi	r31, 0x00	; 0
	runTimerResume();
    1154:	80 81       	ld	r24, Z
    1156:	82 60       	ori	r24, 0x02	; 2
	stepStart();
    1158:	80 83       	st	Z, r24
    115a:	3e de       	rcall	.-900    	; 0xdd8 <runTimerResume>
	runMotor();
    115c:	eb da       	rcall	.-2602   	; 0x734 <stepStart>
    115e:	d5 dc       	rcall	.-1622   	; 0xb0a <runMotor>
	runTimerResume();
    1160:	3b de       	rcall	.-906    	; 0xdd8 <runTimerResume>
    1162:	a6 cf       	rjmp	.-180    	; 0x10b0 <main+0x86>
	
goto STANDBY;
    1164:	f8 94       	cli
	
	
	
	
SHUTDOWN:
	cli();
    1166:	15 b8       	out	0x05, r1	; 5
	PORTB = 0x00;
    1168:	12 b8       	out	0x02, r1	; 2
	PORTA = 0x00;
    116a:	61 de       	rcall	.-830    	; 0xe2e <dispComplete>
	
	dispComplete();
    116c:	ff cf       	rjmp	.-2      	; 0x116c <main+0x142>

0000116e <__vector_2>:
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0b b6       	in	r0, 0x3b	; 59
    117a:	0f 92       	push	r0
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
	if(ORFLAG){
    1198:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
    119c:	88 23       	and	r24, r24
    119e:	69 f1       	breq	.+90     	; 0x11fa <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
    11a0:	44 e1       	ldi	r20, 0x14	; 20
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	81 dd       	rcall	.-1278   	; 0xcaa <debounce>
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_2+0x40>
    11ac:	79 c0       	rjmp	.+242    	; 0x12a0 <__vector_2+0x132>
			ORFLAG  = 0; //Part has entered OR
    11ae:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ORFLAG>
			EIMSK &= ~_BV(INT1);
    11b2:	8d b3       	in	r24, 0x1d	; 29
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
    11b8:	e9 e6       	ldi	r30, 0x69	; 105
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8b 7f       	andi	r24, 0xFB	; 251
    11c0:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    11c2:	8d b3       	in	r24, 0x1d	; 29
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
    11c8:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <countADC+0x1>
    11cc:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <countADC>
			adcPart = 1023;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	93 e0       	ldi	r25, 0x03	; 3
    11d4:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    11d8:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
		
			ADCSRA |=_BV(ADSC);
    11dc:	ea e7       	ldi	r30, 0x7A	; 122
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
		
			motorTimerStart();//slow down motor on approach
    11e4:	80 83       	st	Z, r24
    11e6:	c5 dc       	rcall	.-1654   	; 0xb72 <motorTimerStart>
			ORTime_s = runTime_d;
    11e8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    11ec:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    11f0:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <ORTime_s+0x1>
    11f4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <ORTime_s>
    11f8:	53 c0       	rjmp	.+166    	; 0x12a0 <__vector_2+0x132>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    11fa:	44 e1       	ldi	r20, 0x14	; 20
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	54 dd       	rcall	.-1368   	; 0xcaa <debounce>
    1202:	88 23       	and	r24, r24
    1204:	09 f4       	brne	.+2      	; 0x1208 <__vector_2+0x9a>
    1206:	4c c0       	rjmp	.+152    	; 0x12a0 <__vector_2+0x132>
    1208:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    120c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    1210:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <ORTime_s>
    1214:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <ORTime_s+0x1>
    1218:	82 1b       	sub	r24, r18
    121a:	93 0b       	sbc	r25, r19
    121c:	06 97       	sbiw	r24, 0x06	; 6
    121e:	08 f4       	brcc	.+2      	; 0x1222 <__vector_2+0xb4>
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <__vector_2+0x132>
			ORFLAG  = 1;//Part has cleared OR	
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    1228:	8d b3       	in	r24, 0x1d	; 29
    122a:	8d 7f       	andi	r24, 0xFD	; 253
    122c:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    122e:	e9 e6       	ldi	r30, 0x69	; 105
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    1238:	8d b3       	in	r24, 0x1d	; 29
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    123e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1242:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1246:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcDisp+0x1>
    124a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    124e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1252:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1256:	82 3f       	cpi	r24, 0xF2	; 242
    1258:	93 40       	sbci	r25, 0x03	; 3
    125a:	10 f5       	brcc	.+68     	; 0x12a0 <__vector_2+0x132>
    125c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <countADC>
    1260:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <countADC+0x1>
    1264:	c3 97       	sbiw	r24, 0x33	; 51
    1266:	e0 f0       	brcs	.+56     	; 0x12a0 <__vector_2+0x132>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    1268:	c0 91 61 02 	lds	r28, 0x0261	; 0x800261 <countPart>
    126c:	d0 e0       	ldi	r29, 0x00	; 0
    126e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1272:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1276:	f2 dc       	rcall	.-1564   	; 0xc5c <classify>
    1278:	c0 53       	subi	r28, 0x30	; 48
    127a:	dd 4f       	sbci	r29, 0xFD	; 253
    127c:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    127e:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <countPart>
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <countPart>
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	a0 53       	subi	r26, 0x30	; 48
    128c:	bd 4f       	sbci	r27, 0xFD	; 253
    128e:	8c 91       	ld	r24, X
    1290:	ef 52       	subi	r30, 0x2F	; 47
    1292:	fd 4f       	sbci	r31, 0xFD	; 253
    1294:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    1296:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countPart>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    12a0:	8c b3       	in	r24, 0x1c	; 28
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	8c bb       	out	0x1c, r24	; 28
}//OR
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0b be       	out	0x3b, r0	; 59
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_3>:




//EX ISR //547cycles
ISR(INT2_vect){
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	0b b6       	in	r0, 0x3b	; 59
    12dc:	0f 92       	push	r0
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
	
	if(!EXFLAG)
    12f6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <EXFLAG>
    12fa:	81 11       	cpse	r24, r1
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <__vector_3+0x86>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    12fe:	44 e1       	ldi	r20, 0x14	; 20
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	d2 dc       	rcall	.-1628   	; 0xcaa <debounce>
    1306:	88 23       	and	r24, r24
    1308:	09 f4       	brne	.+2      	; 0x130c <__vector_3+0x3c>
    130a:	69 c0       	rjmp	.+210    	; 0x13de <__vector_3+0x10e>
			{
				EXFLAG =1;//Part is at EX
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1312:	8d b3       	in	r24, 0x1d	; 29
    1314:	8b 7f       	andi	r24, 0xFB	; 251
    1316:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    1318:	e9 e6       	ldi	r30, 0x69	; 105
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 61       	ori	r24, 0x10	; 16
    1320:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1322:	8d b3       	in	r24, 0x1d	; 29
    1324:	84 60       	ori	r24, 0x04	; 4
    1326:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    1328:	8c b3       	in	r24, 0x1c	; 28
    132a:	84 60       	ori	r24, 0x04	; 4
    132c:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;
    132e:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <SORTFLAG>
				if(CalcEnterTime() == 1)
    1332:	8d db       	rcall	.-2278   	; 0xa4e <CalcEnterTime>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	21 f4       	brne	.+8      	; 0x1340 <__vector_3+0x70>
				{
					SORTFLAG = 1;
    1338:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <SORTFLAG>
					brakeMotor();
    133c:	fd db       	rcall	.-2054   	; 0xb38 <brakeMotor>
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <__vector_3+0x74>
				}else
				{
					SORTFLAG = 0;
    1340:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <SORTFLAG>
				}
				EXTime_s = runTime_d;
    1344:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    1348:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    134c:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <EXTime_s+0x1>
    1350:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <EXTime_s>
    1354:	44 c0       	rjmp	.+136    	; 0x13de <__vector_3+0x10e>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME)	)
    1356:	44 e1       	ldi	r20, 0x14	; 20
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	a6 dc       	rcall	.-1716   	; 0xcaa <debounce>
    135e:	88 23       	and	r24, r24
    1360:	f1 f1       	breq	.+124    	; 0x13de <__vector_3+0x10e>
    1362:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    1366:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    136a:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <EXTime_s>
    136e:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <EXTime_s+0x1>
    1372:	82 1b       	sub	r24, r18
    1374:	93 0b       	sbc	r25, r19
    1376:	06 97       	sbiw	r24, 0x06	; 6
    1378:	90 f1       	brcs	.+100    	; 0x13de <__vector_3+0x10e>
		{
				EXFLAG = 0;
    137a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    137e:	8d b3       	in	r24, 0x1d	; 29
    1380:	8b 7f       	andi	r24, 0xFB	; 251
    1382:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    1384:	e9 e6       	ldi	r30, 0x69	; 105
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 7e       	andi	r24, 0xEF	; 239
    138c:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    138e:	8d b3       	in	r24, 0x1d	; 29
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    1394:	8c b3       	in	r24, 0x1c	; 28
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	8c bb       	out	0x1c, r24	; 28
                
				if(countSort<countPart)
    139a:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <countSort>
    139e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countPart>
    13a2:	98 17       	cp	r25, r24
    13a4:	38 f4       	brcc	.+14     	; 0x13b4 <__vector_3+0xe4>
				{//if we won't overrun the array
					countSort+=1;//go to next part
    13a6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <countSort>
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <countSort>
					TARGETFLAG =0;//New target; reset flag
    13b0:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <TARGETFLAG>
				}
				
				DROPFLAG = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <DROPFLAG>
				dropTime  = 0;
    13ba:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <dropTime+0x1>
    13be:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <dropTime>
				dropTime = DROP_TIME;        
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e4       	ldi	r25, 0x40	; 64
    13c6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dropTime+0x1>
    13ca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dropTime>
				EXTime_s = runTime_d;	
    13ce:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    13d2:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    13d6:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <EXTime_s+0x1>
    13da:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <EXTime_s>
		}//HI
	}
	
}//EX
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0b be       	out	0x3b, r0	; 59
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	0b b6       	in	r0, 0x3b	; 59
    1410:	0f 92       	push	r0
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    142a:	0e 94 bf 01 	call	0x37e	; 0x37e <step>
	stepUpdateError(); //calculate the stepper position error
    142e:	0e 94 05 02 	call	0x40a	; 0x40a <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
    1432:	64 d8       	rcall	.-3896   	; 0x4fc <stepUpdateDir>
	stepUpdateDelay(); //update the stepper speed
    1434:	da d8       	rcall	.-3660   	; 0x5ea <stepUpdateDelay>
    1436:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <SORTFLAG>
//CONTROL STEPPER
//CONTROL MOTOR
	if(SORTFLAG)
    143a:	88 23       	and	r24, r24
    143c:	c9 f0       	breq	.+50     	; 0x1470 <__vector_32+0x6c>
    143e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <enterTime>
	{
		if(enterTime<BRAKE_DROP_TIME)
    1442:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <enterTime+0x1>
    1446:	81 15       	cp	r24, r1
    1448:	90 44       	sbci	r25, 0x40	; 64
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__vector_32+0x50>
		{
			runMotor();
    144c:	5e db       	rcall	.-2372   	; 0xb0a <runMotor>
    144e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <SORTFLAG>
			SORTFLAG = 0;
    1452:	0e c0       	rjmp	.+28     	; 0x1470 <__vector_32+0x6c>
    1454:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurDelay>
			
		}else{
			enterTime -= CurDelay;
    1458:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurDelay+0x1>
    145c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <enterTime>
    1460:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <enterTime+0x1>
    1464:	82 1b       	sub	r24, r18
    1466:	93 0b       	sbc	r25, r19
    1468:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <enterTime+0x1>
    146c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <enterTime>
    1470:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <DROPFLAG>
		}
    }	
	
	if(DROPFLAG)
    1474:	88 23       	and	r24, r24
    1476:	39 f1       	breq	.+78     	; 0x14c6 <__vector_32+0xc2>
    1478:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <dropTime>
	{
		if(dropTime<CurDelay)
    147c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <dropTime+0x1>
    1480:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurDelay>
    1484:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurDelay+0x1>
    1488:	28 17       	cp	r18, r24
    148a:	39 07       	cpc	r19, r25
    148c:	28 f4       	brcc	.+10     	; 0x1498 <__vector_32+0x94>
    148e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <DROPFLAG>
		{
			DROPFLAG = 0;
    1492:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <PAUSEFLAG>
			PAUSEFLAG = 0;
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <__vector_32+0xb0>
    1498:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurDelay>
		}else
		{
			dropTime -=CurDelay;
    149c:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurDelay+0x1>
    14a0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dropTime>
    14a4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dropTime+0x1>
    14a8:	82 1b       	sub	r24, r18
    14aa:	93 0b       	sbc	r25, r19
    14ac:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dropTime+0x1>
    14b0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dropTime>
		}
		
		if(CalcExitTime())
    14b4:	15 da       	rcall	.-3030   	; 0x8e0 <CalcExitTime>
    14b6:	88 23       	and	r24, r24
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <__vector_32+0xbe>
    14ba:	81 e0       	ldi	r24, 0x01	; 1
		{
			PAUSEFLAG = 1;
    14bc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <PAUSEFLAG>
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <__vector_32+0xc2>
    14c2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <PAUSEFLAG>
		}else
		{	
			PAUSEFLAG = 0;
    14c6:	ff 91       	pop	r31
		}
		
	}
}//stepTimer
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0b be       	out	0x3b, r0	; 59
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_29>:
    14ec:	1f 92       	push	r1
	



//ADC ISR
ISR(ADC_vect){
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	0b b6       	in	r0, 0x3b	; 59
    14f8:	0f 92       	push	r0
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    1506:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    1510:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	adcTemp+= (ADCH<<8);
    1514:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	98 2f       	mov	r25, r24
    151c:	88 27       	eor	r24, r24
    151e:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    1522:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    152e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	countADC+=1;
    1532:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <countADC>
    1536:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <countADC+0x1>
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <countADC+0x1>
    1540:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <countADC>
	
	if(adcTemp<adcPart){
    1544:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    1548:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    154c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1550:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    1554:	28 17       	cp	r18, r24
    1556:	39 07       	cpc	r19, r25
    1558:	40 f4       	brcc	.+16     	; 0x156a <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    155a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcTemp>
    155e:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcTemp+0x1>
    1562:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    1566:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
	}
	
	if(!ORFLAG){
    156a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
    156e:	81 11       	cpse	r24, r1
    1570:	05 c0       	rjmp	.+10     	; 0x157c <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    1572:	ea e7       	ldi	r30, 0x7A	; 122
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 64       	ori	r24, 0x40	; 64
    157a:	80 83       	st	Z, r24
	}
}//ADC
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0b be       	out	0x3b, r0	; 59
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	0b b6       	in	r0, 0x3b	; 59
    15a2:	0f 92       	push	r0
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    15bc:	44 e1       	ldi	r20, 0x14	; 20
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	73 db       	rcall	.-2330   	; 0xcaa <debounce>
    15c4:	88 23       	and	r24, r24
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    15c8:	82 e3       	ldi	r24, 0x32	; 50
    15ca:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <HALLSENSOR>
	}
}//HE
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0b be       	out	0x3b, r0	; 59
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    1620:	4a ef       	ldi	r20, 0xFA	; 250
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	41 db       	rcall	.-2430   	; 0xcaa <debounce>
    1628:	88 23       	and	r24, r24
    162a:	51 f0       	breq	.+20     	; 0x1640 <__vector_1+0x46>
		if(ENABLE)
    162c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
    1630:	88 23       	and	r24, r24
    1632:	19 f0       	breq	.+6      	; 0x163a <__vector_1+0x40>
		{
			ENABLE = 0;
    1634:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ENABLE>
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <ENABLE>
		}
	}
}//ISR Pause Button
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0b be       	out	0x3b, r0	; 59
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_10>:

ISR(PCINT1_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    168c:	4a ef       	ldi	r20, 0xFA	; 250
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	3e db       	rcall	.-2436   	; 0xd10 <debouncePINJ>
    1694:	88 23       	and	r24, r24
    1696:	59 f0       	breq	.+22     	; 0x16ae <__vector_10+0x48>
		RAMPDOWN = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <RAMPDOWN>
		rampTime_d = runTime_d;	
    169e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <runTime_d>
    16a2:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <runTime_d+0x1>
    16a6:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <rampTime_d+0x1>
    16aa:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <rampTime_d>
	}
}//ISR Ramp Button
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0b be       	out	0x3b, r0	; 59
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__divmodhi4>:
    16d4:	97 fb       	bst	r25, 7
    16d6:	07 2e       	mov	r0, r23
    16d8:	16 f4       	brtc	.+4      	; 0x16de <__divmodhi4+0xa>
    16da:	00 94       	com	r0
    16dc:	06 d0       	rcall	.+12     	; 0x16ea <__divmodhi4_neg1>
    16de:	77 fd       	sbrc	r23, 7
    16e0:	08 d0       	rcall	.+16     	; 0x16f2 <__divmodhi4_neg2>
    16e2:	1a d0       	rcall	.+52     	; 0x1718 <__udivmodhi4>
    16e4:	07 fc       	sbrc	r0, 7
    16e6:	05 d0       	rcall	.+10     	; 0x16f2 <__divmodhi4_neg2>
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__divmodhi4_exit>

000016ea <__divmodhi4_neg1>:
    16ea:	90 95       	com	r25
    16ec:	81 95       	neg	r24
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__divmodhi4_neg2>:
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255

000016f8 <__divmodhi4_exit>:
    16f8:	08 95       	ret

000016fa <__umulhisi3>:
    16fa:	a2 9f       	mul	r26, r18
    16fc:	b0 01       	movw	r22, r0
    16fe:	b3 9f       	mul	r27, r19
    1700:	c0 01       	movw	r24, r0
    1702:	a3 9f       	mul	r26, r19
    1704:	70 0d       	add	r23, r0
    1706:	81 1d       	adc	r24, r1
    1708:	11 24       	eor	r1, r1
    170a:	91 1d       	adc	r25, r1
    170c:	b2 9f       	mul	r27, r18
    170e:	70 0d       	add	r23, r0
    1710:	81 1d       	adc	r24, r1
    1712:	11 24       	eor	r1, r1
    1714:	91 1d       	adc	r25, r1
    1716:	08 95       	ret

00001718 <__udivmodhi4>:
    1718:	aa 1b       	sub	r26, r26
    171a:	bb 1b       	sub	r27, r27
    171c:	51 e1       	ldi	r21, 0x11	; 17
    171e:	07 c0       	rjmp	.+14     	; 0x172e <__udivmodhi4_ep>

00001720 <__udivmodhi4_loop>:
    1720:	aa 1f       	adc	r26, r26
    1722:	bb 1f       	adc	r27, r27
    1724:	a6 17       	cp	r26, r22
    1726:	b7 07       	cpc	r27, r23
    1728:	10 f0       	brcs	.+4      	; 0x172e <__udivmodhi4_ep>
    172a:	a6 1b       	sub	r26, r22
    172c:	b7 0b       	sbc	r27, r23

0000172e <__udivmodhi4_ep>:
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	5a 95       	dec	r21
    1734:	a9 f7       	brne	.-22     	; 0x1720 <__udivmodhi4_loop>
    1736:	80 95       	com	r24
    1738:	90 95       	com	r25
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	08 95       	ret

00001740 <_exit>:
    1740:	f8 94       	cli

00001742 <__stop_program>:
    1742:	ff cf       	rjmp	.-2      	; 0x1742 <__stop_program>
