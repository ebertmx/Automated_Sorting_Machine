
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00001872  00001906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001872  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800240  00800240  00001946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000295a  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a5  00000000  00000000  000044fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167a  00000000  00000000  0000569f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00006d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abd  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00007dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_1>
       8:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_2>
       c:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_3>
      10:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_4>
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_10>
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	22 c7       	rjmp	.+3652   	; 0xeee <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	03 c6       	rjmp	.+3078   	; 0xcc4 <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e7       	ldi	r30, 0x72	; 114
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 33       	cpi	r26, 0x37	; 55
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 9a 08 	call	0x1134	; 0x1134 <main>
     122:	0c 94 37 0c 	jmp	0x186e	; 0x186e <_exit>

00000126 <__bad_interrupt>:
     126:	fa c6       	rjmp	.+3572   	; 0xf1c <__vector_default>

00000128 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     128:	87 b1       	in	r24, 0x07	; 7
     12a:	80 7f       	andi	r24, 0xF0	; 240
     12c:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12e:	88 b1       	in	r24, 0x08	; 8
     130:	80 62       	ori	r24, 0x20	; 32
     132:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     134:	88 b1       	in	r24, 0x08	; 8
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0x14>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     142:	88 b1       	in	r24, 0x08	; 8
     144:	80 68       	ori	r24, 0x80	; 128
     146:	88 b9       	out	0x08, r24	; 8
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	9a 95       	dec	r25
     14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0x22>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     150:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     152:	82 95       	swap	r24
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	92 e0       	ldi	r25, 0x02	; 2
     158:	9a 95       	dec	r25
     15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0x30>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15e:	98 b1       	in	r25, 0x08	; 8
     160:	9f 77       	andi	r25, 0x7F	; 127
     162:	98 b9       	out	0x08, r25	; 8
     164:	95 e0       	ldi	r25, 0x05	; 5
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x3e>
     16a:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16c:	98 b1       	in	r25, 0x08	; 8
     16e:	90 68       	ori	r25, 0x80	; 128
     170:	98 b9       	out	0x08, r25	; 8
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	9a 95       	dec	r25
     176:	f1 f7       	brne	.-4      	; 0x174 <LCDBusyLoop+0x4c>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     17a:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17c:	80 78       	andi	r24, 0x80	; 128
     17e:	92 e0       	ldi	r25, 0x02	; 2
     180:	9a 95       	dec	r25
     182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x58>
     184:	00 c0       	rjmp	.+0      	; 0x186 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     186:	98 b1       	in	r25, 0x08	; 8
     188:	9f 77       	andi	r25, 0x7F	; 127
     18a:	98 b9       	out	0x08, r25	; 8
     18c:	95 e0       	ldi	r25, 0x05	; 5
     18e:	9a 95       	dec	r25
     190:	f1 f7       	brne	.-4      	; 0x18e <LCDBusyLoop+0x66>
     192:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     194:	81 11       	cpse	r24, r1
     196:	d5 cf       	rjmp	.-86     	; 0x142 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	8f 7d       	andi	r24, 0xDF	; 223
     19c:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19e:	87 b1       	in	r24, 0x07	; 7
     1a0:	8f 60       	ori	r24, 0x0F	; 15
     1a2:	87 b9       	out	0x07, r24	; 7
     1a4:	08 95       	ret

000001a6 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a6:	28 2f       	mov	r18, r24
     1a8:	22 95       	swap	r18
     1aa:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1ac:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ae:	61 11       	cpse	r22, r1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCDByte+0x14>
	CLEAR_RS();
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 7b       	andi	r25, 0xBF	; 191
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCDByte+0x1a>
else
	SET_RS();
     1ba:	98 b1       	in	r25, 0x08	; 8
     1bc:	90 64       	ori	r25, 0x40	; 64
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	9a 95       	dec	r25
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCDByte+0x1c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c8:	98 b1       	in	r25, 0x08	; 8
     1ca:	90 68       	ori	r25, 0x80	; 128
     1cc:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1ce:	98 b1       	in	r25, 0x08	; 8
     1d0:	90 7f       	andi	r25, 0xF0	; 240
     1d2:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d4:	98 b9       	out	0x08, r25	; 8
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	9a 95       	dec	r25
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDByte+0x32>
     1dc:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1de:	98 b1       	in	r25, 0x08	; 8
     1e0:	9f 77       	andi	r25, 0x7F	; 127
     1e2:	98 b9       	out	0x08, r25	; 8
     1e4:	95 e0       	ldi	r25, 0x05	; 5
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDByte+0x40>
     1ea:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	90 68       	ori	r25, 0x80	; 128
     1f0:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f2:	98 b1       	in	r25, 0x08	; 8
     1f4:	90 7f       	andi	r25, 0xF0	; 240
     1f6:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f8:	88 b9       	out	0x08, r24	; 8
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCDByte+0x56>
     200:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     202:	88 b1       	in	r24, 0x08	; 8
     204:	8f 77       	andi	r24, 0x7F	; 127
     206:	88 b9       	out	0x08, r24	; 8
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCDByte+0x64>
     20e:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     210:	8b cf       	rjmp	.-234    	; 0x128 <LCDBusyLoop>
     212:	08 95       	ret

00000214 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	2f ef       	ldi	r18, 0xFF	; 255
     21a:	86 e7       	ldi	r24, 0x76	; 118
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	21 50       	subi	r18, 0x01	; 1
     220:	80 40       	sbci	r24, 0x00	; 0
     222:	90 40       	sbci	r25, 0x00	; 0
     224:	e1 f7       	brne	.-8      	; 0x21e <InitLCD+0xa>
     226:	00 c0       	rjmp	.+0      	; 0x228 <InitLCD+0x14>
     228:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     22a:	87 b1       	in	r24, 0x07	; 7
     22c:	8f 60       	ori	r24, 0x0F	; 15
     22e:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     230:	87 b1       	in	r24, 0x07	; 7
     232:	80 68       	ori	r24, 0x80	; 128
     234:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     236:	87 b1       	in	r24, 0x07	; 7
     238:	80 64       	ori	r24, 0x40	; 64
     23a:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23c:	87 b1       	in	r24, 0x07	; 7
     23e:	80 62       	ori	r24, 0x20	; 32
     240:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     242:	88 b1       	in	r24, 0x08	; 8
     244:	80 7f       	andi	r24, 0xF0	; 240
     246:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     248:	88 b1       	in	r24, 0x08	; 8
     24a:	8f 77       	andi	r24, 0x7F	; 127
     24c:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24e:	88 b1       	in	r24, 0x08	; 8
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     254:	88 b1       	in	r24, 0x08	; 8
     256:	8f 7b       	andi	r24, 0xBF	; 191
     258:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x48>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <InitLCD+0x4a>
     25e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     260:	88 b1       	in	r24, 0x08	; 8
     262:	80 68       	ori	r24, 0x80	; 128
     264:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     266:	88 b1       	in	r24, 0x08	; 8
     268:	82 60       	ori	r24, 0x02	; 2
     26a:	88 b9       	out	0x08, r24	; 8
     26c:	25 e0       	ldi	r18, 0x05	; 5
     26e:	2a 95       	dec	r18
     270:	f1 f7       	brne	.-4      	; 0x26e <InitLCD+0x5a>
     272:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     274:	88 b1       	in	r24, 0x08	; 8
     276:	8f 77       	andi	r24, 0x7F	; 127
     278:	88 b9       	out	0x08, r24	; 8
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	8a 95       	dec	r24
     27e:	f1 f7       	brne	.-4      	; 0x27c <InitLCD+0x68>
     280:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     282:	52 df       	rcall	.-348    	; 0x128 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	8c 2f       	mov	r24, r28
     288:	8c 60       	ori	r24, 0x0C	; 12
     28a:	8d df       	rcall	.-230    	; 0x1a6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	88 e2       	ldi	r24, 0x28	; 40
     290:	8a df       	rcall	.-236    	; 0x1a6 <LCDByte>
}
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	82 df       	rcall	.-252    	; 0x1a6 <LCDByte>
	msg++;
     2a2:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a4:	88 81       	ld	r24, Y
     2a6:	81 11       	cpse	r24, r1
     2a8:	fa cf       	rjmp	.-12     	; 0x29e <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <LCDWriteInt+0xe>
     2be:	1f 92       	push	r1
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c8:	fe 01       	movw	r30, r28
     2ca:	31 96       	adiw	r30, 0x01	; 1
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	df 01       	movw	r26, r30
     2d0:	1d 92       	st	X+, r1
     2d2:	2a 95       	dec	r18
     2d4:	e9 f7       	brne	.-6      	; 0x2d0 <LCDWriteInt+0x20>
	int i=4,j=0;
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2da:	0f c0       	rjmp	.+30     	; 0x2fa <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	0e 94 01 0c 	call	0x1802	; 0x1802 <__divmodhi4>
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e2 0f       	add	r30, r18
     2ee:	f3 1f       	adc	r31, r19
     2f0:	80 83       	st	Z, r24
	val=val/10;
     2f2:	86 2f       	mov	r24, r22
     2f4:	97 2f       	mov	r25, r23
	i--;
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	79 f7       	brne	.-34     	; 0x2dc <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fe:	bf ef       	ldi	r27, 0xFF	; 255
     300:	eb 16       	cp	r14, r27
     302:	fb 06       	cpc	r15, r27
     304:	81 f4       	brne	.+32     	; 0x326 <LCDWriteInt+0x76>
     306:	03 c0       	rjmp	.+6      	; 0x30e <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	02 c0       	rjmp	.+4      	; 0x312 <LCDWriteInt+0x62>
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ec 0f       	add	r30, r28
     318:	fd 1f       	adc	r31, r29
     31a:	e0 0f       	add	r30, r16
     31c:	f1 1f       	adc	r31, r17
     31e:	20 81       	ld	r18, Z
     320:	22 23       	and	r18, r18
     322:	91 f3       	breq	.-28     	; 0x308 <LCDWriteInt+0x58>
     324:	04 c0       	rjmp	.+8      	; 0x32e <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     326:	05 e0       	ldi	r16, 0x05	; 5
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	0e 19       	sub	r16, r14
     32c:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32e:	99 23       	and	r25, r25
     330:	84 f4       	brge	.+32     	; 0x352 <LCDWriteInt+0xa2>
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	8d e2       	ldi	r24, 0x2D	; 45
     336:	37 df       	rcall	.-402    	; 0x1a6 <LCDByte>
     338:	0c c0       	rjmp	.+24     	; 0x352 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     33a:	e1 e0       	ldi	r30, 0x01	; 1
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ec 0f       	add	r30, r28
     340:	fd 1f       	adc	r31, r29
     342:	e0 0f       	add	r30, r16
     344:	f1 1f       	adc	r31, r17
     346:	80 81       	ld	r24, Z
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	2c df       	rcall	.-424    	; 0x1a6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34e:	0f 5f       	subi	r16, 0xFF	; 255
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	05 30       	cpi	r16, 0x05	; 5
     354:	11 05       	cpc	r17, r1
     356:	8c f3       	brlt	.-30     	; 0x33a <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	08 95       	ret

00000370 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     370:	88 32       	cpi	r24, 0x28	; 40
     372:	28 f4       	brcc	.+10     	; 0x37e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     374:	61 11       	cpse	r22, r1
     376:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	14 cf       	rjmp	.-472    	; 0x1a6 <LCDByte>
     37e:	08 95       	ret

00000380 <step>:
extern volatile char TARGETFLAG;
extern volatile char SLIPFLAG;
extern volatile uint8_t Steps2Exit;

uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     380:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__data_end>
     384:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     388:	89 0f       	add	r24, r25
     38a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     38e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     392:	84 30       	cpi	r24, 0x04	; 4
     394:	1c f0       	brlt	.+6      	; 0x39c <step+0x1c>
     396:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     39c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     3a0:	88 23       	and	r24, r24
     3a2:	1c f4       	brge	.+6      	; 0x3aa <step+0x2a>
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     3aa:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__data_end>
     3ae:	0e 2e       	mov	r0, r30
     3b0:	00 0c       	add	r0, r0
     3b2:	ff 0b       	sbc	r31, r31
     3b4:	e0 50       	subi	r30, 0x00	; 0
     3b6:	fe 4f       	sbci	r31, 0xFE	; 254
     3b8:	80 81       	ld	r24, Z
     3ba:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     3bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3c0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     3c4:	89 0f       	add	r24, r25
     3c6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 200 && Dir==1){CurPosition -=  200;}
     3ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3ce:	89 3c       	cpi	r24, 0xC9	; 201
     3d0:	50 f0       	brcs	.+20     	; 0x3e6 <step+0x66>
     3d2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <step+0x66>
     3da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3de:	88 5c       	subi	r24, 0xC8	; 200
     3e0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     3e4:	0d c0       	rjmp	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
	else if(CurPosition < 50 && Dir==-1){CurPosition += 200;}
     3e6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3ea:	82 33       	cpi	r24, 0x32	; 50
     3ec:	48 f4       	brcc	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3fa:	88 53       	subi	r24, 0x38	; 56
     3fc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     400:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     404:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	08 95       	ret

0000040c <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(SLIPFLAG)
     40c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <SLIPFLAG>
     410:	88 23       	and	r24, r24
     412:	69 f1       	breq	.+90     	; 0x46e <stepUpdateError+0x62>
	{
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
     414:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     418:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     41c:	99 23       	and	r25, r25
     41e:	1c f4       	brge	.+6      	; 0x426 <stepUpdateError+0x1a>
     420:	91 95       	neg	r25
     422:	81 95       	neg	r24
     424:	91 09       	sbc	r25, r1
     426:	0f 97       	sbiw	r24, 0x0f	; 15
     428:	94 f4       	brge	.+36     	; 0x44e <stepUpdateError+0x42>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			SLIPFLAG = 0;
     42a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <SLIPFLAG>
			CurError = Parts[countSort] - CurPosition;
     42e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ed 52       	subi	r30, 0x2D	; 45
     436:	fd 4f       	sbci	r31, 0xFD	; 253
     438:	80 81       	ld	r24, Z
     43a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	82 1b       	sub	r24, r18
     442:	91 09       	sbc	r25, r1
     444:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     448:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     44c:	1f c0       	rjmp	.+62     	; 0x48c <stepUpdateError+0x80>
		}else
		{
			CurError = Parts[countSort-1] - CurPosition;
     44e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ee 52       	subi	r30, 0x2E	; 46
     456:	fd 4f       	sbci	r31, 0xFD	; 253
     458:	80 81       	ld	r24, Z
     45a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	82 1b       	sub	r24, r18
     462:	91 09       	sbc	r25, r1
     464:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     468:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     46c:	0f c0       	rjmp	.+30     	; 0x48c <stepUpdateError+0x80>
			
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     46e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ed 52       	subi	r30, 0x2D	; 45
     476:	fd 4f       	sbci	r31, 0xFD	; 253
     478:	80 81       	ld	r24, Z
     47a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	82 1b       	sub	r24, r18
     482:	91 09       	sbc	r25, r1
     484:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     488:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	
	if(CurError>100)
     48c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     490:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     494:	85 36       	cpi	r24, 0x65	; 101
     496:	91 05       	cpc	r25, r1
     498:	5c f0       	brlt	.+22     	; 0x4b0 <stepUpdateError+0xa4>
	{
		CurError = CurError - 200;
     49a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     49e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4a2:	88 5c       	subi	r24, 0xC8	; 200
     4a4:	91 09       	sbc	r25, r1
     4a6:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     4aa:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <stepUpdateError+0xc6>
	}else if(CurError<-100)
     4b0:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4b4:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4b8:	8c 39       	cpi	r24, 0x9C	; 156
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	54 f4       	brge	.+20     	; 0x4d2 <stepUpdateError+0xc6>
	{
		CurError = CurError + 200;
     4be:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4c2:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4c6:	88 53       	subi	r24, 0x38	; 56
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     4ce:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	if(abs(CurError) < Steps2Acc)//change if slowing down to quickly at zone; may cause oscillation
     4d2:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     4d6:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     4da:	33 23       	and	r19, r19
     4dc:	1c f4       	brge	.+6      	; 0x4e4 <stepUpdateError+0xd8>
     4de:	31 95       	neg	r19
     4e0:	21 95       	neg	r18
     4e2:	31 09       	sbc	r19, r1
     4e4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	24 f4       	brge	.+8      	; 0x4f8 <stepUpdateError+0xec>
	{
		TARGETFLAG = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <TARGETFLAG>
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <stepUpdateError+0xf0>
	}else
	{
		TARGETFLAG = 0;
     4f8:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
	}
	return 1;
}
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	08 95       	ret

00000500 <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     500:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     504:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     508:	89 2b       	or	r24, r25
     50a:	91 f4       	brne	.+36     	; 0x530 <stepUpdateDir+0x30>
		{// if stepper is at target
			if(CurDelay > (MAXDELAY-MINDELAY))
     50c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     510:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	97 40       	sbci	r25, 0x07	; 7
     518:	30 f0       	brcs	.+12     	; 0x526 <stepUpdateDir+0x26>
			{// if stepper can stop
				Dir = 0; //stop stepping
     51a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				TARGETFLAG = 0; //clear target flag
     51e:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
				return 1;	
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	08 95       	ret
			}else
			{//Decelerate stepper
				DECELFLAG = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DECELFLAG>
				return 0;
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
     530:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     534:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     538:	99 23       	and	r25, r25
     53a:	1c f4       	brge	.+6      	; 0x542 <stepUpdateDir+0x42>
     53c:	91 95       	neg	r25
     53e:	81 95       	neg	r24
     540:	91 09       	sbc	r25, r1
     542:	8b 35       	cpi	r24, 0x5B	; 91
     544:	91 05       	cpc	r25, r1
     546:	b4 f0       	brlt	.+44     	; 0x574 <stepUpdateDir+0x74>
     548:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     54c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     550:	81 15       	cp	r24, r1
     552:	9a 40       	sbci	r25, 0x0A	; 10
     554:	78 f4       	brcc	.+30     	; 0x574 <stepUpdateDir+0x74>
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
     556:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <DECELFLAG>
			if(Dir != 0)
     55a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     55e:	88 23       	and	r24, r24
     560:	29 f0       	breq	.+10     	; 0x56c <stepUpdateDir+0x6c>
			{//Keep direction
				NextDir = Dir;
     562:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     566:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
				return 0;
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
			if(Dir != 0)
     56a:	18 c0       	rjmp	.+48     	; 0x59c <stepUpdateDir+0x9c>
			{//Keep direction
				NextDir = Dir;
			}else
			{//edge case where Dir might be zero
				Dir = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     572:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     574:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     578:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	12 16       	cp	r1, r18
     580:	13 06       	cpc	r1, r19
     582:	0c f0       	brlt	.+2      	; 0x586 <stepUpdateDir+0x86>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     58a:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     58e:	93 2f       	mov	r25, r19
     590:	99 1f       	adc	r25, r25
     592:	99 27       	eor	r25, r25
     594:	99 1f       	adc	r25, r25
     596:	89 1b       	sub	r24, r25
     598:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		if(NextDir == Dir)
     59c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     5a0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5a4:	98 13       	cpse	r25, r24
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <stepUpdateDir+0xb4>
		{//next direction is the same
			Dir = NextDir;
     5a8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5ac:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	08 95       	ret
		}else if(CurDelay >= MAXDELAY)
     5b4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     5b8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     5bc:	81 15       	cp	r24, r1
     5be:	9a 40       	sbci	r25, 0x0A	; 10
     5c0:	30 f0       	brcs	.+12     	; 0x5ce <stepUpdateDir+0xce>
		{//stepper is can change direction
			Dir = NextDir;
     5c2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5c6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	08 95       	ret
		}else
		{//Decelerate stepper to switch directions
			DECELFLAG = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DECELFLAG>
			return 0;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 1;
}
     5d6:	08 95       	ret

000005d8 <stepRes>:
}



void stepRes(void){
	accSteps = 0;
     5d8:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
	StepsDelta = 0;
     5dc:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <StepsDelta>
	CurDelay = MAXDELAY;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	9a e0       	ldi	r25, 0x0A	; 10
     5e4:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     5e8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
     5ec:	08 95       	ret

000005ee <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
     5ee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5f2:	81 11       	cpse	r24, r1
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
     5f6:	f0 df       	rcall	.-32     	; 0x5d8 <stepRes>
     5f8:	7e c0       	rjmp	.+252    	; 0x6f6 <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     5fa:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <TARGETFLAG>
     5fe:	81 11       	cpse	r24, r1
     600:	08 c0       	rjmp	.+16     	; 0x612 <stepUpdateDelay+0x24>
     602:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <DECELFLAG>
     606:	81 11       	cpse	r24, r1
     608:	04 c0       	rjmp	.+8      	; 0x612 <stepUpdateDelay+0x24>
     60a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <PAUSEFLAG>
     60e:	88 23       	and	r24, r24
     610:	c9 f1       	breq	.+114    	; 0x684 <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
     612:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e1 59       	subi	r30, 0x91	; 145
     61e:	fd 4f       	sbci	r31, 0xFD	; 253
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
     624:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     628:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     62c:	82 0f       	add	r24, r18
     62e:	93 1f       	adc	r25, r19
     630:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     634:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay > MAXDELAY)
     638:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     63c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	9a 40       	sbci	r25, 0x0A	; 10
     644:	a0 f0       	brcs	.+40     	; 0x66e <stepUpdateDelay+0x80>
		{
			if(PAUSEFLAG && (Steps2Exit<3))
     646:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <PAUSEFLAG>
     64a:	88 23       	and	r24, r24
     64c:	29 f0       	breq	.+10     	; 0x658 <stepUpdateDelay+0x6a>
     64e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	08 f4       	brcc	.+2      	; 0x658 <stepUpdateDelay+0x6a>
     656:	4f c0       	rjmp	.+158    	; 0x6f6 <stepUpdateDelay+0x108>
			{
				
			}else
			{
				CurDelay = MAXDELAY;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	9a e0       	ldi	r25, 0x0A	; 10
     65c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     660:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
				accSteps = 0;
     664:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
				DECELFLAG = 0;
     668:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <DECELFLAG>
     66c:	44 c0       	rjmp	.+136    	; 0x6f6 <stepUpdateDelay+0x108>
			}		     
		}else if(accSteps>0){
     66e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     672:	88 23       	and	r24, r24
     674:	09 f4       	brne	.+2      	; 0x678 <stepUpdateDelay+0x8a>
     676:	3f c0       	rjmp	.+126    	; 0x6f6 <stepUpdateDelay+0x108>
			accSteps--;
     678:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     67c:	81 50       	subi	r24, 0x01	; 1
     67e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
     682:	39 c0       	rjmp	.+114    	; 0x6f6 <stepUpdateDelay+0x108>
		}
	
	}else if(CurDelay>MINDELAY)
     684:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     688:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	93 40       	sbci	r25, 0x03	; 3
     690:	e0 f1       	brcs	.+120    	; 0x70a <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
     692:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     696:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     69a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e1 59       	subi	r30, 0x91	; 145
     6a6:	fd 4f       	sbci	r31, 0xFD	; 253
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     6b4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
     6b8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     6bc:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	93 40       	sbci	r25, 0x03	; 3
     6c4:	38 f0       	brcs	.+14     	; 0x6d4 <stepUpdateDelay+0xe6>
     6c6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     6ca:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	9a 40       	sbci	r25, 0x0A	; 10
     6d2:	30 f0       	brcs	.+12     	; 0x6e0 <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     6dc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		}
		if(accSteps<Steps2Acc)
     6e0:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     6e4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     6e8:	98 17       	cp	r25, r24
     6ea:	28 f4       	brcc	.+10     	; 0x6f6 <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
     6ec:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
     6f6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     6fa:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6fe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     702:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
     70a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     70c:	08 95       	ret

0000070e <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     70e:	e1 e9       	ldi	r30, 0x91	; 145
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	88 60       	ori	r24, 0x08	; 8
     716:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     720:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     724:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     728:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     72c:	e1 e7       	ldi	r30, 0x71	; 113
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
     736:	08 95       	ret

00000738 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     738:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     73c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	3a e0       	ldi	r19, 0x0A	; 10
     744:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     748:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     74c:	e1 e9       	ldi	r30, 0x91	; 145
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	83 60       	ori	r24, 0x03	; 3
     754:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     756:	88 b3       	in	r24, 0x18	; 24
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     75c:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <CurDelay+0x1>
     760:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <CurDelay>
     764:	08 95       	ret

00000766 <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     766:	e1 e9       	ldi	r30, 0x91	; 145
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	8d 7f       	andi	r24, 0xFD	; 253
     76e:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     770:	80 81       	ld	r24, Z
     772:	8e 7f       	andi	r24, 0xFE	; 254
     774:	80 83       	st	Z, r24
     776:	08 95       	ret

00000778 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     778:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <CurAcc+0x1>
     77c:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	24 c0       	rjmp	.+72     	; 0x7d2 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     78a:	fc 01       	movw	r30, r24
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	e1 59       	subi	r30, 0x91	; 145
     794:	fd 4f       	sbci	r31, 0xFD	; 253
     796:	40 81       	ld	r20, Z
     798:	51 81       	ldd	r21, Z+1	; 0x01
     79a:	24 1b       	sub	r18, r20
     79c:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     79e:	40 81       	ld	r20, Z
     7a0:	51 81       	ldd	r21, Z+1	; 0x01
     7a2:	4c 5c       	subi	r20, 0xCC	; 204
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	fc 01       	movw	r30, r24
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	e1 59       	subi	r30, 0x91	; 145
     7ae:	fd 4f       	sbci	r31, 0xFD	; 253
     7b0:	51 83       	std	Z+1, r21	; 0x01
     7b2:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     7b4:	40 81       	ld	r20, Z
     7b6:	51 81       	ldd	r21, Z+1	; 0x01
     7b8:	41 3d       	cpi	r20, 0xD1	; 209
     7ba:	51 05       	cpc	r21, r1
     7bc:	48 f0       	brcs	.+18     	; 0x7d0 <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     7be:	fc 01       	movw	r30, r24
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e1 59       	subi	r30, 0x91	; 145
     7c6:	fd 4f       	sbci	r31, 0xFD	; 253
     7c8:	40 ed       	ldi	r20, 0xD0	; 208
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	51 83       	std	Z+1, r21	; 0x01
     7ce:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	84 30       	cpi	r24, 0x04	; 4
     7d4:	91 05       	cpc	r25, r1
     7d6:	c8 f2       	brcs	.-78     	; 0x78a <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     7d8:	fc 01       	movw	r30, r24
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	e1 59       	subi	r30, 0x91	; 145
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
     7e2:	40 ed       	ldi	r20, 0xD0	; 208
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	51 83       	std	Z+1, r21	; 0x01
     7e8:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7ea:	1a c0       	rjmp	.+52     	; 0x820 <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     7ec:	fc 01       	movw	r30, r24
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e1 59       	subi	r30, 0x91	; 145
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	40 81       	ld	r20, Z
     7fa:	51 81       	ldd	r21, Z+1	; 0x01
     7fc:	24 1b       	sub	r18, r20
     7fe:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     800:	21 15       	cp	r18, r1
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	34 07       	cpc	r19, r20
     806:	10 f4       	brcc	.+4      	; 0x80c <stepCalcAcc+0x94>
			delay = MINDELAY;
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
     80c:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     80e:	fc 01       	movw	r30, r24
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e1 59       	subi	r30, 0x91	; 145
     816:	fd 4f       	sbci	r31, 0xFD	; 253
     818:	40 ed       	ldi	r20, 0xD0	; 208
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	51 83       	std	Z+1, r21	; 0x01
     81e:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     820:	a9 01       	movw	r20, r18
     822:	40 57       	subi	r20, 0x70	; 112
     824:	52 40       	sbci	r21, 0x02	; 2
     826:	41 30       	cpi	r20, 0x01	; 1
     828:	53 40       	sbci	r21, 0x03	; 3
     82a:	00 f7       	brcc	.-64     	; 0x7ec <stepCalcAcc+0x74>
     82c:	2a c0       	rjmp	.+84     	; 0x882 <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     82e:	ac 01       	movw	r20, r24
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     834:	fc 01       	movw	r30, r24
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e1 59       	subi	r30, 0x91	; 145
     83c:	fd 4f       	sbci	r31, 0xFD	; 253
     83e:	60 81       	ld	r22, Z
     840:	71 81       	ldd	r23, Z+1	; 0x01
     842:	26 1b       	sub	r18, r22
     844:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	64 33       	cpi	r22, 0x34	; 52
     84c:	71 05       	cpc	r23, r1
     84e:	48 f4       	brcc	.+18     	; 0x862 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     850:	fa 01       	movw	r30, r20
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	e1 59       	subi	r30, 0x91	; 145
     858:	fd 4f       	sbci	r31, 0xFD	; 253
     85a:	11 82       	std	Z+1, r1	; 0x01
     85c:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     85e:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     860:	14 c0       	rjmp	.+40     	; 0x88a <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	fc 01       	movw	r30, r24
     868:	e1 59       	subi	r30, 0x91	; 145
     86a:	fd 4f       	sbci	r31, 0xFD	; 253
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	c4 97       	sbiw	r24, 0x34	; 52
     872:	fa 01       	movw	r30, r20
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	e1 59       	subi	r30, 0x91	; 145
     87a:	fd 4f       	sbci	r31, 0xFD	; 253
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     880:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     882:	21 30       	cpi	r18, 0x01	; 1
     884:	43 e0       	ldi	r20, 0x03	; 3
     886:	34 07       	cpc	r19, r20
     888:	90 f6       	brcc	.-92     	; 0x82e <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     88a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     88e:	08 95       	ret

00000890 <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     890:	73 df       	rcall	.-282    	; 0x778 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	9a e0       	ldi	r25, 0x0A	; 10
     896:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     89a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     89e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     8a2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     8a6:	82 e3       	ldi	r24, 0x32	; 50
     8a8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Parts>

	stepStart();//Start stepTimer
     8ac:	45 df       	rcall	.-374    	; 0x738 <stepStart>
		
	while(!HALLSENSOR){
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     8b0:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     8b4:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     8b8:	99 23       	and	r25, r25
     8ba:	1c f4       	brge	.+6      	; 0x8c2 <stepCalibrate+0x32>
     8bc:	91 95       	neg	r25
     8be:	81 95       	neg	r24
     8c0:	91 09       	sbc	r25, r1
     8c2:	44 97       	sbiw	r24, 0x14	; 20
     8c4:	34 f4       	brge	.+12     	; 0x8d2 <stepCalibrate+0x42>
     8c6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <HALLSENSOR>
     8ca:	81 11       	cpse	r24, r1
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <stepCalibrate+0x42>
			CurPosition = 0;
     8ce:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     8d2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <HALLSENSOR>
     8d6:	88 23       	and	r24, r24
     8d8:	59 f3       	breq	.-42     	; 0x8b0 <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     8da:	82 e3       	ldi	r24, 0x32	; 50
     8dc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	08 95       	ret

000008e4 <CalcExitTime>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     8e4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     8e8:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ee 52       	subi	r30, 0x2E	; 46
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
     8f2:	20 81       	ld	r18, Z
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	82 1b       	sub	r24, r18
     8f8:	91 09       	sbc	r25, r1
     8fa:	9c 01       	movw	r18, r24
     8fc:	22 f4       	brpl	.+8      	; 0x906 <CalcExitTime+0x22>
     8fe:	22 27       	eor	r18, r18
     900:	33 27       	eor	r19, r19
     902:	28 1b       	sub	r18, r24
     904:	39 0b       	sbc	r19, r25
     906:	8f e0       	ldi	r24, 0x0F	; 15
     908:	82 1b       	sub	r24, r18
     90a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <Steps2Exit>
     90e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     912:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     916:	89 1b       	sub	r24, r25
     918:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     91c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     920:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     924:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     928:	42 03       	mulsu	r20, r18
     92a:	c0 01       	movw	r24, r0
     92c:	43 9f       	mul	r20, r19
     92e:	90 0d       	add	r25, r0
     930:	11 24       	eor	r1, r1
     932:	18 16       	cp	r1, r24
     934:	19 06       	cpc	r1, r25
     936:	44 f0       	brlt	.+16     	; 0x948 <CalcExitTime+0x64>
     938:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     93c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     940:	81 15       	cp	r24, r1
     942:	9a 40       	sbci	r25, 0x0A	; 10
     944:	08 f4       	brcc	.+2      	; 0x948 <CalcExitTime+0x64>
     946:	3f c0       	rjmp	.+126    	; 0x9c6 <CalcExitTime+0xe2>
     948:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <Steps2Exit>
     94c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     950:	98 17       	cp	r25, r24
     952:	98 f4       	brcc	.+38     	; 0x97a <CalcExitTime+0x96>
     954:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     958:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     95c:	93 50       	subi	r25, 0x03	; 3
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2Exit>
     966:	48 9f       	mul	r20, r24
     968:	90 01       	movw	r18, r0
     96a:	49 9f       	mul	r20, r25
     96c:	30 0d       	add	r19, r0
     96e:	11 24       	eor	r1, r1
     970:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <exitTime+0x1>
     974:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <exitTime>
     978:	64 c0       	rjmp	.+200    	; 0xa42 <CalcExitTime+0x15e>
     97a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     97e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     982:	93 50       	subi	r25, 0x03	; 3
     984:	96 95       	lsr	r25
     986:	87 95       	ror	r24
     988:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     98c:	48 9f       	mul	r20, r24
     98e:	90 01       	movw	r18, r0
     990:	49 9f       	mul	r20, r25
     992:	30 0d       	add	r19, r0
     994:	11 24       	eor	r1, r1
     996:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     99a:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	84 1b       	sub	r24, r20
     9a2:	91 09       	sbc	r25, r1
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	73 e0       	ldi	r23, 0x03	; 3
     9a8:	86 9f       	mul	r24, r22
     9aa:	a0 01       	movw	r20, r0
     9ac:	87 9f       	mul	r24, r23
     9ae:	50 0d       	add	r21, r0
     9b0:	96 9f       	mul	r25, r22
     9b2:	50 0d       	add	r21, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	ca 01       	movw	r24, r20
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     9c0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     9c4:	3e c0       	rjmp	.+124    	; 0xa42 <CalcExitTime+0x15e>
     9c6:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     9ca:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	9a e0       	ldi	r25, 0x0A	; 10
     9d2:	82 1b       	sub	r24, r18
     9d4:	93 0b       	sbc	r25, r19
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     9de:	48 9f       	mul	r20, r24
     9e0:	90 01       	movw	r18, r0
     9e2:	49 9f       	mul	r20, r25
     9e4:	30 0d       	add	r19, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Steps2Acc>
     9ec:	89 2f       	mov	r24, r25
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	ac 01       	movw	r20, r24
     9f2:	56 95       	lsr	r21
     9f4:	54 2f       	mov	r21, r20
     9f6:	44 27       	eor	r20, r20
     9f8:	57 95       	ror	r21
     9fa:	47 95       	ror	r20
     9fc:	98 2f       	mov	r25, r24
     9fe:	88 27       	eor	r24, r24
     a00:	99 0f       	add	r25, r25
     a02:	99 0f       	add	r25, r25
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <Steps2Exit>
     a10:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     a14:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <Steps2MIN>
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	43 1b       	sub	r20, r19
     a1c:	51 09       	sbc	r21, r1
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	24 1b       	sub	r18, r20
     a22:	35 0b       	sbc	r19, r21
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	73 e0       	ldi	r23, 0x03	; 3
     a28:	26 9f       	mul	r18, r22
     a2a:	a0 01       	movw	r20, r0
     a2c:	27 9f       	mul	r18, r23
     a2e:	50 0d       	add	r21, r0
     a30:	36 9f       	mul	r19, r22
     a32:	50 0d       	add	r21, r0
     a34:	11 24       	eor	r1, r1
     a36:	84 0f       	add	r24, r20
     a38:	95 1f       	adc	r25, r21
     a3a:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     a3e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     a42:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <exitTime>
     a46:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <exitTime+0x1>
     a4a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
     a4e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
     a52:	28 17       	cp	r18, r24
     a54:	39 07       	cpc	r19, r25
     a56:	10 f4       	brcc	.+4      	; 0xa5c <CalcExitTime+0x178>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 95       	ret
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret

00000a60 <CalcEnterTime>:
     a60:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a64:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a68:	99 23       	and	r25, r25
     a6a:	1c f4       	brge	.+6      	; 0xa72 <CalcEnterTime+0x12>
     a6c:	91 95       	neg	r25
     a6e:	81 95       	neg	r24
     a70:	91 09       	sbc	r25, r1
     a72:	0f 97       	sbiw	r24, 0x0f	; 15
     a74:	0c f4       	brge	.+2      	; 0xa78 <CalcEnterTime+0x18>
     a76:	a7 c0       	rjmp	.+334    	; 0xbc6 <CalcEnterTime+0x166>
     a78:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a7c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a80:	99 23       	and	r25, r25
     a82:	1c f4       	brge	.+6      	; 0xa8a <CalcEnterTime+0x2a>
     a84:	91 95       	neg	r25
     a86:	81 95       	neg	r24
     a88:	91 09       	sbc	r25, r1
     a8a:	8f 50       	subi	r24, 0x0F	; 15
     a8c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <Steps2Enter>
     a90:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     a94:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     a98:	89 1b       	sub	r24, r25
     a9a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     a9e:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     aa2:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     aa6:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     aaa:	42 03       	mulsu	r20, r18
     aac:	c0 01       	movw	r24, r0
     aae:	43 9f       	mul	r20, r19
     ab0:	90 0d       	add	r25, r0
     ab2:	11 24       	eor	r1, r1
     ab4:	18 16       	cp	r1, r24
     ab6:	19 06       	cpc	r1, r25
     ab8:	0c f0       	brlt	.+2      	; 0xabc <CalcEnterTime+0x5c>
     aba:	3f c0       	rjmp	.+126    	; 0xb3a <CalcEnterTime+0xda>
     abc:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Steps2MIN>
     ac0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     ac4:	89 17       	cp	r24, r25
     ac6:	98 f4       	brcc	.+38     	; 0xaee <CalcEnterTime+0x8e>
     ac8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     acc:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     ad0:	93 50       	subi	r25, 0x03	; 3
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     ada:	48 9f       	mul	r20, r24
     adc:	90 01       	movw	r18, r0
     ade:	49 9f       	mul	r20, r25
     ae0:	30 0d       	add	r19, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <enterTime+0x1>
     ae8:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <enterTime>
     aec:	5f c0       	rjmp	.+190    	; 0xbac <CalcEnterTime+0x14c>
     aee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     af2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     af6:	93 50       	subi	r25, 0x03	; 3
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b00:	48 9f       	mul	r20, r24
     b02:	90 01       	movw	r18, r0
     b04:	49 9f       	mul	r20, r25
     b06:	30 0d       	add	r19, r0
     b08:	11 24       	eor	r1, r1
     b0a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     b0e:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	84 1b       	sub	r24, r20
     b16:	91 09       	sbc	r25, r1
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	73 e0       	ldi	r23, 0x03	; 3
     b1c:	86 9f       	mul	r24, r22
     b1e:	a0 01       	movw	r20, r0
     b20:	87 9f       	mul	r24, r23
     b22:	50 0d       	add	r21, r0
     b24:	96 9f       	mul	r25, r22
     b26:	50 0d       	add	r21, r0
     b28:	11 24       	eor	r1, r1
     b2a:	ca 01       	movw	r24, r20
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b34:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b38:	39 c0       	rjmp	.+114    	; 0xbac <CalcEnterTime+0x14c>
     b3a:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     b3e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	9a e0       	ldi	r25, 0x0A	; 10
     b46:	82 1b       	sub	r24, r18
     b48:	93 0b       	sbc	r25, r19
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b52:	48 9f       	mul	r20, r24
     b54:	90 01       	movw	r18, r0
     b56:	49 9f       	mul	r20, r25
     b58:	30 0d       	add	r19, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Steps2Acc>
     b60:	89 2f       	mov	r24, r25
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	ac 01       	movw	r20, r24
     b66:	56 95       	lsr	r21
     b68:	54 2f       	mov	r21, r20
     b6a:	44 27       	eor	r20, r20
     b6c:	57 95       	ror	r21
     b6e:	47 95       	ror	r20
     b70:	98 2f       	mov	r25, r24
     b72:	88 27       	eor	r24, r24
     b74:	99 0f       	add	r25, r25
     b76:	99 0f       	add	r25, r25
     b78:	84 1b       	sub	r24, r20
     b7a:	95 0b       	sbc	r25, r21
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <Steps2Enter>
     b84:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	24 1b       	sub	r18, r20
     b8c:	31 09       	sbc	r19, r1
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	73 e0       	ldi	r23, 0x03	; 3
     b92:	26 9f       	mul	r18, r22
     b94:	a0 01       	movw	r20, r0
     b96:	27 9f       	mul	r18, r23
     b98:	50 0d       	add	r21, r0
     b9a:	36 9f       	mul	r19, r22
     b9c:	50 0d       	add	r21, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	84 0f       	add	r24, r20
     ba2:	95 1f       	adc	r25, r21
     ba4:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     ba8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     bac:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <enterTime>
     bb0:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <enterTime+0x1>
     bb4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <enterdropTime>
     bb8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <enterdropTime+0x1>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	20 f4       	brcc	.+8      	; 0xbca <CalcEnterTime+0x16a>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	08 95       	ret
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	08 95       	ret
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	08 95       	ret

00000bce <startMotor>:
     bce:	85 b1       	in	r24, 0x05	; 5
     bd0:	80 78       	andi	r24, 0x80	; 128
     bd2:	85 b9       	out	0x05, r24	; 5
     bd4:	85 b1       	in	r24, 0x05	; 5
     bd6:	8b 60       	ori	r24, 0x0B	; 11
     bd8:	85 b9       	out	0x05, r24	; 5
     bda:	16 bc       	out	0x26, r1	; 38
     bdc:	88 ec       	ldi	r24, 0xC8	; 200
     bde:	87 bd       	out	0x27, r24	; 39
     be0:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     be4:	81 11       	cpse	r24, r1
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <startMotor+0x30>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <MOTORFLAG>
     bee:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     bf2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     bf6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     bfa:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     bfe:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     c02:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     c06:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c0a:	08 95       	ret

00000c0c <runMotor>:
     c0c:	85 b1       	in	r24, 0x05	; 5
     c0e:	80 78       	andi	r24, 0x80	; 128
     c10:	85 b9       	out	0x05, r24	; 5
     c12:	85 b1       	in	r24, 0x05	; 5
     c14:	8b 60       	ori	r24, 0x0B	; 11
     c16:	85 b9       	out	0x05, r24	; 5
     c18:	16 bc       	out	0x26, r1	; 38
     c1a:	86 e9       	ldi	r24, 0x96	; 150
     c1c:	87 bd       	out	0x27, r24	; 39
     c1e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c22:	81 11       	cpse	r24, r1
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <runMotor+0x30>
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <MOTORFLAG>
     c2c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     c30:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     c34:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     c38:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     c3c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c40:	08 95       	ret

00000c42 <brakeMotor>:
     c42:	85 b1       	in	r24, 0x05	; 5
     c44:	80 78       	andi	r24, 0x80	; 128
     c46:	85 b9       	out	0x05, r24	; 5
     c48:	85 b1       	in	r24, 0x05	; 5
     c4a:	8f 60       	ori	r24, 0x0F	; 15
     c4c:	85 b9       	out	0x05, r24	; 5
     c4e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <MOTORFLAG>
     c52:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c56:	08 95       	ret

00000c58 <stopMotor>:
     c58:	15 b8       	out	0x05, r1	; 5
     c5a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <MOTORFLAG>
     c5e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <MOTORFLAG>
     c62:	08 95       	ret

00000c64 <Motor_init>:
     c64:	84 b5       	in	r24, 0x24	; 36
     c66:	83 68       	ori	r24, 0x83	; 131
     c68:	84 bd       	out	0x24, r24	; 36
     c6a:	85 b5       	in	r24, 0x25	; 37
     c6c:	82 60       	ori	r24, 0x02	; 2
     c6e:	85 bd       	out	0x25, r24	; 37
     c70:	85 b3       	in	r24, 0x15	; 21
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	85 bb       	out	0x15, r24	; 21
     c76:	17 bc       	out	0x27, r1	; 39
     c78:	ef cf       	rjmp	.-34     	; 0xc58 <stopMotor>
     c7a:	08 95       	ret

00000c7c <motorTimerStart>:
     c7c:	e1 e2       	ldi	r30, 0x21	; 33
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	80 81       	ld	r24, Z
     c82:	88 60       	ori	r24, 0x08	; 8
     c84:	80 83       	st	Z, r24
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     c8e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     c92:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     c96:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     c9a:	a3 e7       	ldi	r26, 0x73	; 115
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	8c 91       	ld	r24, X
     ca0:	82 60       	ori	r24, 0x02	; 2
     ca2:	8c 93       	st	X, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	85 60       	ori	r24, 0x05	; 5
     ca8:	80 83       	st	Z, r24
     caa:	8a b3       	in	r24, 0x1a	; 26
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	8a bb       	out	0x1a, r24	; 26
     cb0:	86 e9       	ldi	r24, 0x96	; 150
     cb2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     cb6:	08 95       	ret

00000cb8 <motorTimerStop>:
     cb8:	e1 e2       	ldi	r30, 0x21	; 33
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	80 81       	ld	r24, Z
     cbe:	8a 7f       	andi	r24, 0xFA	; 250
     cc0:	80 83       	st	Z, r24
     cc2:	08 95       	ret

00000cc4 <__vector_47>:
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	0b b6       	in	r0, 0x3b	; 59
     cd0:	0f 92       	push	r0
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
     cea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     cfc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     d00:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d04:	86 39       	cpi	r24, 0x96	; 150
     d06:	20 f4       	brcc	.+8      	; 0xd10 <__vector_47+0x4c>
     d08:	86 e9       	ldi	r24, 0x96	; 150
     d0a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     d0e:	d4 df       	rcall	.-88     	; 0xcb8 <motorTimerStop>
     d10:	16 bc       	out	0x26, r1	; 38
     d12:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d16:	87 bd       	out	0x27, r24	; 39
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	0f 90       	pop	r0
     d32:	0b be       	out	0x3b, r0	; 59
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <ADC_Init>:
     d3e:	ec e7       	ldi	r30, 0x7C	; 124
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	80 83       	st	Z, r24
     d48:	80 81       	ld	r24, Z
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 83       	st	Z, r24
     d4e:	ea e7       	ldi	r30, 0x7A	; 122
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 68       	ori	r24, 0x80	; 128
     d56:	80 83       	st	Z, r24
     d58:	80 81       	ld	r24, Z
     d5a:	88 60       	ori	r24, 0x08	; 8
     d5c:	80 83       	st	Z, r24
     d5e:	80 81       	ld	r24, Z
     d60:	83 60       	ori	r24, 0x03	; 3
     d62:	80 83       	st	Z, r24
     d64:	08 95       	ret

00000d66 <classify>:
     d66:	8b 3a       	cpi	r24, 0xAB	; 171
     d68:	23 e0       	ldi	r18, 0x03	; 3
     d6a:	92 07       	cpc	r25, r18
     d6c:	38 f0       	brcs	.+14     	; 0xd7c <classify+0x16>
     d6e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <countB>
     d78:	82 e3       	ldi	r24, 0x32	; 50
     d7a:	08 95       	ret
     d7c:	80 32       	cpi	r24, 0x20	; 32
     d7e:	23 e0       	ldi	r18, 0x03	; 3
     d80:	92 07       	cpc	r25, r18
     d82:	38 f0       	brcs	.+14     	; 0xd92 <classify+0x2c>
     d84:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <countW>
     d8e:	86 e9       	ldi	r24, 0x96	; 150
     d90:	08 95       	ret
     d92:	84 36       	cpi	r24, 0x64	; 100
     d94:	91 05       	cpc	r25, r1
     d96:	38 f0       	brcs	.+14     	; 0xda6 <classify+0x40>
     d98:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <countS>
     da2:	88 ec       	ldi	r24, 0xC8	; 200
     da4:	08 95       	ret
     da6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <countA>
     db0:	84 e6       	ldi	r24, 0x64	; 100
     db2:	08 95       	ret

00000db4 <debounce>:
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	08 2e       	mov	r0, r24
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <debounce+0xc>
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <debounce+0x8>
     dc4:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <debounce+0x18>
     dca:	66 0f       	add	r22, r22
     dcc:	8a 95       	dec	r24
     dce:	ea f7       	brpl	.-6      	; 0xdca <debounce+0x16>
     dd0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     dd4:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     dd8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     ddc:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <debounce+0x4c>
     de2:	99 b1       	in	r25, 0x09	; 9
     de4:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     de8:	89 23       	and	r24, r25
     dea:	68 13       	cpse	r22, r24
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <debounce+0x62>
     dee:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     df2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     dfc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     e00:	84 2f       	mov	r24, r20
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <countCheck>
     e08:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <countCheck+0x1>
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	40 f3       	brcs	.-48     	; 0xde2 <debounce+0x2e>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret

00000e1a <debouncePINJ>:
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	08 2e       	mov	r0, r24
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <debouncePINJ+0xc>
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <debouncePINJ+0x8>
     e2a:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <debouncePINJ+0x18>
     e30:	66 0f       	add	r22, r22
     e32:	8a 95       	dec	r24
     e34:	ea f7       	brpl	.-6      	; 0xe30 <debouncePINJ+0x16>
     e36:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e3a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e3e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e42:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <debouncePINJ+0x4e>
     e48:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     e4c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     e50:	89 23       	and	r24, r25
     e52:	68 13       	cpse	r22, r24
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <debouncePINJ+0x64>
     e56:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e5a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     e64:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     e68:	84 2f       	mov	r24, r20
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <countCheck>
     e70:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <countCheck+0x1>
     e74:	28 17       	cp	r18, r24
     e76:	39 07       	cpc	r19, r25
     e78:	38 f3       	brcs	.-50     	; 0xe48 <debouncePINJ+0x2e>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 95       	ret

00000e82 <mTimer_init>:
     e82:	e1 e8       	ldi	r30, 0x81	; 129
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	82 60       	ori	r24, 0x02	; 2
     e8a:	80 83       	st	Z, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 83       	st	Z, r24
     e92:	88 ee       	ldi	r24, 0xE8	; 232
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     e9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     e9e:	08 95       	ret

00000ea0 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     ea0:	e1 ea       	ldi	r30, 0xA1	; 161
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     eb2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     eb6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     eba:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     ebe:	a2 e7       	ldi	r26, 0x72	; 114
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	8c 91       	ld	r24, X
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     ec8:	80 81       	ld	r24, Z
     eca:	85 60       	ori	r24, 0x05	; 5
     ecc:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     ece:	89 b3       	in	r24, 0x19	; 25
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	89 bb       	out	0x19, r24	; 25
     ed4:	08 95       	ret

00000ed6 <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     ed6:	e1 ea       	ldi	r30, 0xA1	; 161
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8a 7f       	andi	r24, 0xFA	; 250
     ede:	80 83       	st	Z, r24
     ee0:	08 95       	ret

00000ee2 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     ee2:	e1 ea       	ldi	r30, 0xA1	; 161
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	85 60       	ori	r24, 0x05	; 5
     eea:	80 83       	st	Z, r24
     eec:	08 95       	ret

00000eee <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     efc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     f00:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <runTime_d+0x1>
     f0a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <runTime_d>
	
}//ISR
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	8f 93       	push	r24
	PORTC = 0xFF;
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     f2c:	8f 91       	pop	r24
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	34 d9       	rcall	.-3480   	; 0x1a6 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	16 da       	rcall	.-3028   	; 0x370 <LCDGotoXY>
     f44:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     f48:	62 e0       	ldi	r22, 0x02	; 2
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	b0 d9       	rcall	.-3232   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     f50:	85 e1       	ldi	r24, 0x15	; 21
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	a0 d9       	rcall	.-3264   	; 0x296 <LCDWriteString>
     f56:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
		LCDWriteInt( countA, 2);
     f5a:	62 e0       	ldi	r22, 0x02	; 2
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a7 d9       	rcall	.-3250   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     f62:	85 e1       	ldi	r24, 0x15	; 21
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	97 d9       	rcall	.-3282   	; 0x296 <LCDWriteString>
		LCDWriteInt( countW, 2);
     f68:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e d9       	rcall	.-3268   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     f74:	85 e1       	ldi	r24, 0x15	; 21
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	8e d9       	rcall	.-3300   	; 0x296 <LCDWriteString>
		LCDWriteInt(countS, 2);
     f7a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	95 d9       	rcall	.-3286   	; 0x2b0 <LCDWriteInt>
		LCDWriteString("->");
     f86:	87 e1       	ldi	r24, 0x17	; 23
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	85 d9       	rcall	.-3318   	; 0x296 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     f8c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	8c d9       	rcall	.-3304   	; 0x2b0 <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	e9 d9       	rcall	.-3118   	; 0x370 <LCDGotoXY>
     f9e:	8a e1       	ldi	r24, 0x1A	; 26
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	79 d9       	rcall	.-3342   	; 0x296 <LCDWriteString>
     fa4:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     fa8:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
     fac:	36 95       	lsr	r19
     fae:	27 95       	ror	r18
     fb0:	36 95       	lsr	r19
     fb2:	27 95       	ror	r18
     fb4:	36 95       	lsr	r19
     fb6:	27 95       	ror	r18
     fb8:	a5 ec       	ldi	r26, 0xC5	; 197
     fba:	b0 e2       	ldi	r27, 0x20	; 32
     fbc:	35 d4       	rcall	.+2154   	; 0x1828 <__umulhisi3>
     fbe:	62 e0       	ldi	r22, 0x02	; 2
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	92 95       	swap	r25
     fc4:	82 95       	swap	r24
     fc6:	8f 70       	andi	r24, 0x0F	; 15
     fc8:	89 27       	eor	r24, r25
     fca:	9f 70       	andi	r25, 0x0F	; 15
     fcc:	89 27       	eor	r24, r25
     fce:	70 d9       	rcall	.-3360   	; 0x2b0 <LCDWriteInt>
		LCDWriteString( ".");
     fd0:	8d e1       	ldi	r24, 0x1D	; 29
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	60 d9       	rcall	.-3392   	; 0x296 <LCDWriteString>
     fd6:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
     fda:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <runTime_d+0x1>
     fde:	9a 01       	movw	r18, r20
     fe0:	ad ec       	ldi	r26, 0xCD	; 205
     fe2:	bc ec       	ldi	r27, 0xCC	; 204
     fe4:	21 d4       	rcall	.+2114   	; 0x1828 <__umulhisi3>
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	9c 01       	movw	r18, r24
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	9a 01       	movw	r18, r20
    100e:	28 1b       	sub	r18, r24
    1010:	39 0b       	sbc	r19, r25
    1012:	c9 01       	movw	r24, r18
    1014:	4d d9       	rcall	.-3430   	; 0x2b0 <LCDWriteInt>
    1016:	8f e1       	ldi	r24, 0x1F	; 31
		LCDWriteString("s Complete");
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	3d c9       	rjmp	.-3462   	; 0x296 <LCDWriteString>
    101c:	08 95       	ret

0000101e <dispStatus>:
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
    1022:	c1 d8       	rcall	.-3710   	; 0x1a6 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	a3 d9       	rcall	.-3258   	; 0x370 <LCDGotoXY>
    102a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	3d d9       	rcall	.-3462   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	9a d9       	rcall	.-3276   	; 0x370 <LCDGotoXY>
    103c:	8a e2       	ldi	r24, 0x2A	; 42
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	2a d9       	rcall	.-3500   	; 0x296 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	94 d9       	rcall	.-3288   	; 0x370 <LCDGotoXY>
    1048:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2e d9       	rcall	.-3492   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	85 e0       	ldi	r24, 0x05	; 5
    1058:	8b d9       	rcall	.-3306   	; 0x370 <LCDGotoXY>
    105a:	8c e2       	ldi	r24, 0x2C	; 44
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	1b d9       	rcall	.-3530   	; 0x296 <LCDWriteString>
    1060:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	85 d9       	rcall	.-3318   	; 0x370 <LCDGotoXY>
    1066:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	1f d9       	rcall	.-3522   	; 0x2b0 <LCDWriteInt>
    1072:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
    1074:	87 e0       	ldi	r24, 0x07	; 7
    1076:	7c d9       	rcall	.-3336   	; 0x370 <LCDGotoXY>
    1078:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	16 d9       	rcall	.-3540   	; 0x2b0 <LCDWriteInt>
    1084:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	73 d9       	rcall	.-3354   	; 0x370 <LCDGotoXY>
    108a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0d d9       	rcall	.-3558   	; 0x2b0 <LCDWriteInt>
    1096:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
    1098:	89 e0       	ldi	r24, 0x09	; 9
    109a:	6a d9       	rcall	.-3372   	; 0x370 <LCDGotoXY>
    109c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	04 d9       	rcall	.-3576   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	61 d9       	rcall	.-3390   	; 0x370 <LCDGotoXY>
    10ae:	8e e2       	ldi	r24, 0x2E	; 46
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	f1 d8       	rcall	.-3614   	; 0x296 <LCDWriteString>
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
    10b8:	5b d9       	rcall	.-3402   	; 0x370 <LCDGotoXY>
    10ba:	86 e3       	ldi	r24, 0x36	; 54
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	eb d8       	rcall	.-3626   	; 0x296 <LCDWriteString>
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
    10c4:	55 d9       	rcall	.-3414   	; 0x370 <LCDGotoXY>
    10c6:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
    10ca:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
    10ce:	36 95       	lsr	r19
    10d0:	27 95       	ror	r18
    10d2:	36 95       	lsr	r19
    10d4:	27 95       	ror	r18
    10d6:	ab e7       	ldi	r26, 0x7B	; 123
    10d8:	b4 e1       	ldi	r27, 0x14	; 20
    10da:	a6 d3       	rcall	.+1868   	; 0x1828 <__umulhisi3>
    10dc:	63 e0       	ldi	r22, 0x03	; 3
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	e5 d8       	rcall	.-3638   	; 0x2b0 <LCDWriteInt>
	//LCDWriteStringXY(0,1,"N=" );
	//LCDWriteInt(enterTime,8);
	//LCDWriteString(" X=");
	//LCDWriteInt(exitTime,6);	

LCDWriteIntXY(0, 1, CurPosition, 3);
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	42 d9       	rcall	.-3452   	; 0x370 <LCDGotoXY>
    10ec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
    10f0:	63 e0       	ldi	r22, 0x03	; 3
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	dc d8       	rcall	.-3656   	; 0x2b0 <LCDWriteInt>
LCDWriteStringXY(3,1, ">");
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	39 d9       	rcall	.-3470   	; 0x370 <LCDGotoXY>
    10fe:	88 e1       	ldi	r24, 0x18	; 24
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	c9 d8       	rcall	.-3694   	; 0x296 <LCDWriteString>
    1104:	61 e0       	ldi	r22, 0x01	; 1
LCDWriteIntXY(4, 1, Parts[countSort], 3);
    1106:	84 e0       	ldi	r24, 0x04	; 4
    1108:	33 d9       	rcall	.-3482   	; 0x370 <LCDGotoXY>
    110a:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	ed 52       	subi	r30, 0x2D	; 45
    1112:	fd 4f       	sbci	r31, 0xFD	; 253
    1114:	80 81       	ld	r24, Z
    1116:	63 e0       	ldi	r22, 0x03	; 3
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	c9 d8       	rcall	.-3694   	; 0x2b0 <LCDWriteInt>
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	8c e0       	ldi	r24, 0x0C	; 12
    1122:	26 d9       	rcall	.-3508   	; 0x370 <LCDGotoXY>
// 
// 	LCDWriteIntXY(8,1, PAUSEFLAG,1);
// 	LCDWriteInt(SLIPFLAG,1);
//  	LCDWriteInt(TARGETFLAG,1);
//  	LCDWriteInt(DECELFLAG,1);
LCDWriteIntXY(12, 1, adcDisp, 4);
    1124:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcDisp>
    1128:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcDisp+0x1>
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	bf c8       	rjmp	.-3714   	; 0x2b0 <LCDWriteInt>
    1132:	08 95       	ret

00001134 <main>:
    1134:	e1 e6       	ldi	r30, 0x61	; 97
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 e8       	ldi	r24, 0x80	; 128
    113a:	80 83       	st	Z, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1


int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
    113e:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
    1140:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
    1146:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
    1148:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
    114a:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
    114c:	e4 e0       	ldi	r30, 0x04	; 4
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	80 81       	ld	r24, Z
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
    1156:	e9 e6       	ldi	r30, 0x69	; 105
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	82 60       	ori	r24, 0x02	; 2
    115e:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
    1160:	80 81       	ld	r24, Z
    1162:	8c 60       	ori	r24, 0x0C	; 12
    1164:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
    1166:	80 81       	ld	r24, Z
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
    116c:	80 81       	ld	r24, Z
    116e:	80 6c       	ori	r24, 0xC0	; 192
    1170:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);//RAMPDOWN
    1172:	e8 e6       	ldi	r30, 0x68	; 104
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	82 60       	ori	r24, 0x02	; 2
    117a:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);
    117c:	ec e6       	ldi	r30, 0x6C	; 108
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24


	ADC_Init();
    1186:	db dd       	rcall	.-1098   	; 0xd3e <ADC_Init>
	mTimer_init();
    1188:	7c de       	rcall	.-776    	; 0xe82 <mTimer_init>
	stepTimer_init();
    118a:	c1 da       	rcall	.-2686   	; 0x70e <stepTimer_init>
	InitLCD(LS_BLINK|LS_ULINE);
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	42 d8       	rcall	.-3964   	; 0x214 <InitLCD>
	LCDClear();
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 d8       	rcall	.-4080   	; 0x1a6 <LCDByte>
    1196:	8d b3       	in	r24, 0x1d	; 29
	EIMSK |= 0x08;
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
    119c:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
    119e:	78 db       	rcall	.-2320   	; 0x890 <stepCalibrate>
    11a0:	8d b3       	in	r24, 0x1d	; 29
	//mTimer(2000);
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
    11a2:	87 60       	ori	r24, 0x07	; 7
    11a4:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
    11a6:	8d b3       	in	r24, 0x1d	; 29
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	8d bb       	out	0x1d, r24	; 29
	Motor_init();
    11ac:	5b dd       	rcall	.-1354   	; 0xc64 <Motor_init>
	//sei();
	
	//MAIN OPERATION
	countPart=0;
    11ae:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <countPart>
	countSort = 0;
    11b2:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <countSort>

	startMotor();//Start Belt
    11b6:	0b dd       	rcall	.-1514   	; 0xbce <startMotor>
    11b8:	73 de       	rcall	.-794    	; 0xea0 <runTimerStart>
	runTimerStart();//Start System Timer
    11ba:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
    11be:	88 23       	and	r24, r24
    11c0:	b1 f1       	breq	.+108    	; 0x122e <main+0xfa>
    11c2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
    11c6:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    11ca:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <refreshTime>
    11ce:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <refreshTime+0x1>
    11d2:	82 1b       	sub	r24, r18
    11d4:	93 0b       	sbc	r25, r19
    11d6:	c3 97       	sbiw	r24, 0x33	; 51
    11d8:	48 f0       	brcs	.+18     	; 0x11ec <main+0xb8>
    11da:	21 df       	rcall	.-446    	; 0x101e <dispStatus>
			{
               //dispFLAGS();
				dispStatus();
    11dc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
				refreshTime = runTime_d;	
    11e0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    11e4:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <refreshTime+0x1>
    11e8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <refreshTime>
    11ec:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
    11f0:	88 23       	and	r24, r24
    11f2:	19 f3       	breq	.-58     	; 0x11ba <main+0x86>
    11f4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
		{
			if(countSort != countPart)
    11f8:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    11fc:	98 17       	cp	r25, r24
    11fe:	49 f0       	breq	.+18     	; 0x1212 <main+0xde>
    1200:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
			{
				rampTime_d = runTime_d;	
    1204:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1208:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    120c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
    1210:	d4 cf       	rjmp	.-88     	; 0x11ba <main+0x86>
    1212:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
    1216:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    121a:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <rampTime_d>
    121e:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <rampTime_d+0x1>
    1222:	82 1b       	sub	r24, r18
    1224:	93 0b       	sbc	r25, r19
    1226:	81 3a       	cpi	r24, 0xA1	; 161
    1228:	9f 40       	sbci	r25, 0x0F	; 15
    122a:	38 f2       	brcs	.-114    	; 0x11ba <main+0x86>
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
    122c:	20 c0       	rjmp	.+64     	; 0x126e <main+0x13a>
    122e:	09 dd       	rcall	.-1518   	; 0xc42 <brakeMotor>
	
	while((PIND & 0x01) == 0x00);
    1230:	48 9b       	sbis	0x09, 0	; 9
    1232:	fe cf       	rjmp	.-4      	; 0x1230 <main+0xfc>
	stepStop();
    1234:	98 da       	rcall	.-2768   	; 0x766 <stepStop>
	runTimerStop();
    1236:	4f de       	rcall	.-866    	; 0xed6 <runTimerStop>
    1238:	cd b3       	in	r28, 0x1d	; 29
	uint8_t INTState = EIMSK;
    123a:	81 e0       	ldi	r24, 0x01	; 1
	EIMSK = 0x01;
    123c:	8d bb       	out	0x1d, r24	; 29
    123e:	ec e6       	ldi	r30, 0x6C	; 108
	PCMSK1 &= ~_BV(PCINT9);
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	80 83       	st	Z, r24
    1248:	fc dc       	rcall	.-1544   	; 0xc42 <brakeMotor>
	brakeMotor();
    124a:	c6 d9       	rcall	.-3188   	; 0x5d8 <stepRes>
    124c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
	//stopMotor();
	stepRes();
	//dispStatus();
	while(!ENABLE)
    1250:	88 23       	and	r24, r24
    1252:	e1 f3       	breq	.-8      	; 0x124c <main+0x118>
	{
	}
	
	while((PIND & 0x01) == 0x00);
    1254:	48 9b       	sbis	0x09, 0	; 9
    1256:	fe cf       	rjmp	.-4      	; 0x1254 <main+0x120>
	EIMSK = INTState;
	PCMSK1 |= _BV(PCINT9);
    1258:	cd bb       	out	0x1d, r28	; 29
    125a:	ec e6       	ldi	r30, 0x6C	; 108
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	82 60       	ori	r24, 0x02	; 2
	runTimerResume();
    1262:	80 83       	st	Z, r24
    1264:	3e de       	rcall	.-900    	; 0xee2 <runTimerResume>
	stepStart();
    1266:	68 da       	rcall	.-2864   	; 0x738 <stepStart>
    1268:	d1 dc       	rcall	.-1630   	; 0xc0c <runMotor>
	runMotor();
    126a:	3b de       	rcall	.-906    	; 0xee2 <runTimerResume>
    126c:	a6 cf       	rjmp	.-180    	; 0x11ba <main+0x86>
	runTimerResume();
    126e:	f8 94       	cli
    1270:	15 b8       	out	0x05, r1	; 5
	
goto STANDBY;
    1272:	12 b8       	out	0x02, r1	; 2
	
	
	
	
SHUTDOWN:
	cli();
    1274:	61 de       	rcall	.-830    	; 0xf38 <dispComplete>
	PORTB = 0x00;
    1276:	ff cf       	rjmp	.-2      	; 0x1276 <main+0x142>

00001278 <__vector_2>:
	PORTA = 0x00;
    1278:	1f 92       	push	r1
	
	dispComplete();
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
    1280:	11 24       	eor	r1, r1
    1282:	0b b6       	in	r0, 0x3b	; 59
    1284:	0f 92       	push	r0
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
	if(ORFLAG){
    12a2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    12a6:	88 23       	and	r24, r24
    12a8:	69 f1       	breq	.+90     	; 0x1304 <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
    12aa:	44 e1       	ldi	r20, 0x14	; 20
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	81 dd       	rcall	.-1278   	; 0xdb4 <debounce>
    12b2:	88 23       	and	r24, r24
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <__vector_2+0x40>
    12b6:	79 c0       	rjmp	.+242    	; 0x13aa <__vector_2+0x132>
			ORFLAG  = 0; //Part has entered OR
    12b8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1);
    12bc:	8d b3       	in	r24, 0x1d	; 29
    12be:	8d 7f       	andi	r24, 0xFD	; 253
    12c0:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
    12c2:	e9 e6       	ldi	r30, 0x69	; 105
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8b 7f       	andi	r24, 0xFB	; 251
    12ca:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    12cc:	8d b3       	in	r24, 0x1d	; 29
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
    12d2:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <countADC+0x1>
    12d6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <countADC>
			adcPart = 1023;
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	93 e0       	ldi	r25, 0x03	; 3
    12de:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    12e2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
		
			ADCSRA |=_BV(ADSC);
    12e6:	ea e7       	ldi	r30, 0x7A	; 122
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 64       	ori	r24, 0x40	; 64
		
			motorTimerStart();//slow down motor on approach
    12ee:	80 83       	st	Z, r24
    12f0:	c5 dc       	rcall	.-1654   	; 0xc7c <motorTimerStart>
			ORTime_s = runTime_d;
    12f2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    12f6:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    12fa:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ORTime_s+0x1>
    12fe:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ORTime_s>
    1302:	53 c0       	rjmp	.+166    	; 0x13aa <__vector_2+0x132>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    1304:	44 e1       	ldi	r20, 0x14	; 20
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	54 dd       	rcall	.-1368   	; 0xdb4 <debounce>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <__vector_2+0x9a>
    1310:	4c c0       	rjmp	.+152    	; 0x13aa <__vector_2+0x132>
    1312:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1316:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    131a:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <ORTime_s>
    131e:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <ORTime_s+0x1>
    1322:	82 1b       	sub	r24, r18
    1324:	93 0b       	sbc	r25, r19
    1326:	06 97       	sbiw	r24, 0x06	; 6
    1328:	08 f4       	brcc	.+2      	; 0x132c <__vector_2+0xb4>
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <__vector_2+0x132>
			ORFLAG  = 1;//Part has cleared OR	
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    1332:	8d b3       	in	r24, 0x1d	; 29
    1334:	8d 7f       	andi	r24, 0xFD	; 253
    1336:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    1338:	e9 e6       	ldi	r30, 0x69	; 105
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	84 60       	ori	r24, 0x04	; 4
    1340:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    1342:	8d b3       	in	r24, 0x1d	; 29
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    1348:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    134c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    1350:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcDisp+0x1>
    1354:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    1358:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    135c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    1360:	82 3f       	cpi	r24, 0xF2	; 242
    1362:	93 40       	sbci	r25, 0x03	; 3
    1364:	10 f5       	brcc	.+68     	; 0x13aa <__vector_2+0x132>
    1366:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    136a:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    136e:	c3 97       	sbiw	r24, 0x33	; 51
    1370:	e0 f0       	brcs	.+56     	; 0x13aa <__vector_2+0x132>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    1372:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <countPart>
    1376:	d0 e0       	ldi	r29, 0x00	; 0
    1378:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    137c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    1380:	f2 dc       	rcall	.-1564   	; 0xd66 <classify>
    1382:	cd 52       	subi	r28, 0x2D	; 45
    1384:	dd 4f       	sbci	r29, 0xFD	; 253
    1386:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    1388:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countPart>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <countPart>
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ad 52       	subi	r26, 0x2D	; 45
    1396:	bd 4f       	sbci	r27, 0xFD	; 253
    1398:	8c 91       	ld	r24, X
    139a:	ec 52       	subi	r30, 0x2C	; 44
    139c:	fd 4f       	sbci	r31, 0xFD	; 253
    139e:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    13a0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    13aa:	8c b3       	in	r24, 0x1c	; 28
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	8c bb       	out	0x1c, r24	; 28
}//OR
    13b0:	ff 91       	pop	r31
    13b2:	ef 91       	pop	r30
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <__vector_3>:




//EX ISR //547cycles
ISR(INT2_vect){
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	0b b6       	in	r0, 0x3b	; 59
    13e6:	0f 92       	push	r0
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
	
	if(!EXFLAG)
    1400:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <EXFLAG>
    1404:	81 11       	cpse	r24, r1
    1406:	29 c0       	rjmp	.+82     	; 0x145a <__vector_3+0x80>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    1408:	44 e1       	ldi	r20, 0x14	; 20
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	d2 dc       	rcall	.-1628   	; 0xdb4 <debounce>
    1410:	88 23       	and	r24, r24
    1412:	09 f4       	brne	.+2      	; 0x1416 <__vector_3+0x3c>
    1414:	85 c0       	rjmp	.+266    	; 0x1520 <__vector_3+0x146>
			{
				EXFLAG =1;//Part is at EX
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <EXFLAG>
				EIMSK &= ~_BV(INT2);
    141c:	8d b3       	in	r24, 0x1d	; 29
    141e:	8b 7f       	andi	r24, 0xFB	; 251
    1420:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    1422:	e9 e6       	ldi	r30, 0x69	; 105
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    142c:	8d b3       	in	r24, 0x1d	; 29
    142e:	84 60       	ori	r24, 0x04	; 4
    1430:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    1432:	8c b3       	in	r24, 0x1c	; 28
    1434:	84 60       	ori	r24, 0x04	; 4
    1436:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;
    1438:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <SORTFLAG>
				enterdropTime = ENTER_DROP_TIME;
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e5       	ldi	r25, 0x50	; 80
    1440:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    1444:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
				EXTime_s = runTime_d;
    1448:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    144c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1450:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    1454:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
    1458:	63 c0       	rjmp	.+198    	; 0x1520 <__vector_3+0x146>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME))
    145a:	44 e1       	ldi	r20, 0x14	; 20
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	a9 dc       	rcall	.-1710   	; 0xdb4 <debounce>
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <__vector_3+0x8e>
    1466:	5c c0       	rjmp	.+184    	; 0x1520 <__vector_3+0x146>
    1468:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    146c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1470:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <EXTime_s>
    1474:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <EXTime_s+0x1>
    1478:	82 1b       	sub	r24, r18
    147a:	93 0b       	sbc	r25, r19
    147c:	06 97       	sbiw	r24, 0x06	; 6
    147e:	08 f4       	brcc	.+2      	; 0x1482 <__vector_3+0xa8>
    1480:	4f c0       	rjmp	.+158    	; 0x1520 <__vector_3+0x146>
		{
				EXFLAG = 0;
    1482:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <EXFLAG>
				EIMSK &= ~_BV(INT2);
    1486:	8d b3       	in	r24, 0x1d	; 29
    1488:	8b 7f       	andi	r24, 0xFB	; 251
    148a:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    148c:	e9 e6       	ldi	r30, 0x69	; 105
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 7e       	andi	r24, 0xEF	; 239
    1494:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    1496:	8d b3       	in	r24, 0x1d	; 29
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    149c:	8c b3       	in	r24, 0x1c	; 28
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	8c bb       	out	0x1c, r24	; 28
                
				if(countSort<countPart)
    14a2:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
    14a6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    14aa:	98 17       	cp	r25, r24
    14ac:	38 f4       	brcc	.+14     	; 0x14bc <__vector_3+0xe2>
				{//if we won't overrun the array
					countSort+=1;//go to next part
    14ae:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <countSort>
					TARGETFLAG =0;//New target; reset flag
    14b8:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION)
    14bc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
    14c0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
    14c4:	99 23       	and	r25, r25
    14c6:	1c f4       	brge	.+6      	; 0x14ce <__vector_3+0xf4>
    14c8:	91 95       	neg	r25
    14ca:	81 95       	neg	r24
    14cc:	91 09       	sbc	r25, r1
    14ce:	40 97       	sbiw	r24, 0x10	; 16
    14d0:	24 f0       	brlt	.+8      	; 0x14da <__vector_3+0x100>
				{//Current Error is for count-1 at this point
					SLIPFLAG = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <SLIPFLAG>
				}else
				{
					runMotor();
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <__vector_3+0x102>
    14da:	98 db       	rcall	.-2256   	; 0xc0c <runMotor>
				}
				
				if(DROPFLAG)
    14dc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <DROPFLAG>
    14e0:	88 23       	and	r24, r24
    14e2:	21 f0       	breq	.+8      	; 0x14ec <__vector_3+0x112>
				{//if the next piece is falling before previous piece has hit
					DROPFLAG = 0;
    14e4:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <DROPFLAG>
					PAUSEFLAG = 0;//MUST RESET THE PAUSE FLAG
    14e8:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
				}
				DROPFLAG = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <DROPFLAG>
				dropTime = DROP_TIME - (OCR3A - TCNT3);        
    14f2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    14f6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    14fa:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    14fe:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    1502:	82 1b       	sub	r24, r18
    1504:	93 0b       	sbc	r25, r19
    1506:	90 5c       	subi	r25, 0xC0	; 192
    1508:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    150c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
			EXTime_s = runTime_d;	
    1510:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1514:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1518:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    151c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
		}//HI
	}	
}//EX
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	0b b6       	in	r0, 0x3b	; 59
    1552:	0f 92       	push	r0
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    156c:	0e 94 c0 01 	call	0x380	; 0x380 <step>
	stepUpdateError(); //calculate the stepper position error
    1570:	0e 94 06 02 	call	0x40c	; 0x40c <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
    1574:	0e 94 80 02 	call	0x500	; 0x500 <stepUpdateDir>
	stepUpdateDelay(); //update the stepper speed
    1578:	3a d8       	rcall	.-3980   	; 0x5ee <stepUpdateDelay>
//CONTROL STEPPER
//CONTROL MOTOR

	if(SORTFLAG)
    157a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <SORTFLAG>
    157e:	88 23       	and	r24, r24
    1580:	71 f0       	breq	.+28     	; 0x159e <__vector_32+0x58>
	{
		
		if(CalcEnterTime())
    1582:	6e da       	rcall	.-2852   	; 0xa60 <CalcEnterTime>
    1584:	88 23       	and	r24, r24
    1586:	41 f0       	breq	.+16     	; 0x1598 <__vector_32+0x52>
		{
			brakeMotor();
    1588:	5c db       	rcall	.-2376   	; 0xc42 <brakeMotor>
    158a:	80 e0       	ldi	r24, 0x00	; 0
			enterdropTime = BRAKE_DROP_TIME;
    158c:	90 e4       	ldi	r25, 0x40	; 64
    158e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    1592:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
    1596:	03 c0       	rjmp	.+6      	; 0x159e <__vector_32+0x58>
    1598:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <SORTFLAG>
		}else
		{
			SORTFLAG = 0;
			runMotor();
    159c:	37 db       	rcall	.-2450   	; 0xc0c <runMotor>
    159e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <DROPFLAG>
		}
    }
	
	if(DROPFLAG)
    15a2:	88 23       	and	r24, r24
    15a4:	39 f1       	breq	.+78     	; 0x15f4 <__vector_32+0xae>
    15a6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <dropTime>
	{
		if(dropTime<CurDelay)
    15aa:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <dropTime+0x1>
    15ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
    15b2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	28 f4       	brcc	.+10     	; 0x15c6 <__vector_32+0x80>
    15bc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <DROPFLAG>
		{
			DROPFLAG = 0;
    15c0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
			PAUSEFLAG = 0;
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <__vector_32+0x9c>
    15c6:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
			
		}else
		{
			dropTime -=CurDelay;
    15ca:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
    15ce:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
    15d2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
    15d6:	82 1b       	sub	r24, r18
    15d8:	93 0b       	sbc	r25, r19
    15da:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    15de:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
		}
		
		if(CalcExitTime())
    15e2:	80 d9       	rcall	.-3328   	; 0x8e4 <CalcExitTime>
    15e4:	88 23       	and	r24, r24
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <__vector_32+0xaa>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
		{
			PAUSEFLAG = 1;
    15ea:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <PAUSEFLAG>
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <__vector_32+0xae>
    15f0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <PAUSEFLAG>
		}else
		{	
			PAUSEFLAG = 0;
    15f4:	ff 91       	pop	r31
		}
		
	}
}//stepTimer
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0b be       	out	0x3b, r0	; 59
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_29>:
    161a:	1f 92       	push	r1
	



//ADC ISR
ISR(ADC_vect){
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	0b b6       	in	r0, 0x3b	; 59
    1626:	0f 92       	push	r0
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    1634:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    163e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	adcTemp+= (ADCH<<8);
    1642:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	98 2f       	mov	r25, r24
    164a:	88 27       	eor	r24, r24
    164c:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    1650:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    165c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	countADC+=1;
    1660:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    1664:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <countADC+0x1>
    166e:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <countADC>
	
	if(adcTemp<adcPart){
    1672:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    1676:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    167a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    167e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    1682:	28 17       	cp	r18, r24
    1684:	39 07       	cpc	r19, r25
    1686:	40 f4       	brcc	.+16     	; 0x1698 <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    1688:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcTemp>
    168c:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcTemp+0x1>
    1690:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    1694:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
	}
	
	if(!ORFLAG){
    1698:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    169c:	81 11       	cpse	r24, r1
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    16a0:	ea e7       	ldi	r30, 0x7A	; 122
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 64       	ori	r24, 0x40	; 64
    16a8:	80 83       	st	Z, r24
	}
}//ADC
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	0f 90       	pop	r0
    16b8:	0b be       	out	0x3b, r0	; 59
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
    16ce:	0b b6       	in	r0, 0x3b	; 59
    16d0:	0f 92       	push	r0
    16d2:	2f 93       	push	r18
    16d4:	3f 93       	push	r19
    16d6:	4f 93       	push	r20
    16d8:	5f 93       	push	r21
    16da:	6f 93       	push	r22
    16dc:	7f 93       	push	r23
    16de:	8f 93       	push	r24
    16e0:	9f 93       	push	r25
    16e2:	af 93       	push	r26
    16e4:	bf 93       	push	r27
    16e6:	ef 93       	push	r30
    16e8:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    16ea:	44 e1       	ldi	r20, 0x14	; 20
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	61 db       	rcall	.-2366   	; 0xdb4 <debounce>
    16f2:	88 23       	and	r24, r24
    16f4:	31 f0       	breq	.+12     	; 0x1702 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    16f6:	82 e3       	ldi	r24, 0x32	; 50
    16f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <HALLSENSOR>
	}
}//HE
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0b be       	out	0x3b, r0	; 59
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	0b b6       	in	r0, 0x3b	; 59
    1734:	0f 92       	push	r0
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	2f db       	rcall	.-2466   	; 0xdb4 <debounce>
    1756:	88 23       	and	r24, r24
    1758:	51 f0       	breq	.+20     	; 0x176e <__vector_1+0x46>
		if(ENABLE)
    175a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
    175e:	88 23       	and	r24, r24
    1760:	19 f0       	breq	.+6      	; 0x1768 <__vector_1+0x40>
		{
			ENABLE = 0;
    1762:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <ENABLE>
    1766:	03 c0       	rjmp	.+6      	; 0x176e <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ENABLE>
		}
	}
}//ISR Pause Button
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0b be       	out	0x3b, r0	; 59
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__vector_10>:

ISR(PCINT1_vect)
{
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	0f 92       	push	r0
    179c:	11 24       	eor	r1, r1
    179e:	0b b6       	in	r0, 0x3b	; 59
    17a0:	0f 92       	push	r0
    17a2:	2f 93       	push	r18
    17a4:	3f 93       	push	r19
    17a6:	4f 93       	push	r20
    17a8:	5f 93       	push	r21
    17aa:	6f 93       	push	r22
    17ac:	7f 93       	push	r23
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
    17b2:	af 93       	push	r26
    17b4:	bf 93       	push	r27
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    17ba:	4a ef       	ldi	r20, 0xFA	; 250
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	2c db       	rcall	.-2472   	; 0xe1a <debouncePINJ>
    17c2:	88 23       	and	r24, r24
    17c4:	59 f0       	breq	.+22     	; 0x17dc <__vector_10+0x48>
		RAMPDOWN = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <RAMPDOWN>
		rampTime_d = runTime_d;	
    17cc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    17d0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    17d4:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    17d8:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
	}
}//ISR Ramp Button
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0b be       	out	0x3b, r0	; 59
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__divmodhi4>:
    1802:	97 fb       	bst	r25, 7
    1804:	07 2e       	mov	r0, r23
    1806:	16 f4       	brtc	.+4      	; 0x180c <__divmodhi4+0xa>
    1808:	00 94       	com	r0
    180a:	06 d0       	rcall	.+12     	; 0x1818 <__divmodhi4_neg1>
    180c:	77 fd       	sbrc	r23, 7
    180e:	08 d0       	rcall	.+16     	; 0x1820 <__divmodhi4_neg2>
    1810:	1a d0       	rcall	.+52     	; 0x1846 <__udivmodhi4>
    1812:	07 fc       	sbrc	r0, 7
    1814:	05 d0       	rcall	.+10     	; 0x1820 <__divmodhi4_neg2>
    1816:	3e f4       	brtc	.+14     	; 0x1826 <__divmodhi4_exit>

00001818 <__divmodhi4_neg1>:
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	08 95       	ret

00001820 <__divmodhi4_neg2>:
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255

00001826 <__divmodhi4_exit>:
    1826:	08 95       	ret

00001828 <__umulhisi3>:
    1828:	a2 9f       	mul	r26, r18
    182a:	b0 01       	movw	r22, r0
    182c:	b3 9f       	mul	r27, r19
    182e:	c0 01       	movw	r24, r0
    1830:	a3 9f       	mul	r26, r19
    1832:	70 0d       	add	r23, r0
    1834:	81 1d       	adc	r24, r1
    1836:	11 24       	eor	r1, r1
    1838:	91 1d       	adc	r25, r1
    183a:	b2 9f       	mul	r27, r18
    183c:	70 0d       	add	r23, r0
    183e:	81 1d       	adc	r24, r1
    1840:	11 24       	eor	r1, r1
    1842:	91 1d       	adc	r25, r1
    1844:	08 95       	ret

00001846 <__udivmodhi4>:
    1846:	aa 1b       	sub	r26, r26
    1848:	bb 1b       	sub	r27, r27
    184a:	51 e1       	ldi	r21, 0x11	; 17
    184c:	07 c0       	rjmp	.+14     	; 0x185c <__udivmodhi4_ep>

0000184e <__udivmodhi4_loop>:
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	a6 17       	cp	r26, r22
    1854:	b7 07       	cpc	r27, r23
    1856:	10 f0       	brcs	.+4      	; 0x185c <__udivmodhi4_ep>
    1858:	a6 1b       	sub	r26, r22
    185a:	b7 0b       	sbc	r27, r23

0000185c <__udivmodhi4_ep>:
    185c:	88 1f       	adc	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	5a 95       	dec	r21
    1862:	a9 f7       	brne	.-22     	; 0x184e <__udivmodhi4_loop>
    1864:	80 95       	com	r24
    1866:	90 95       	com	r25
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	08 95       	ret

0000186e <_exit>:
    186e:	f8 94       	cli

00001870 <__stop_program>:
    1870:	ff cf       	rjmp	.-2      	; 0x1870 <__stop_program>
