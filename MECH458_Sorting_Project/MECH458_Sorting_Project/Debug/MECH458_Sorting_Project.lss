
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00001226  000012ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e5  0080021e  0080021e  000012d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a2  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e0  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130d  00000000  00000000  0000497a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  00005c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000991  00000000  00000000  000061b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff3  00000000  00000000  00006b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c6       	rjmp	.+3290   	; 0xce0 <__vector_1>
       6:	00 00       	nop
       8:	a3 c6       	rjmp	.+3398   	; 0xd50 <__vector_2>
       a:	00 00       	nop
       c:	52 c7       	rjmp	.+3748   	; 0xeb2 <__vector_3>
       e:	00 00       	nop
      10:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a6 c7       	rjmp	.+3916   	; 0xfce <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c4       	rjmp	.+2520   	; 0xa82 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ec c3       	rjmp	.+2008   	; 0x896 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 30       	cpi	r26, 0x03	; 3
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	80 d5       	rcall	.+2816   	; 0xc20 <main>
     120:	0c 94 11 09 	jmp	0x1222	; 0x1222 <_exit>

00000124 <__bad_interrupt>:
     124:	c5 c4       	rjmp	.+2442   	; 0xab0 <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	6b d7       	rcall	.+3798   	; 0x11b6 <__divmodhi4>
     2e0:	e1 e0       	ldi	r30, 0x01	; 1
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	80 83       	st	Z, r24
	val=val/10;
     2ee:	86 2f       	mov	r24, r22
     2f0:	97 2f       	mov	r25, r23
	i--;
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	81 f7       	brne	.-32     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fa:	bf ef       	ldi	r27, 0xFF	; 255
     2fc:	eb 16       	cp	r14, r27
     2fe:	fb 06       	cpc	r15, r27
     300:	81 f4       	brne	.+32     	; 0x322 <LCDWriteInt+0x74>
     302:	03 c0       	rjmp	.+6      	; 0x30a <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	02 c0       	rjmp	.+4      	; 0x30e <LCDWriteInt+0x60>
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e0 0f       	add	r30, r16
     318:	f1 1f       	adc	r31, r17
     31a:	20 81       	ld	r18, Z
     31c:	22 23       	and	r18, r18
     31e:	91 f3       	breq	.-28     	; 0x304 <LCDWriteInt+0x56>
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     322:	05 e0       	ldi	r16, 0x05	; 5
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	0e 19       	sub	r16, r14
     328:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32a:	99 23       	and	r25, r25
     32c:	84 f4       	brge	.+32     	; 0x34e <LCDWriteInt+0xa0>
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	8d e2       	ldi	r24, 0x2D	; 45
     332:	38 df       	rcall	.-400    	; 0x1a4 <LCDByte>
     334:	0c c0       	rjmp	.+24     	; 0x34e <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e0 0f       	add	r30, r16
     340:	f1 1f       	adc	r31, r17
     342:	80 81       	ld	r24, Z
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	2d df       	rcall	.-422    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	05 30       	cpi	r16, 0x05	; 5
     350:	11 05       	cpc	r17, r1
     352:	8c f3       	brlt	.-30     	; 0x336 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36c:	88 32       	cpi	r24, 0x28	; 40
     36e:	28 f4       	brcc	.+10     	; 0x37a <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     370:	61 11       	cpse	r22, r1
     372:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 68       	ori	r24, 0x80	; 128
     378:	15 cf       	rjmp	.-470    	; 0x1a4 <LCDByte>
     37a:	08 95       	ret

0000037c <step>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
	TCCR3B &=~_BV(CS30);
     37c:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__data_end>
     380:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Dir>
     384:	89 0f       	add	r24, r25
     386:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
     38a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     38e:	84 30       	cpi	r24, 0x04	; 4
     390:	1c f0       	brlt	.+6      	; 0x398 <step+0x1c>
     392:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
     396:	07 c0       	rjmp	.+14     	; 0x3a6 <step+0x2a>
     398:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     39c:	88 23       	and	r24, r24
     39e:	1c f4       	brge	.+6      	; 0x3a6 <step+0x2a>
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
     3a6:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <__data_end>
     3aa:	0e 2e       	mov	r0, r30
     3ac:	00 0c       	add	r0, r0
     3ae:	ff 0b       	sbc	r31, r31
     3b0:	ef 5f       	subi	r30, 0xFF	; 255
     3b2:	fd 4f       	sbci	r31, 0xFD	; 253
     3b4:	80 81       	ld	r24, Z
     3b6:	82 b9       	out	0x02, r24	; 2
     3b8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     3bc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Dir>
     3c0:	89 0f       	add	r24, r25
     3c2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurPosition>
     3c6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     3ca:	89 3c       	cpi	r24, 0xC9	; 201
     3cc:	50 f0       	brcs	.+20     	; 0x3e2 <step+0x66>
     3ce:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Dir>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	31 f4       	brne	.+12     	; 0x3e2 <step+0x66>
     3d6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     3da:	88 5c       	subi	r24, 0xC8	; 200
     3dc:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurPosition>
     3e0:	0d c0       	rjmp	.+26     	; 0x3fc <step+0x80>
     3e2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     3e6:	82 33       	cpi	r24, 0x32	; 50
     3e8:	48 f4       	brcc	.+18     	; 0x3fc <step+0x80>
     3ea:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Dir>
     3ee:	8f 3f       	cpi	r24, 0xFF	; 255
     3f0:	29 f4       	brne	.+10     	; 0x3fc <step+0x80>
     3f2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     3f6:	88 53       	subi	r24, 0x38	; 56
     3f8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurPosition>
     3fc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     400:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	08 95       	ret

00000408 <stepUpdateDelay>:
     408:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Steps2Acc>
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <CurError>
     412:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <CurError+0x1>
     416:	33 23       	and	r19, r19
     418:	1c f4       	brge	.+6      	; 0x420 <stepUpdateDelay+0x18>
     41a:	31 95       	neg	r19
     41c:	21 95       	neg	r18
     41e:	31 09       	sbc	r19, r1
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	24 f4       	brge	.+8      	; 0x42e <stepUpdateDelay+0x26>
     426:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DECELFLAG>
     42a:	88 23       	and	r24, r24
     42c:	81 f1       	breq	.+96     	; 0x48e <stepUpdateDelay+0x86>
     42e:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <accSteps>
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ee 0f       	add	r30, r30
     436:	ff 1f       	adc	r31, r31
     438:	e5 5c       	subi	r30, 0xC5	; 197
     43a:	fd 4f       	sbci	r31, 0xFD	; 253
     43c:	20 81       	ld	r18, Z
     43e:	31 81       	ldd	r19, Z+1	; 0x01
     440:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     444:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     450:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
     454:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     458:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	9a 40       	sbci	r25, 0x0A	; 10
     460:	58 f0       	brcs	.+22     	; 0x478 <stepUpdateDelay+0x70>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	9a e0       	ldi	r25, 0x0A	; 10
     466:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     46a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
     46e:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <accSteps>
     472:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <DECELFLAG>
     476:	44 c0       	rjmp	.+136    	; 0x500 <stepUpdateDelay+0xf8>
     478:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <accSteps>
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <stepUpdateDelay+0x7a>
     480:	3f c0       	rjmp	.+126    	; 0x500 <stepUpdateDelay+0xf8>
     482:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <accSteps>
     486:	81 50       	subi	r24, 0x01	; 1
     488:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <accSteps>
     48c:	39 c0       	rjmp	.+114    	; 0x500 <stepUpdateDelay+0xf8>
     48e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     492:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     496:	81 38       	cpi	r24, 0x81	; 129
     498:	93 40       	sbci	r25, 0x03	; 3
     49a:	e0 f1       	brcs	.+120    	; 0x514 <stepUpdateDelay+0x10c>
     49c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     4a0:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     4a4:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <accSteps>
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e5 5c       	subi	r30, 0xC5	; 197
     4b0:	fd 4f       	sbci	r31, 0xFD	; 253
     4b2:	20 81       	ld	r18, Z
     4b4:	31 81       	ldd	r19, Z+1	; 0x01
     4b6:	82 1b       	sub	r24, r18
     4b8:	93 0b       	sbc	r25, r19
     4ba:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     4be:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
     4c2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     4c6:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     4ca:	81 38       	cpi	r24, 0x81	; 129
     4cc:	93 40       	sbci	r25, 0x03	; 3
     4ce:	38 f0       	brcs	.+14     	; 0x4de <stepUpdateDelay+0xd6>
     4d0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     4d4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	9a 40       	sbci	r25, 0x0A	; 10
     4dc:	30 f0       	brcs	.+12     	; 0x4ea <stepUpdateDelay+0xe2>
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     4e6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
     4ea:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <accSteps>
     4ee:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Steps2Acc>
     4f2:	98 17       	cp	r25, r24
     4f4:	28 f4       	brcc	.+10     	; 0x500 <stepUpdateDelay+0xf8>
     4f6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <accSteps>
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <accSteps>
     500:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     504:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     508:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     50c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	08 95       	ret
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	08 95       	ret

00000518 <stepRes>:
     518:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <accSteps>
     51c:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <StepsDelta>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	9a e0       	ldi	r25, 0x0A	; 10
     524:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     528:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
     52c:	08 95       	ret

0000052e <stepUpdateDir>:
     52e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DECELFLAG>
     532:	81 11       	cpse	r24, r1
     534:	70 c0       	rjmp	.+224    	; 0x616 <stepUpdateDir+0xe8>
     536:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     53a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     53e:	89 2b       	or	r24, r25
     540:	89 f4       	brne	.+34     	; 0x564 <stepUpdateDir+0x36>
     542:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     546:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     54a:	81 15       	cp	r24, r1
     54c:	9a 40       	sbci	r25, 0x0A	; 10
     54e:	29 f0       	breq	.+10     	; 0x55a <stepUpdateDir+0x2c>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <DECELFLAG>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	08 95       	ret
     55a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Dir>
     55e:	dc df       	rcall	.-72     	; 0x518 <stepRes>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	08 95       	ret
     564:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     568:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     56c:	85 36       	cpi	r24, 0x65	; 101
     56e:	91 05       	cpc	r25, r1
     570:	24 f0       	brlt	.+8      	; 0x57a <stepUpdateDir+0x4c>
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     578:	30 c0       	rjmp	.+96     	; 0x5da <stepUpdateDir+0xac>
     57a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     57e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     582:	8c 39       	cpi	r24, 0x9C	; 156
     584:	9f 4f       	sbci	r25, 0xFF	; 255
     586:	24 f4       	brge	.+8      	; 0x590 <stepUpdateDir+0x62>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     58e:	25 c0       	rjmp	.+74     	; 0x5da <stepUpdateDir+0xac>
     590:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     594:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     598:	99 23       	and	r25, r25
     59a:	1c f4       	brge	.+6      	; 0x5a2 <stepUpdateDir+0x74>
     59c:	91 95       	neg	r25
     59e:	81 95       	neg	r24
     5a0:	91 09       	sbc	r25, r1
     5a2:	84 36       	cpi	r24, 0x64	; 100
     5a4:	91 05       	cpc	r25, r1
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <stepUpdateDir+0x84>
     5a8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Dir>
     5ac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     5b0:	14 c0       	rjmp	.+40     	; 0x5da <stepUpdateDir+0xac>
     5b2:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <CurError>
     5b6:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <CurError+0x1>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	12 16       	cp	r1, r18
     5be:	13 06       	cpc	r1, r19
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <stepUpdateDir+0x96>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <CurError>
     5c8:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <CurError+0x1>
     5cc:	93 2f       	mov	r25, r19
     5ce:	99 1f       	adc	r25, r25
     5d0:	99 27       	eor	r25, r25
     5d2:	99 1f       	adc	r25, r25
     5d4:	89 1b       	sub	r24, r25
     5d6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     5da:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CurDelay>
     5de:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CurDelay+0x1>
     5e2:	81 15       	cp	r24, r1
     5e4:	9a 40       	sbci	r25, 0x0A	; 10
     5e6:	30 f0       	brcs	.+12     	; 0x5f4 <stepUpdateDir+0xc6>
     5e8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     5ec:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <Dir>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	08 95       	ret
     5f4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     5f8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Dir>
     5fc:	98 13       	cpse	r25, r24
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <stepUpdateDir+0xde>
     600:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     604:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <Dir>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <DECELFLAG>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	08 95       	ret

0000061a <stepTimer_init>:
     61a:	e1 e9       	ldi	r30, 0x91	; 145
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	88 60       	ori	r24, 0x08	; 8
     622:	80 83       	st	Z, r24
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     62c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
     630:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     634:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     638:	e1 e7       	ldi	r30, 0x71	; 113
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	80 83       	st	Z, r24
     642:	08 95       	ret

00000644 <stepStart>:
     644:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     648:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	3a e0       	ldi	r19, 0x0A	; 10
     650:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     654:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
     658:	e1 e9       	ldi	r30, 0x91	; 145
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	83 60       	ori	r24, 0x03	; 3
     660:	80 83       	st	Z, r24
     662:	88 b3       	in	r24, 0x18	; 24
     664:	82 60       	ori	r24, 0x02	; 2
     666:	88 bb       	out	0x18, r24	; 24
     668:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <StepsDelta>
     66c:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <CurDelay+0x1>
     670:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <CurDelay>
     674:	08 95       	ret

00000676 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     676:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <CurAcc+0x1>
     67a:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	24 c0       	rjmp	.+72     	; 0x6d0 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     688:	fc 01       	movw	r30, r24
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e5 5c       	subi	r30, 0xC5	; 197
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	40 81       	ld	r20, Z
     696:	51 81       	ldd	r21, Z+1	; 0x01
     698:	24 1b       	sub	r18, r20
     69a:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     69c:	40 81       	ld	r20, Z
     69e:	51 81       	ldd	r21, Z+1	; 0x01
     6a0:	40 5e       	subi	r20, 0xE0	; 224
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	fc 01       	movw	r30, r24
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	e5 5c       	subi	r30, 0xC5	; 197
     6ac:	fd 4f       	sbci	r31, 0xFD	; 253
     6ae:	51 83       	std	Z+1, r21	; 0x01
     6b0:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     6b2:	40 81       	ld	r20, Z
     6b4:	51 81       	ldd	r21, Z+1	; 0x01
     6b6:	41 38       	cpi	r20, 0x81	; 129
     6b8:	51 05       	cpc	r21, r1
     6ba:	48 f0       	brcs	.+18     	; 0x6ce <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e5 5c       	subi	r30, 0xC5	; 197
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	51 83       	std	Z+1, r21	; 0x01
     6cc:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	91 05       	cpc	r25, r1
     6d4:	c8 f2       	brcs	.-78     	; 0x688 <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     6d6:	fc 01       	movw	r30, r24
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e5 5c       	subi	r30, 0xC5	; 197
     6de:	fd 4f       	sbci	r31, 0xFD	; 253
     6e0:	40 e8       	ldi	r20, 0x80	; 128
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	51 83       	std	Z+1, r21	; 0x01
     6e6:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     6e8:	1a c0       	rjmp	.+52     	; 0x71e <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     6ea:	fc 01       	movw	r30, r24
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	e5 5c       	subi	r30, 0xC5	; 197
     6f4:	fd 4f       	sbci	r31, 0xFD	; 253
     6f6:	40 81       	ld	r20, Z
     6f8:	51 81       	ldd	r21, Z+1	; 0x01
     6fa:	24 1b       	sub	r18, r20
     6fc:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     6fe:	20 38       	cpi	r18, 0x80	; 128
     700:	43 e0       	ldi	r20, 0x03	; 3
     702:	34 07       	cpc	r19, r20
     704:	10 f4       	brcc	.+4      	; 0x70a <stepCalcAcc+0x94>
			delay = MINDELAY;
     706:	20 e8       	ldi	r18, 0x80	; 128
     708:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
     70a:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     70c:	fc 01       	movw	r30, r24
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e5 5c       	subi	r30, 0xC5	; 197
     714:	fd 4f       	sbci	r31, 0xFD	; 253
     716:	40 e8       	ldi	r20, 0x80	; 128
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	51 83       	std	Z+1, r21	; 0x01
     71c:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     71e:	a9 01       	movw	r20, r18
     720:	40 58       	subi	r20, 0x80	; 128
     722:	51 40       	sbci	r21, 0x01	; 1
     724:	41 38       	cpi	r20, 0x81	; 129
     726:	53 40       	sbci	r21, 0x03	; 3
     728:	00 f7       	brcc	.-64     	; 0x6ea <stepCalcAcc+0x74>
     72a:	2a c0       	rjmp	.+84     	; 0x780 <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     72c:	ac 01       	movw	r20, r24
     72e:	4f 5f       	subi	r20, 0xFF	; 255
     730:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     732:	fc 01       	movw	r30, r24
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e5 5c       	subi	r30, 0xC5	; 197
     73a:	fd 4f       	sbci	r31, 0xFD	; 253
     73c:	60 81       	ld	r22, Z
     73e:	71 81       	ldd	r23, Z+1	; 0x01
     740:	26 1b       	sub	r18, r22
     742:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     744:	60 81       	ld	r22, Z
     746:	71 81       	ldd	r23, Z+1	; 0x01
     748:	60 32       	cpi	r22, 0x20	; 32
     74a:	71 05       	cpc	r23, r1
     74c:	48 f4       	brcc	.+18     	; 0x760 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     74e:	fa 01       	movw	r30, r20
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	e5 5c       	subi	r30, 0xC5	; 197
     756:	fd 4f       	sbci	r31, 0xFD	; 253
     758:	11 82       	std	Z+1, r1	; 0x01
     75a:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     75c:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     75e:	14 c0       	rjmp	.+40     	; 0x788 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	fc 01       	movw	r30, r24
     766:	e5 5c       	subi	r30, 0xC5	; 197
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	80 97       	sbiw	r24, 0x20	; 32
     770:	fa 01       	movw	r30, r20
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e5 5c       	subi	r30, 0xC5	; 197
     778:	fd 4f       	sbci	r31, 0xFD	; 253
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     77e:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     780:	21 38       	cpi	r18, 0x81	; 129
     782:	43 e0       	ldi	r20, 0x03	; 3
     784:	34 07       	cpc	r19, r20
     786:	90 f6       	brcc	.-92     	; 0x72c <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     788:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Steps2Acc>
     78c:	08 95       	ret

0000078e <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     78e:	73 df       	rcall	.-282    	; 0x676 <stepCalcAcc>
	CurDelay = MAXDELAY;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9a e0       	ldi	r25, 0x0A	; 10
     794:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CurDelay+0x1>
     798:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     79c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     7a0:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <CurPosition>
	Parts[0] = 255;//Set motor to spin 360
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <Parts>
	stepStart();//Start stepTimer
     7aa:	4c df       	rcall	.-360    	; 0x644 <stepStart>
	while(!HALLSENSOR){}//Wait for hall sensor to trigger
     7ac:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <HALLSENSOR>
     7b0:	88 23       	and	r24, r24
     7b2:	e1 f3       	breq	.-8      	; 0x7ac <stepCalibrate+0x1e>
	EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
     7b4:	8d b3       	in	r24, 0x1d	; 29
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	8d bb       	out	0x1d, r24	; 29
	Parts[0] = B_ID;
     7ba:	82 e3       	ldi	r24, 0x32	; 50
     7bc:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	accSteps = 0;
     7c0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <accSteps>
	//mTimer(1000);
	return 1;
}
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	08 95       	ret

000007c8 <startMotor>:
		return 0x01;
	}else
	{
		return 0x04;
	}
}
     7c8:	85 b1       	in	r24, 0x05	; 5
     7ca:	80 78       	andi	r24, 0x80	; 128
     7cc:	85 b9       	out	0x05, r24	; 5
     7ce:	85 b1       	in	r24, 0x05	; 5
     7d0:	8b 60       	ori	r24, 0x0B	; 11
     7d2:	85 b9       	out	0x05, r24	; 5
     7d4:	16 bc       	out	0x26, r1	; 38
     7d6:	88 ec       	ldi	r24, 0xC8	; 200
     7d8:	87 bd       	out	0x27, r24	; 39
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <MOTORFLAG>
     7e0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     7e4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     7e8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <MOTORFLAG>
     7ec:	08 95       	ret

000007ee <runMotor>:
     7ee:	85 b1       	in	r24, 0x05	; 5
     7f0:	80 78       	andi	r24, 0x80	; 128
     7f2:	85 b9       	out	0x05, r24	; 5
     7f4:	85 b1       	in	r24, 0x05	; 5
     7f6:	8b 60       	ori	r24, 0x0B	; 11
     7f8:	85 b9       	out	0x05, r24	; 5
     7fa:	16 bc       	out	0x26, r1	; 38
     7fc:	80 ea       	ldi	r24, 0xA0	; 160
     7fe:	87 bd       	out	0x27, r24	; 39
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <MOTORFLAG>
     806:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     80a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     80e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <MOTORFLAG>
     812:	08 95       	ret

00000814 <brakeMotor>:
     814:	85 b1       	in	r24, 0x05	; 5
     816:	80 78       	andi	r24, 0x80	; 128
     818:	85 b9       	out	0x05, r24	; 5
     81a:	85 b1       	in	r24, 0x05	; 5
     81c:	8f 60       	ori	r24, 0x0F	; 15
     81e:	85 b9       	out	0x05, r24	; 5
     820:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <MOTORFLAG>
     824:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <MOTORFLAG>
     828:	08 95       	ret

0000082a <stopMotor>:
     82a:	15 b8       	out	0x05, r1	; 5
     82c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <MOTORFLAG>
     830:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <MOTORFLAG>
     834:	08 95       	ret

00000836 <Motor_init>:
     836:	84 b5       	in	r24, 0x24	; 36
     838:	83 68       	ori	r24, 0x83	; 131
     83a:	84 bd       	out	0x24, r24	; 36
     83c:	85 b5       	in	r24, 0x25	; 37
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	85 bd       	out	0x25, r24	; 37
     842:	85 b3       	in	r24, 0x15	; 21
     844:	82 60       	ori	r24, 0x02	; 2
     846:	85 bb       	out	0x15, r24	; 21
     848:	17 bc       	out	0x27, r1	; 39
     84a:	ef cf       	rjmp	.-34     	; 0x82a <stopMotor>
     84c:	08 95       	ret

0000084e <motorTimerStart>:
     84e:	e1 e2       	ldi	r30, 0x21	; 33
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	80 81       	ld	r24, Z
     854:	88 60       	ori	r24, 0x08	; 8
     856:	80 83       	st	Z, r24
     858:	80 ea       	ldi	r24, 0xA0	; 160
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     860:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     864:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     868:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     86c:	a3 e7       	ldi	r26, 0x73	; 115
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	8c 91       	ld	r24, X
     872:	82 60       	ori	r24, 0x02	; 2
     874:	8c 93       	st	X, r24
     876:	80 81       	ld	r24, Z
     878:	85 60       	ori	r24, 0x05	; 5
     87a:	80 83       	st	Z, r24
     87c:	8a b3       	in	r24, 0x1a	; 26
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	8a bb       	out	0x1a, r24	; 26
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     888:	08 95       	ret

0000088a <motorTimerStop>:
     88a:	e1 e2       	ldi	r30, 0x21	; 33
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	80 81       	ld	r24, Z
     890:	8a 7f       	andi	r24, 0xFA	; 250
     892:	80 83       	st	Z, r24
     894:	08 95       	ret

00000896 <__vector_47>:
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	0b b6       	in	r0, 0x3b	; 59
     8a2:	0f 92       	push	r0
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	4f 93       	push	r20
     8aa:	5f 93       	push	r21
     8ac:	6f 93       	push	r22
     8ae:	7f 93       	push	r23
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
     8bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     8ce:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     8d2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     8d6:	84 36       	cpi	r24, 0x64	; 100
     8d8:	20 f4       	brcc	.+8      	; 0x8e2 <__vector_47+0x4c>
     8da:	84 e6       	ldi	r24, 0x64	; 100
     8dc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motorDecSpeed>
     8e0:	d4 df       	rcall	.-88     	; 0x88a <motorTimerStop>
     8e2:	16 bc       	out	0x26, r1	; 38
     8e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motorDecSpeed>
     8e8:	87 bd       	out	0x27, r24	; 39
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <ADC_Init>:
     910:	ec e7       	ldi	r30, 0x7C	; 124
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	80 64       	ori	r24, 0x40	; 64
     918:	80 83       	st	Z, r24
     91a:	80 81       	ld	r24, Z
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	80 83       	st	Z, r24
     920:	ea e7       	ldi	r30, 0x7A	; 122
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	80 68       	ori	r24, 0x80	; 128
     928:	80 83       	st	Z, r24
     92a:	80 81       	ld	r24, Z
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	80 83       	st	Z, r24
     930:	80 81       	ld	r24, Z
     932:	83 60       	ori	r24, 0x03	; 3
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <classify>:
     938:	80 32       	cpi	r24, 0x20	; 32
     93a:	23 e0       	ldi	r18, 0x03	; 3
     93c:	92 07       	cpc	r25, r18
     93e:	38 f0       	brcs	.+14     	; 0x94e <classify+0x16>
     940:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <countB>
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <countB>
     94a:	82 e3       	ldi	r24, 0x32	; 50
     94c:	08 95       	ret
     94e:	8c 3b       	cpi	r24, 0xBC	; 188
     950:	22 e0       	ldi	r18, 0x02	; 2
     952:	92 07       	cpc	r25, r18
     954:	38 f0       	brcs	.+14     	; 0x964 <classify+0x2c>
     956:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <countW>
     95a:	8f 5f       	subi	r24, 0xFF	; 255
     95c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <countW>
     960:	86 e9       	ldi	r24, 0x96	; 150
     962:	08 95       	ret
     964:	80 39       	cpi	r24, 0x90	; 144
     966:	91 40       	sbci	r25, 0x01	; 1
     968:	38 f0       	brcs	.+14     	; 0x978 <classify+0x40>
     96a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <countS>
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <countS>
     974:	88 ec       	ldi	r24, 0xC8	; 200
     976:	08 95       	ret
     978:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <countA>
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <countA>
     982:	84 e6       	ldi	r24, 0x64	; 100
     984:	08 95       	ret

00000986 <debounce>:
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	08 2e       	mov	r0, r24
     98c:	02 c0       	rjmp	.+4      	; 0x992 <debounce+0xc>
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	0a 94       	dec	r0
     994:	e2 f7       	brpl	.-8      	; 0x98e <debounce+0x8>
     996:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <mask>
     99a:	01 c0       	rjmp	.+2      	; 0x99e <debounce+0x18>
     99c:	66 0f       	add	r22, r22
     99e:	8a 95       	dec	r24
     9a0:	ea f7       	brpl	.-6      	; 0x99c <debounce+0x16>
     9a2:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <countCheck+0x1>
     9a6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <countCheck>
     9aa:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <countCheck+0x1>
     9ae:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <countCheck>
     9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <debounce+0x4c>
     9b4:	99 b1       	in	r25, 0x09	; 9
     9b6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <mask>
     9ba:	89 23       	and	r24, r25
     9bc:	68 13       	cpse	r22, r24
     9be:	14 c0       	rjmp	.+40     	; 0x9e8 <debounce+0x62>
     9c0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <countCheck>
     9c4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <countCheck+0x1>
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <countCheck+0x1>
     9ce:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <countCheck>
     9d2:	84 2f       	mov	r24, r20
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <countCheck>
     9da:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <countCheck+0x1>
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	40 f3       	brcs	.-48     	; 0x9b4 <debounce+0x2e>
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	08 95       	ret
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret

000009ec <mTimer_init>:




void mTimer_init(){
	TCCR1B |= _BV(CS11);//Set prescaler to 8
     9ec:	e1 e8       	ldi	r30, 0x81	; 129
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	82 60       	ori	r24, 0x02	; 2
     9f4:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); // Configure counter for CTC mode;
     9f6:	80 81       	ld	r24, Z
     9f8:	88 60       	ori	r24, 0x08	; 8
     9fa:	80 83       	st	Z, r24
	OCR1A = 0x03E8; //Set top value for Timer counter
     9fc:	88 ee       	ldi	r24, 0xE8	; 232
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     a04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     a08:	08 95       	ret

00000a0a <mTimer>:


void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
     a0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     a0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
     a12:	26 b3       	in	r18, 0x16	; 22
     a14:	22 60       	ori	r18, 0x02	; 2
     a16:	26 bb       	out	0x16, r18	; 22



void mTimer(int count){
	int i; //counter for ms
	i = 0;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <mTimer+0x22>
		if((TIFR1 & 0x02) == 0x02){
     a1e:	b1 9b       	sbis	0x16, 1	; 22
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <mTimer+0x22>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
     a22:	46 b3       	in	r20, 0x16	; 22
     a24:	42 60       	ori	r20, 0x02	; 2
     a26:	46 bb       	out	0x16, r20	; 22
			i++;	//increment counter to count milliseconds
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	b4 f3       	brlt	.-20     	; 0xa1e <mTimer+0x14>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     a32:	08 95       	ret

00000a34 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     a34:	e1 ea       	ldi	r30, 0xA1	; 161
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	88 60       	ori	r24, 0x08	; 8
     a3c:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     a46:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     a4a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     a4e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     a52:	a2 e7       	ldi	r26, 0x72	; 114
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	8c 91       	ld	r24, X
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     a5c:	80 81       	ld	r24, Z
     a5e:	85 60       	ori	r24, 0x05	; 5
     a60:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     a62:	89 b3       	in	r24, 0x19	; 25
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	89 bb       	out	0x19, r24	; 25
     a68:	08 95       	ret

00000a6a <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     a6a:	e1 ea       	ldi	r30, 0xA1	; 161
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8a 7f       	andi	r24, 0xFA	; 250
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     a76:	e1 ea       	ldi	r30, 0xA1	; 161
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	85 60       	ori	r24, 0x05	; 5
     a7e:	80 83       	st	Z, r24
     a80:	08 95       	ret

00000a82 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     a90:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <runTime_d>
     a94:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <runTime_d+0x1>
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <runTime_d+0x1>
     a9e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <runTime_d>
	
}//ISR
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	8f 93       	push	r24
	PORTC = 0xFF;
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
     ac0:	8f 91       	pop	r24
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <dispStatus>:
extern volatile uint8_t countA;
extern volatile uint16_t CurDelay;


void dispStatus(void){
	LCDClear();
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	69 db       	rcall	.-2350   	; 0x1a4 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	4a dc       	rcall	.-1900   	; 0x36c <LCDGotoXY>
     ad8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <countSort>
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	e5 db       	rcall	.-2102   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	41 dc       	rcall	.-1918   	; 0x36c <LCDGotoXY>
     aea:	81 e1       	ldi	r24, 0x11	; 17
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	d2 db       	rcall	.-2140   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	3b dc       	rcall	.-1930   	; 0x36c <LCDGotoXY>
     af6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <countPart>
     afa:	62 e0       	ldi	r22, 0x02	; 2
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	d6 db       	rcall	.-2132   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	32 dc       	rcall	.-1948   	; 0x36c <LCDGotoXY>
     b08:	83 e1       	ldi	r24, 0x13	; 19
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	c3 db       	rcall	.-2170   	; 0x294 <LCDWriteString>
     b0e:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
     b10:	86 e0       	ldi	r24, 0x06	; 6
     b12:	2c dc       	rcall	.-1960   	; 0x36c <LCDGotoXY>
     b14:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <countB>
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	c7 db       	rcall	.-2162   	; 0x2ae <LCDWriteInt>
     b20:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
     b22:	87 e0       	ldi	r24, 0x07	; 7
     b24:	23 dc       	rcall	.-1978   	; 0x36c <LCDGotoXY>
     b26:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <countA>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	be db       	rcall	.-2180   	; 0x2ae <LCDWriteInt>
     b32:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	1a dc       	rcall	.-1996   	; 0x36c <LCDGotoXY>
     b38:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <countW>
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	b5 db       	rcall	.-2198   	; 0x2ae <LCDWriteInt>
     b44:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
     b46:	89 e0       	ldi	r24, 0x09	; 9
     b48:	11 dc       	rcall	.-2014   	; 0x36c <LCDGotoXY>
     b4a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <countS>
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	ac db       	rcall	.-2216   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	8a e0       	ldi	r24, 0x0A	; 10
     b5a:	08 dc       	rcall	.-2032   	; 0x36c <LCDGotoXY>
     b5c:	85 e1       	ldi	r24, 0x15	; 21
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	99 db       	rcall	.-2254   	; 0x294 <LCDWriteString>
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
     b66:	02 dc       	rcall	.-2044   	; 0x36c <LCDGotoXY>
     b68:	87 e1       	ldi	r24, 0x17	; 23
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	93 db       	rcall	.-2266   	; 0x294 <LCDWriteString>
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	8e e0       	ldi	r24, 0x0E	; 14
     b72:	fc db       	rcall	.-2056   	; 0x36c <LCDGotoXY>
	LCDWriteIntXY(14,0, runTime_d/1000, 2);
     b74:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <runTime_d>
     b78:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <runTime_d+0x1>
     b7c:	36 95       	lsr	r19
     b7e:	27 95       	ror	r18
     b80:	36 95       	lsr	r19
     b82:	27 95       	ror	r18
     b84:	36 95       	lsr	r19
     b86:	27 95       	ror	r18
     b88:	a5 ec       	ldi	r26, 0xC5	; 197
     b8a:	b0 e2       	ldi	r27, 0x20	; 32
     b8c:	27 d3       	rcall	.+1614   	; 0x11dc <__umulhisi3>
     b8e:	62 e0       	ldi	r22, 0x02	; 2
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	92 95       	swap	r25
     b94:	82 95       	swap	r24
     b96:	8f 70       	andi	r24, 0x0F	; 15
     b98:	89 27       	eor	r24, r25
     b9a:	9f 70       	andi	r25, 0x0F	; 15
     b9c:	89 27       	eor	r24, r25
     b9e:	87 db       	rcall	.-2290   	; 0x2ae <LCDWriteInt>
	

	LCDWriteIntXY(0, 1, CurPosition, 3);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	e3 db       	rcall	.-2106   	; 0x36c <LCDGotoXY>
     ba6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurPosition>
     baa:	63 e0       	ldi	r22, 0x03	; 3
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	7e db       	rcall	.-2308   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(3,1, ">");
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	da db       	rcall	.-2124   	; 0x36c <LCDGotoXY>
     bb8:	89 e1       	ldi	r24, 0x19	; 25
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	6b db       	rcall	.-2346   	; 0x294 <LCDWriteString>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(4, 1, Parts[countSort], 3);
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	d4 db       	rcall	.-2136   	; 0x36c <LCDGotoXY>
     bc4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <countSort>
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	e1 56       	subi	r30, 0x61	; 97
     bcc:	fd 4f       	sbci	r31, 0xFD	; 253
     bce:	80 81       	ld	r24, Z
     bd0:	63 e0       	ldi	r22, 0x03	; 3
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	6b db       	rcall	.-2346   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(8, 1,"D" );
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	c7 db       	rcall	.-2162   	; 0x36c <LCDGotoXY>
     bde:	8b e1       	ldi	r24, 0x1B	; 27
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	58 db       	rcall	.-2384   	; 0x294 <LCDWriteString>
     be4:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(9, 1, CurDelay/122, 2);//delay in ms
     be6:	89 e0       	ldi	r24, 0x09	; 9
     be8:	c1 db       	rcall	.-2174   	; 0x36c <LCDGotoXY>
     bea:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <CurDelay>
     bee:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <CurDelay+0x1>
     bf2:	a3 e9       	ldi	r26, 0x93	; 147
     bf4:	b1 e2       	ldi	r27, 0x21	; 33
     bf6:	f2 d2       	rcall	.+1508   	; 0x11dc <__umulhisi3>
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	92 95       	swap	r25
     bfe:	82 95       	swap	r24
     c00:	8f 70       	andi	r24, 0x0F	; 15
     c02:	89 27       	eor	r24, r25
     c04:	9f 70       	andi	r25, 0x0F	; 15
     c06:	89 27       	eor	r24, r25
     c08:	52 db       	rcall	.-2396   	; 0x2ae <LCDWriteInt>
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	8c e0       	ldi	r24, 0x0C	; 12
     c0e:	ae db       	rcall	.-2212   	; 0x36c <LCDGotoXY>
     c10:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcDisp>
	LCDWriteIntXY(12, 1, adcDisp, 4);
     c14:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <adcDisp+0x1>
     c18:	64 e0       	ldi	r22, 0x04	; 4
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	48 cb       	rjmp	.-2416   	; 0x2ae <LCDWriteInt>
     c1e:	08 95       	ret

00000c20 <main>:
     c20:	e1 e6       	ldi	r30, 0x61	; 97
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 e8       	ldi	r24, 0x80	; 128
     c26:	80 83       	st	Z, r24
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 83       	st	Z, r24

	CLKPR = 0x80;
	CLKPR = 0x01;
	//INITIALIZATION
	
	cli();//Disable Interrupts
     c2c:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
     c32:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
     c34:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
     c36:	1a b8       	out	0x0a, r1	; 10
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
     c38:	e9 e6       	ldi	r30, 0x69	; 105
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
     c42:	80 81       	ld	r24, Z
     c44:	8c 60       	ori	r24, 0x0C	; 12
     c46:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);// | _BV(ISC20);//EX
     c48:	80 81       	ld	r24, Z
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
     c4e:	80 81       	ld	r24, Z
     c50:	80 6c       	ori	r24, 0xC0	; 192
     c52:	80 83       	st	Z, r24
	//EIMSK |= 0x0F; //Enable INT[0-3]


	ADC_Init();
     c54:	5d de       	rcall	.-838    	; 0x910 <ADC_Init>
	mTimer_init();
     c56:	ca de       	rcall	.-620    	; 0x9ec <mTimer_init>
	stepTimer_init();
     c58:	e0 dc       	rcall	.-1600   	; 0x61a <stepTimer_init>
	Motor_init();
     c5a:	ed dd       	rcall	.-1062   	; 0x836 <Motor_init>
     c5c:	83 e0       	ldi	r24, 0x03	; 3
	InitLCD(LS_BLINK|LS_ULINE);
     c5e:	d9 da       	rcall	.-2638   	; 0x212 <InitLCD>
     c60:	60 e0       	ldi	r22, 0x00	; 0
	LCDClear();
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	9f da       	rcall	.-2754   	; 0x1a4 <LCDByte>
     c66:	8d b3       	in	r24, 0x1d	; 29
	
	EIMSK |= 0x08;
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
     c6c:	78 94       	sei
	
	//CALIBRATION
	
	stepCalibrate();
     c6e:	8f dd       	rcall	.-1250   	; 0x78e <stepCalibrate>
     c70:	88 ee       	ldi	r24, 0xE8	; 232
	mTimer(1000);
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	ca de       	rcall	.-620    	; 0xa0a <mTimer>
     c76:	f8 94       	cli
     c78:	8d b3       	in	r24, 0x1d	; 29
	//stepStart();//Activate the stepper motor
	//testStep();
	cli();
     c7a:	8f 60       	ori	r24, 0x0F	; 15
	EIMSK |= 0x0F;
     c7c:	8d bb       	out	0x1d, r24	; 29
     c7e:	8d b3       	in	r24, 0x1d	; 29
     c80:	87 7f       	andi	r24, 0xF7	; 247
	EIMSK &= ~(0x08);
     c82:	8d bb       	out	0x1d, r24	; 29
	sei();
     c84:	78 94       	sei
	
	//MAIN OPERATION
	countPart=0;
     c86:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <countPart>
	countSort = 0;
	stepStart();//Activate the stepper motor
     c8a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <countSort>
	startMotor();//Start Belt
     c8e:	da dc       	rcall	.-1612   	; 0x644 <stepStart>
     c90:	9b dd       	rcall	.-1226   	; 0x7c8 <startMotor>
	runTimerStart();//Start System Timer
     c92:	d0 de       	rcall	.-608    	; 0xa34 <runTimerStart>
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <main+0x7e>
     c96:	1a df       	rcall	.-460    	; 0xacc <dispStatus>
	STANDBY:
	//Handle Specific Processes and Display Data
	
	while (ENABLE==1)
	{	
		dispStatus();
     c98:	84 e1       	ldi	r24, 0x14	; 20
		mTimer(20);//Refresh Rate		
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	b6 de       	rcall	.-660    	; 0xa0a <mTimer>
     c9e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ENABLE>
	

	STANDBY:
	//Handle Specific Processes and Display Data
	
	while (ENABLE==1)
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	c1 f3       	breq	.-16     	; 0xc96 <main+0x76>
	}//while ENABLE
	
	
	
	//Pause
	if(ENABLE ==0){
     ca6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ENABLE>
     caa:	81 11       	cpse	r24, r1
		brakeMotor();
     cac:	f8 cf       	rjmp	.-16     	; 0xc9e <main+0x7e>
     cae:	b2 dd       	rcall	.-1180   	; 0x814 <brakeMotor>
		runTimerStop();
     cb0:	dc de       	rcall	.-584    	; 0xa6a <runTimerStop>
     cb2:	f8 94       	cli
		cli();
     cb4:	48 9b       	sbis	0x09, 0	; 9
		while((PIND & 0x01) == 0x00);
     cb6:	fe cf       	rjmp	.-4      	; 0xcb4 <main+0x94>
     cb8:	2f dc       	rcall	.-1954   	; 0x518 <stepRes>
		stepRes();
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <main+0xb2>
     cbc:	4a ef       	ldi	r20, 0xFA	; 250

		while(!ENABLE){
			if(debounce(0,0,BOUNCECHECK)){
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	61 de       	rcall	.-830    	; 0x986 <debounce>
     cc4:	88 23       	and	r24, r24
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <main+0xb2>
     cc8:	48 9b       	sbis	0x09, 0	; 9
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <main+0xa8>

				while((PIND & 0x01) == 0x00);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ENABLE>
				ENABLE = 1;
     cd2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ENABLE>
		runTimerStop();
		cli();
		while((PIND & 0x01) == 0x00);
		stepRes();

		while(!ENABLE){
     cd6:	88 23       	and	r24, r24
     cd8:	89 f3       	breq	.-30     	; 0xcbc <main+0x9c>
     cda:	cd de       	rcall	.-614    	; 0xa76 <runTimerResume>
     cdc:	78 94       	sei

				while((PIND & 0x01) == 0x00);
				ENABLE = 1;
			}
		}//wait for ENABLE
		runTimerResume();
     cde:	df cf       	rjmp	.-66     	; 0xc9e <main+0x7e>

00000ce0 <__vector_1>:
     ce0:	1f 92       	push	r1
		sei();
     ce2:	0f 92       	push	r0
     ce4:	0f b6       	in	r0, 0x3f	; 63


//*************ISR***************//

//ISR Stop Button
ISR(INT0_vect){
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
     cea:	0b b6       	in	r0, 0x3b	; 59
     cec:	0f 92       	push	r0
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
     d06:	4a ef       	ldi	r20, 0xFA	; 250
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	3c de       	rcall	.-904    	; 0x986 <debounce>
     d0e:	88 23       	and	r24, r24
     d10:	61 f0       	breq	.+24     	; 0xd2a <__vector_1+0x4a>
		if(ENABLE){
     d12:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ENABLE>
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <__vector_1+0x42>
			ENABLE = 0;	
     d1a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ENABLE>
			brakeMotor();
     d1e:	7a dd       	rcall	.-1292   	; 0x814 <brakeMotor>
		}
		else{
			runMotor();
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <__vector_1+0x4a>
     d22:	65 dd       	rcall	.-1334   	; 0x7ee <runMotor>
			ENABLE = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ENABLE>
		}
	}
}//ISR Stop Button
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	bf 91       	pop	r27
     d30:	af 91       	pop	r26
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	7f 91       	pop	r23
     d38:	6f 91       	pop	r22
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	0b be       	out	0x3b, r0	; 59
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_2>:


//OR ISR
ISR(INT1_vect){
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	0b b6       	in	r0, 0x3b	; 59
     d5c:	0f 92       	push	r0
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
	if(ORFLAG){
     d7a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ORFLAG>
     d7e:	88 23       	and	r24, r24
     d80:	69 f1       	breq	.+90     	; 0xddc <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
     d82:	4c e3       	ldi	r20, 0x3C	; 60
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	fe dd       	rcall	.-1028   	; 0x986 <debounce>
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <__vector_2+0x40>
     d8e:	79 c0       	rjmp	.+242    	; 0xe82 <__vector_2+0x132>
			ORFLAG  = 0; //Part has entered OR
     d90:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ORFLAG>
			EIMSK &= ~_BV(INT1);
     d94:	8d b3       	in	r24, 0x1d	; 29
     d96:	8d 7f       	andi	r24, 0xFD	; 253
     d98:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
     d9a:	e9 e6       	ldi	r30, 0x69	; 105
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8b 7f       	andi	r24, 0xFB	; 251
     da2:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
     da4:	8d b3       	in	r24, 0x1d	; 29
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
     daa:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <countADC+0x1>
     dae:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <countADC>
			adcPart = 1023;
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcPart+0x1>
     dba:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcPart>
		
			ADCSRA |=_BV(ADSC);
     dbe:	ea e7       	ldi	r30, 0x7A	; 122
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 64       	ori	r24, 0x40	; 64
		
			motorTimerStart();//slow down motor on approach
     dc6:	80 83       	st	Z, r24
     dc8:	42 dd       	rcall	.-1404   	; 0x84e <motorTimerStart>
			ORTime_s = runTime_d;
     dca:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <runTime_d>
     dce:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <runTime_d+0x1>
     dd2:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <ORTime_s+0x1>
     dd6:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <ORTime_s>
     dda:	53 c0       	rjmp	.+166    	; 0xe82 <__vector_2+0x132>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
     ddc:	4c e3       	ldi	r20, 0x3C	; 60
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	d1 dd       	rcall	.-1118   	; 0x986 <debounce>
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <__vector_2+0x9a>
     de8:	4c c0       	rjmp	.+152    	; 0xe82 <__vector_2+0x132>
     dea:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <runTime_d>
     dee:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <runTime_d+0x1>
     df2:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <ORTime_s>
     df6:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <ORTime_s+0x1>
     dfa:	82 1b       	sub	r24, r18
     dfc:	93 0b       	sbc	r25, r19
     dfe:	06 97       	sbiw	r24, 0x06	; 6
     e00:	08 f4       	brcc	.+2      	; 0xe04 <__vector_2+0xb4>
     e02:	3f c0       	rjmp	.+126    	; 0xe82 <__vector_2+0x132>
			ORFLAG  = 1;//Part has cleared OR	
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
     e0a:	8d b3       	in	r24, 0x1d	; 29
     e0c:	8d 7f       	andi	r24, 0xFD	; 253
     e0e:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
     e10:	e9 e6       	ldi	r30, 0x69	; 105
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
     e1a:	8d b3       	in	r24, 0x1d	; 29
     e1c:	82 60       	ori	r24, 0x02	; 2
     e1e:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
     e20:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcPart>
     e24:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcPart+0x1>
     e28:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <adcDisp+0x1>
     e2c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
     e30:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcPart>
     e34:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcPart+0x1>
     e38:	82 3f       	cpi	r24, 0xF2	; 242
     e3a:	93 40       	sbci	r25, 0x03	; 3
     e3c:	10 f5       	brcc	.+68     	; 0xe82 <__vector_2+0x132>
     e3e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <countADC>
     e42:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <countADC+0x1>
     e46:	c3 97       	sbiw	r24, 0x33	; 51
     e48:	e0 f0       	brcs	.+56     	; 0xe82 <__vector_2+0x132>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
     e4a:	c0 91 35 02 	lds	r28, 0x0235	; 0x800235 <countPart>
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcPart>
     e54:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcPart+0x1>
     e58:	6f dd       	rcall	.-1314   	; 0x938 <classify>
     e5a:	c1 56       	subi	r28, 0x61	; 97
     e5c:	dd 4f       	sbci	r29, 0xFD	; 253
     e5e:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
     e60:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <countPart>
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <countPart>
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	a1 56       	subi	r26, 0x61	; 97
     e6e:	bd 4f       	sbci	r27, 0xFD	; 253
     e70:	8c 91       	ld	r24, X
     e72:	e0 56       	subi	r30, 0x60	; 96
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
     e78:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <countPart>
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
     e82:	8c b3       	in	r24, 0x1c	; 28
     e84:	82 60       	ori	r24, 0x02	; 2
     e86:	8c bb       	out	0x1c, r24	; 28
}//OR
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_3>:


//EX ISR //376 - 471 cycles
ISR(INT2_vect){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	0b b6       	in	r0, 0x3b	; 59
     ebe:	0f 92       	push	r0
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	
	if(!EXFLAG)
     ed8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <EXFLAG>
     edc:	81 11       	cpse	r24, r1
     ede:	2a c0       	rjmp	.+84     	; 0xf34 <__vector_3+0x82>
	{//Part is entering EX
			if(debounce(2, 0, NOISECHECK)){
     ee0:	4c e3       	ldi	r20, 0x3C	; 60
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	4f dd       	rcall	.-1378   	; 0x986 <debounce>
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_3+0x3c>
     eec:	5a c0       	rjmp	.+180    	; 0xfa2 <__vector_3+0xf0>
				EXFLAG =1;//Part is at EX
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <EXFLAG>
				EIMSK &= ~_BV(INT2);
     ef4:	8d b3       	in	r24, 0x1d	; 29
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
     efa:	e9 e6       	ldi	r30, 0x69	; 105
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 61       	ori	r24, 0x10	; 16
     f02:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
     f04:	8d b3       	in	r24, 0x1d	; 29
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	8d bb       	out	0x1d, r24	; 29
				
				if(abs(CurError)>DROP_ERROR){			
     f0a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     f0e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     f12:	99 23       	and	r25, r25
     f14:	1c f4       	brge	.+6      	; 0xf1c <__vector_3+0x6a>
     f16:	91 95       	neg	r25
     f18:	81 95       	neg	r24
     f1a:	91 09       	sbc	r25, r1
     f1c:	84 97       	sbiw	r24, 0x24	; 36
						brakeMotor();//Stop Belt
     f1e:	0c f0       	brlt	.+2      	; 0xf22 <__vector_3+0x70>
     f20:	79 dc       	rcall	.-1806   	; 0x814 <brakeMotor>
				}
				//optimizeStepper();
				EXTime_s = runTime_d;
     f22:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <runTime_d>
     f26:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <runTime_d+0x1>
     f2a:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <EXTime_s+0x1>
     f2e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <EXTime_s>
     f32:	37 c0       	rjmp	.+110    	; 0xfa2 <__vector_3+0xf0>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME)	){
     f34:	4c e3       	ldi	r20, 0x3C	; 60
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	25 dd       	rcall	.-1462   	; 0x986 <debounce>
     f3c:	88 23       	and	r24, r24
     f3e:	89 f1       	breq	.+98     	; 0xfa2 <__vector_3+0xf0>
     f40:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <runTime_d>
     f44:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <runTime_d+0x1>
     f48:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <EXTime_s>
     f4c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <EXTime_s+0x1>
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	31 f1       	breq	.+76     	; 0xfa2 <__vector_3+0xf0>

				EXFLAG = 0;
     f56:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <EXFLAG>
				EIMSK &= ~_BV(INT2);
     f5a:	8d b3       	in	r24, 0x1d	; 29
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
     f60:	e9 e6       	ldi	r30, 0x69	; 105
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7e       	andi	r24, 0xEF	; 239
     f68:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
     f6a:	8d b3       	in	r24, 0x1d	; 29
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	8d bb       	out	0x1d, r24	; 29

				if(countSort<countPart)
     f70:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <countSort>
     f74:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <countPart>
     f78:	98 17       	cp	r25, r24
     f7a:	28 f4       	brcc	.+10     	; 0xf86 <__vector_3+0xd4>
				{
					countSort+=1;//go to next part immediately
     f7c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <countSort>
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <countSort>
				}
				if(abs(CurError)>DROP_REGION){
     f86:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
     f8a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
     f8e:	99 23       	and	r25, r25
     f90:	1c f4       	brge	.+6      	; 0xf98 <__vector_3+0xe6>
     f92:	91 95       	neg	r25
     f94:	81 95       	neg	r24
     f96:	91 09       	sbc	r25, r1
     f98:	4f 97       	sbiw	r24, 0x1f	; 31
     f9a:	1c f0       	brlt	.+6      	; 0xfa2 <__vector_3+0xf0>
					SLIPFLAG = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SLIPFLAG>
				}		
		}//HI
	}
	EIFR |= _BV(INT2);
     fa2:	8c b3       	in	r24, 0x1c	; 28
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	8c bb       	out	0x1c, r24	; 28
}//EX
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0b be       	out	0x3b, r0	; 59
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_32>:




//STEPPER ISR  //84 - 250 cycles
ISR(TIMER3_COMPA_vect){
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	0b b6       	in	r0, 0x3b	; 59
     fda:	0f 92       	push	r0
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
//CONTROL STEPPER
	step();//step towards target
     ff4:	c3 d9       	rcall	.-3194   	; 0x37c <step>
	
	if(!SLIPFLAG)
     ff6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SLIPFLAG>
     ffa:	81 11       	cpse	r24, r1
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		CurError = Parts[countSort] - CurPosition;
     ffe:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <countSort>
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	e1 56       	subi	r30, 0x61	; 97
    1006:	fd 4f       	sbci	r31, 0xFD	; 253
    1008:	80 81       	ld	r24, Z
    100a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <CurPosition>
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	82 1b       	sub	r24, r18
    1012:	91 09       	sbc	r25, r1
    1014:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <CurError+0x1>
    1018:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <CurError>
    101c:	1c c0       	rjmp	.+56     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
	}else
	{
		CurError = Parts[countSort-1] - CurPosition;
    101e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <countSort>
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	e2 56       	subi	r30, 0x62	; 98
    1026:	fd 4f       	sbci	r31, 0xFD	; 253
    1028:	80 81       	ld	r24, Z
    102a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <CurPosition>
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	82 1b       	sub	r24, r18
    1032:	91 09       	sbc	r25, r1
    1034:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <CurError+0x1>
    1038:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <CurError>
		if(abs(CurError)<DROP_REGION)
    103c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
    1040:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
    1044:	99 23       	and	r25, r25
    1046:	1c f4       	brge	.+6      	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    1048:	91 95       	neg	r25
    104a:	81 95       	neg	r24
    104c:	91 09       	sbc	r25, r1
    104e:	4e 97       	sbiw	r24, 0x1e	; 30
    1050:	14 f4       	brge	.+4      	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
		{
			SLIPFLAG = 0;
    1052:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <SLIPFLAG>
		}
	}
	
	stepUpdateDir();
	stepUpdateDelay();
    1056:	6b da       	rcall	.-2858   	; 0x52e <stepUpdateDir>
    1058:	d7 d9       	rcall	.-3154   	; 0x408 <stepUpdateDelay>
//CONTROL STEPPER


//CONTROL MOTOR
	if(!MOTORFLAG){//If motor is OFF
    105a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <MOTORFLAG>
    105e:	81 11       	cpse	r24, r1
    1060:	10 c0       	rjmp	.+32     	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>

		if((abs(CurError)<=DROP_ERROR) && !DECELFLAG){//if we are in the drop zone			
    1062:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurError>
    1066:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurError+0x1>
    106a:	99 23       	and	r25, r25
    106c:	1c f4       	brge	.+6      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    106e:	91 95       	neg	r25
    1070:	81 95       	neg	r24
    1072:	91 09       	sbc	r25, r1
    1074:	84 97       	sbiw	r24, 0x24	; 36
    1076:	2c f4       	brge	.+10     	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    1078:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DECELFLAG>
    107c:	81 11       	cpse	r24, r1
				runMotor();//Turn motor on
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    1080:	b6 db       	rcall	.-2196   	; 0x7ee <runMotor>
		}
	}
//CONTROL MOTOR	

}//stepTimer
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0b be       	out	0x3b, r0	; 59
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_29>:

//ADC ISR
ISR(ADC_vect){
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    10c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcTemp+0x1>
    10cc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcTemp>
	adcTemp+= (ADCH<<8);
    10d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	98 2f       	mov	r25, r24
    10d8:	88 27       	eor	r24, r24
    10da:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <adcTemp>
    10de:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <adcTemp+0x1>
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcTemp+0x1>
    10ea:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcTemp>
	countADC+=1;
    10ee:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <countADC>
    10f2:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <countADC+0x1>
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <countADC+0x1>
    10fc:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <countADC>
	
	if(adcTemp<adcPart){
    1100:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <adcTemp>
    1104:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <adcTemp+0x1>
    1108:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcPart>
    110c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcPart+0x1>
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	40 f4       	brcc	.+16     	; 0x1126 <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    1116:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcTemp>
    111a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcTemp+0x1>
    111e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcPart+0x1>
    1122:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcPart>
	}
	
	if(!ORFLAG){
    1126:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ORFLAG>
    112a:	81 11       	cpse	r24, r1
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    112e:	ea e7       	ldi	r30, 0x7A	; 122
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	80 83       	st	Z, r24
	}
}//ADC
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	0b b6       	in	r0, 0x3b	; 59
    115e:	0f 92       	push	r0
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    1178:	4c e3       	ldi	r20, 0x3C	; 60
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	03 dc       	rcall	.-2042   	; 0x986 <debounce>
    1180:	88 23       	and	r24, r24
    1182:	31 f0       	breq	.+12     	; 0x1190 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    1184:	82 e3       	ldi	r24, 0x32	; 50
    1186:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurPosition>
		HALLSENSOR= 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <HALLSENSOR>
	}
}//HE
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__divmodhi4>:
    11b6:	97 fb       	bst	r25, 7
    11b8:	07 2e       	mov	r0, r23
    11ba:	16 f4       	brtc	.+4      	; 0x11c0 <__divmodhi4+0xa>
    11bc:	00 94       	com	r0
    11be:	06 d0       	rcall	.+12     	; 0x11cc <__divmodhi4_neg1>
    11c0:	77 fd       	sbrc	r23, 7
    11c2:	08 d0       	rcall	.+16     	; 0x11d4 <__divmodhi4_neg2>
    11c4:	1a d0       	rcall	.+52     	; 0x11fa <__udivmodhi4>
    11c6:	07 fc       	sbrc	r0, 7
    11c8:	05 d0       	rcall	.+10     	; 0x11d4 <__divmodhi4_neg2>
    11ca:	3e f4       	brtc	.+14     	; 0x11da <__divmodhi4_exit>

000011cc <__divmodhi4_neg1>:
    11cc:	90 95       	com	r25
    11ce:	81 95       	neg	r24
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__divmodhi4_neg2>:
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255

000011da <__divmodhi4_exit>:
    11da:	08 95       	ret

000011dc <__umulhisi3>:
    11dc:	a2 9f       	mul	r26, r18
    11de:	b0 01       	movw	r22, r0
    11e0:	b3 9f       	mul	r27, r19
    11e2:	c0 01       	movw	r24, r0
    11e4:	a3 9f       	mul	r26, r19
    11e6:	70 0d       	add	r23, r0
    11e8:	81 1d       	adc	r24, r1
    11ea:	11 24       	eor	r1, r1
    11ec:	91 1d       	adc	r25, r1
    11ee:	b2 9f       	mul	r27, r18
    11f0:	70 0d       	add	r23, r0
    11f2:	81 1d       	adc	r24, r1
    11f4:	11 24       	eor	r1, r1
    11f6:	91 1d       	adc	r25, r1
    11f8:	08 95       	ret

000011fa <__udivmodhi4>:
    11fa:	aa 1b       	sub	r26, r26
    11fc:	bb 1b       	sub	r27, r27
    11fe:	51 e1       	ldi	r21, 0x11	; 17
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <__udivmodhi4_ep>

00001202 <__udivmodhi4_loop>:
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	a6 17       	cp	r26, r22
    1208:	b7 07       	cpc	r27, r23
    120a:	10 f0       	brcs	.+4      	; 0x1210 <__udivmodhi4_ep>
    120c:	a6 1b       	sub	r26, r22
    120e:	b7 0b       	sbc	r27, r23

00001210 <__udivmodhi4_ep>:
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	5a 95       	dec	r21
    1216:	a9 f7       	brne	.-22     	; 0x1202 <__udivmodhi4_loop>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	08 95       	ret

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
