
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  0000177c  00001810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000177c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800230  00800230  00001840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002705  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001158  00000000  00000000  00004195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000159a  00000000  00000000  000052ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00006888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8b  00000000  00000000  00006e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  000078e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_1>
       8:	b6 c7       	rjmp	.+3948   	; 0xf76 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_3>
      10:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_32>
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9c c5       	rjmp	.+2872   	; 0xbe2 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	68 c4       	rjmp	.+2256   	; 0x98e <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e7       	ldi	r30, 0x7C	; 124
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 33       	cpi	r26, 0x30	; 48
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e3       	ldi	r26, 0x30	; 48
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	85 d6       	rcall	.+3338   	; 0xe2a <main>
     120:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <_exit>

00000124 <__bad_interrupt>:
     124:	75 c5       	rjmp	.+2794   	; 0xc10 <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 86 0b 	call	0x170c	; 0x170c <__divmodhi4>
     2e2:	e1 e0       	ldi	r30, 0x01	; 1
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	80 83       	st	Z, r24
	val=val/10;
     2f0:	86 2f       	mov	r24, r22
     2f2:	97 2f       	mov	r25, r23
	i--;
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	79 f7       	brne	.-34     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fc:	bf ef       	ldi	r27, 0xFF	; 255
     2fe:	eb 16       	cp	r14, r27
     300:	fb 06       	cpc	r15, r27
     302:	81 f4       	brne	.+32     	; 0x324 <LCDWriteInt+0x76>
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     306:	0f 5f       	subi	r16, 0xFF	; 255
     308:	1f 4f       	sbci	r17, 0xFF	; 255
     30a:	02 c0       	rjmp	.+4      	; 0x310 <LCDWriteInt+0x62>
     30c:	00 e0       	ldi	r16, 0x00	; 0
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	e1 e0       	ldi	r30, 0x01	; 1
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	ec 0f       	add	r30, r28
     316:	fd 1f       	adc	r31, r29
     318:	e0 0f       	add	r30, r16
     31a:	f1 1f       	adc	r31, r17
     31c:	20 81       	ld	r18, Z
     31e:	22 23       	and	r18, r18
     320:	91 f3       	breq	.-28     	; 0x306 <LCDWriteInt+0x58>
     322:	04 c0       	rjmp	.+8      	; 0x32c <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     324:	05 e0       	ldi	r16, 0x05	; 5
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	0e 19       	sub	r16, r14
     32a:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32c:	99 23       	and	r25, r25
     32e:	84 f4       	brge	.+32     	; 0x350 <LCDWriteInt+0xa2>
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	8d e2       	ldi	r24, 0x2D	; 45
     334:	37 df       	rcall	.-402    	; 0x1a4 <LCDByte>
     336:	0c c0       	rjmp	.+24     	; 0x350 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	e0 0f       	add	r30, r16
     342:	f1 1f       	adc	r31, r17
     344:	80 81       	ld	r24, Z
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	80 5d       	subi	r24, 0xD0	; 208
     34a:	2c df       	rcall	.-424    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34c:	0f 5f       	subi	r16, 0xFF	; 255
     34e:	1f 4f       	sbci	r17, 0xFF	; 255
     350:	05 30       	cpi	r16, 0x05	; 5
     352:	11 05       	cpc	r17, r1
     354:	8c f3       	brlt	.-30     	; 0x338 <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36e:	88 32       	cpi	r24, 0x28	; 40
     370:	28 f4       	brcc	.+10     	; 0x37c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     372:	61 11       	cpse	r22, r1
     374:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	14 cf       	rjmp	.-472    	; 0x1a4 <LCDByte>
     37c:	08 95       	ret

0000037e <step>:
extern volatile char TARGETFLAG;
extern volatile char SLIPFLAG;


uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     37e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <__data_end>
     382:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     386:	89 0f       	add	r24, r25
     388:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     38c:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     390:	84 30       	cpi	r24, 0x04	; 4
     392:	1c f0       	brlt	.+6      	; 0x39a <step+0x1c>
     394:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     39a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     39e:	88 23       	and	r24, r24
     3a0:	1c f4       	brge	.+6      	; 0x3a8 <step+0x2a>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     3a8:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end>
     3ac:	0e 2e       	mov	r0, r30
     3ae:	00 0c       	add	r0, r0
     3b0:	ff 0b       	sbc	r31, r31
     3b2:	e0 50       	subi	r30, 0x00	; 0
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	80 81       	ld	r24, Z
     3b8:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     3ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3be:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     3c2:	89 0f       	add	r24, r25
     3c4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 200 && Dir==1){CurPosition -=  200;}
     3c8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3cc:	89 3c       	cpi	r24, 0xC9	; 201
     3ce:	50 f0       	brcs	.+20     	; 0x3e4 <step+0x66>
     3d0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <step+0x66>
     3d8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3dc:	88 5c       	subi	r24, 0xC8	; 200
     3de:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <step+0x80>
	else if(CurPosition < 50 && Dir==-1){CurPosition += 200;}
     3e4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3e8:	82 33       	cpi	r24, 0x32	; 50
     3ea:	48 f4       	brcc	.+18     	; 0x3fe <step+0x80>
     3ec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3f0:	8f 3f       	cpi	r24, 0xFF	; 255
     3f2:	29 f4       	brne	.+10     	; 0x3fe <step+0x80>
     3f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3f8:	88 53       	subi	r24, 0x38	; 56
     3fa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     3fe:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     402:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	08 95       	ret

0000040a <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(SLIPFLAG)
     40a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <SLIPFLAG>
     40e:	88 23       	and	r24, r24
     410:	e9 f0       	breq	.+58     	; 0x44c <stepUpdateError+0x42>
	{
		CurError = Parts[countSort-1] - CurPosition;
     412:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <countSort>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e5 54       	subi	r30, 0x45	; 69
     41a:	fd 4f       	sbci	r31, 0xFD	; 253
     41c:	80 81       	ld	r24, Z
     41e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	82 1b       	sub	r24, r18
     426:	91 09       	sbc	r25, r1
     428:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     42c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
		if(abs(CurError)<DROP_REGION)
     430:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     434:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     438:	99 23       	and	r25, r25
     43a:	1c f4       	brge	.+6      	; 0x442 <stepUpdateError+0x38>
     43c:	91 95       	neg	r25
     43e:	81 95       	neg	r24
     440:	91 09       	sbc	r25, r1
     442:	46 97       	sbiw	r24, 0x16	; 22
     444:	94 f4       	brge	.+36     	; 0x46a <stepUpdateError+0x60>
		{
			SLIPFLAG = 0;
     446:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <SLIPFLAG>
     44a:	0f c0       	rjmp	.+30     	; 0x46a <stepUpdateError+0x60>
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     44c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <countSort>
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	e4 54       	subi	r30, 0x44	; 68
     454:	fd 4f       	sbci	r31, 0xFD	; 253
     456:	80 81       	ld	r24, Z
     458:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	82 1b       	sub	r24, r18
     460:	91 09       	sbc	r25, r1
     462:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     466:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
	}
	
	
	if(abs(CurError)>100)
     46a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     46e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     472:	99 23       	and	r25, r25
     474:	1c f4       	brge	.+6      	; 0x47c <stepUpdateError+0x72>
     476:	91 95       	neg	r25
     478:	81 95       	neg	r24
     47a:	91 09       	sbc	r25, r1
     47c:	85 36       	cpi	r24, 0x65	; 101
     47e:	91 05       	cpc	r25, r1
     480:	5c f0       	brlt	.+22     	; 0x498 <stepUpdateError+0x8e>
	{
		CurError = CurError - 200;
     482:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     486:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     48a:	88 5c       	subi	r24, 0xC8	; 200
     48c:	91 09       	sbc	r25, r1
     48e:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     492:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
     496:	11 c0       	rjmp	.+34     	; 0x4ba <stepUpdateError+0xb0>
	}else if(CurError<-100)
     498:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     49c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     4a0:	8c 39       	cpi	r24, 0x9C	; 156
     4a2:	9f 4f       	sbci	r25, 0xFF	; 255
     4a4:	54 f4       	brge	.+20     	; 0x4ba <stepUpdateError+0xb0>
	{
		CurError = CurError + 200;
     4a6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     4aa:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     4ae:	88 53       	subi	r24, 0x38	; 56
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <CurError+0x1>
     4b6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <CurError>
	}
	
	if(CurError == 0)
     4ba:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     4be:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     4c2:	89 2b       	or	r24, r25
     4c4:	19 f4       	brne	.+6      	; 0x4cc <stepUpdateError+0xc2>
	{
		TARGETFLAG = 1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TARGETFLAG>
	}
	return 1;
}
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	08 95       	ret

000004d0 <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     4d0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     4d4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     4d8:	89 2b       	or	r24, r25
     4da:	81 f4       	brne	.+32     	; 0x4fc <stepUpdateDir+0x2c>
		{
			if(CurDelay == MAXDELAY){
     4dc:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     4e0:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     4e4:	81 15       	cp	r24, r1
     4e6:	9a 40       	sbci	r25, 0x0A	; 10
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <stepUpdateDir+0x22>
				Dir = 0;
     4ea:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				return 1;	
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	08 95       	ret
			}else
			{
				DECELFLAG = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <DECELFLAG>
				return 0;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret
			}
		}else if(CurError>118)
     4fc:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     500:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     504:	87 37       	cpi	r24, 0x77	; 119
     506:	91 05       	cpc	r25, r1
     508:	24 f0       	brlt	.+8      	; 0x512 <stepUpdateDir+0x42>
		{//target is more than 100 steps CW
			NextDir = -1;//turn CCW
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
     510:	46 c0       	rjmp	.+140    	; 0x59e <stepUpdateDir+0xce>
		}else if(CurError<(-118))
     512:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     516:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     51a:	8a 38       	cpi	r24, 0x8A	; 138
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	24 f4       	brge	.+8      	; 0x528 <stepUpdateDir+0x58>
		{//target is more than 100 steps CCW
			NextDir = +1;//turn CW
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
     526:	3b c0       	rjmp	.+118    	; 0x59e <stepUpdateDir+0xce>
		}else if((abs(CurError)<118) && (abs(CurError)>82))
     528:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     52c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     530:	99 23       	and	r25, r25
     532:	1c f4       	brge	.+6      	; 0x53a <stepUpdateDir+0x6a>
     534:	91 95       	neg	r25
     536:	81 95       	neg	r24
     538:	91 09       	sbc	r25, r1
     53a:	86 37       	cpi	r24, 0x76	; 118
     53c:	91 05       	cpc	r25, r1
     53e:	dc f4       	brge	.+54     	; 0x576 <stepUpdateDir+0xa6>
     540:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     544:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     548:	99 23       	and	r25, r25
     54a:	1c f4       	brge	.+6      	; 0x552 <stepUpdateDir+0x82>
     54c:	91 95       	neg	r25
     54e:	81 95       	neg	r24
     550:	91 09       	sbc	r25, r1
     552:	83 35       	cpi	r24, 0x53	; 83
     554:	91 05       	cpc	r25, r1
     556:	7c f0       	brlt	.+30     	; 0x576 <stepUpdateDir+0xa6>
		{//Next target is exactly 100 steps away
			DECELFLAG = 0;
     558:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <DECELFLAG>
			if(Dir != 0){
     55c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     560:	88 23       	and	r24, r24
     562:	29 f0       	breq	.+10     	; 0x56e <stepUpdateDir+0x9e>
				NextDir = Dir;//Keep direction
     564:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     568:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		{//target is more than 100 steps CCW
			NextDir = +1;//turn CW
		}else if((abs(CurError)<118) && (abs(CurError)>82))
		{//Next target is exactly 100 steps away
			DECELFLAG = 0;
			if(Dir != 0){
     56c:	18 c0       	rjmp	.+48     	; 0x59e <stepUpdateDir+0xce>
				NextDir = Dir;//Keep direction
			}else
			{
				Dir = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     574:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     576:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     57a:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	12 16       	cp	r1, r18
     582:	13 06       	cpc	r1, r19
     584:	0c f0       	brlt	.+2      	; 0x588 <stepUpdateDir+0xb8>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <CurError>
     58c:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <CurError+0x1>
     590:	93 2f       	mov	r25, r19
     592:	99 1f       	adc	r25, r25
     594:	99 27       	eor	r25, r25
     596:	99 1f       	adc	r25, r25
     598:	89 1b       	sub	r24, r25
     59a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		//Set Direction or Decelerate
		if(CurDelay >= MAXDELAY){
     59e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     5a2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     5a6:	81 15       	cp	r24, r1
     5a8:	9a 40       	sbci	r25, 0x0A	; 10
     5aa:	30 f0       	brcs	.+12     	; 0x5b8 <stepUpdateDir+0xe8>
			Dir = NextDir;
     5ac:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5b0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret
		}
		
		
		
		if(NextDir == Dir)
     5b8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     5bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5c0:	98 13       	cpse	r25, r24
     5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <stepUpdateDir+0x100>
		{//stepper is slow or next direction is the same
			Dir = NextDir;
     5c4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5c8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	08 95       	ret
		}else
		{
			DECELFLAG = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <DECELFLAG>
			return 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
		}
	//}
	return 1;
}
     5d8:	08 95       	ret

000005da <stepUpdateDelay>:

uint8_t stepUpdateDelay(void)
{
	
	
	if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     5da:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <TARGETFLAG>
     5de:	81 11       	cpse	r24, r1
     5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <stepUpdateDelay+0x18>
     5e2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <DECELFLAG>
     5e6:	81 11       	cpse	r24, r1
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <stepUpdateDelay+0x18>
     5ea:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PAUSEFLAG>
     5ee:	88 23       	and	r24, r24
     5f0:	81 f1       	breq	.+96     	; 0x652 <stepUpdateDelay+0x78>
	{

		CurDelay = CurDelay + CurAcc[accSteps];
     5f2:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	e8 5a       	subi	r30, 0xA8	; 168
     5fe:	fd 4f       	sbci	r31, 0xFD	; 253
     600:	20 81       	ld	r18, Z
     602:	31 81       	ldd	r19, Z+1	; 0x01
     604:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     608:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     60c:	82 0f       	add	r24, r18
     60e:	93 1f       	adc	r25, r19
     610:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     614:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		
		if (CurDelay > MAXDELAY)
     618:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     61c:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	9a 40       	sbci	r25, 0x0A	; 10
     624:	58 f0       	brcs	.+22     	; 0x63c <stepUpdateDelay+0x62>
		{
			CurDelay = MAXDELAY;
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	9a e0       	ldi	r25, 0x0A	; 10
     62a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     62e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
			accSteps = 0;
     632:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
			DECELFLAG = 0;
     636:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <DECELFLAG>
     63a:	44 c0       	rjmp	.+136    	; 0x6c4 <stepUpdateDelay+0xea>
		}else if(accSteps>0){
     63c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <stepUpdateDelay+0x6c>
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <stepUpdateDelay+0xea>
			accSteps--;
     646:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
     650:	39 c0       	rjmp	.+114    	; 0x6c4 <stepUpdateDelay+0xea>
		}
		
	}else if(CurDelay>MINDELAY)
     652:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     656:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     65a:	89 3a       	cpi	r24, 0xA9	; 169
     65c:	92 40       	sbci	r25, 0x02	; 2
     65e:	e0 f1       	brcs	.+120    	; 0x6d8 <stepUpdateDelay+0xfe>
	{
		//Accelerate
		CurDelay = CurDelay -  CurAcc[accSteps];
     660:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     664:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     668:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <accSteps>
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	e8 5a       	subi	r30, 0xA8	; 168
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	82 1b       	sub	r24, r18
     67c:	93 0b       	sbc	r25, r19
     67e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     682:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)//overflow protection
     686:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     68a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     68e:	89 3a       	cpi	r24, 0xA9	; 169
     690:	92 40       	sbci	r25, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <stepUpdateDelay+0xc8>
     694:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     698:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	9a 40       	sbci	r25, 0x0A	; 10
     6a0:	30 f0       	brcs	.+12     	; 0x6ae <stepUpdateDelay+0xd4>
		{
			CurDelay = MINDELAY;
     6a2:	88 ea       	ldi	r24, 0xA8	; 168
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     6aa:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
		}
		if(accSteps<Steps2Acc){
     6ae:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <accSteps>
     6b2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     6b6:	98 17       	cp	r25, r24
     6b8:	28 f4       	brcc	.+10     	; 0x6c4 <stepUpdateDelay+0xea>
			accSteps++;
     6ba:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <accSteps>
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <accSteps>
		return 0;
	}
	
	
	
	OCR3A = CurDelay;//set the new delay
     6c4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
     6c8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
     6cc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     6d0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	08 95       	ret
		if(accSteps<Steps2Acc){
			accSteps++;
		}
	}else
	{
		return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
	
	
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     6da:	08 95       	ret

000006dc <stepRes>:



void stepRes(void){
	accSteps = 0;
     6dc:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <accSteps>
	StepsDelta = 0;
     6e0:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <StepsDelta>
	CurDelay = MAXDELAY;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	9a e0       	ldi	r25, 0x0A	; 10
     6e8:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     6ec:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
     6f0:	08 95       	ret

000006f2 <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     6f2:	e1 e9       	ldi	r30, 0x91	; 145
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	88 60       	ori	r24, 0x08	; 8
     6fa:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	9f ef       	ldi	r25, 0xFF	; 255
     700:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     704:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     708:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     70c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     710:	e1 e7       	ldi	r30, 0x71	; 113
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 83       	st	Z, r24
     71a:	08 95       	ret

0000071c <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     71c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     720:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	3a e0       	ldi	r19, 0x0A	; 10
     728:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     72c:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     730:	e1 e9       	ldi	r30, 0x91	; 145
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	83 60       	ori	r24, 0x03	; 3
     738:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     73a:	88 b3       	in	r24, 0x18	; 24
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     740:	30 93 34 02 	sts	0x0234, r19	; 0x800234 <CurDelay+0x1>
     744:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <CurDelay>
     748:	08 95       	ret

0000074a <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     74a:	e1 e9       	ldi	r30, 0x91	; 145
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	8d 7f       	andi	r24, 0xFD	; 253
     752:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     754:	80 81       	ld	r24, Z
     756:	8e 7f       	andi	r24, 0xFE	; 254
     758:	80 83       	st	Z, r24
     75a:	08 95       	ret

0000075c <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     75c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <CurAcc+0x1>
     760:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	24 c0       	rjmp	.+72     	; 0x7b6 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     76e:	fc 01       	movw	r30, r24
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e8 5a       	subi	r30, 0xA8	; 168
     778:	fd 4f       	sbci	r31, 0xFD	; 253
     77a:	40 81       	ld	r20, Z
     77c:	51 81       	ldd	r21, Z+1	; 0x01
     77e:	24 1b       	sub	r18, r20
     780:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     782:	40 81       	ld	r20, Z
     784:	51 81       	ldd	r21, Z+1	; 0x01
     786:	48 5c       	subi	r20, 0xC8	; 200
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	fc 01       	movw	r30, r24
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	e8 5a       	subi	r30, 0xA8	; 168
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	51 83       	std	Z+1, r21	; 0x01
     796:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     798:	40 81       	ld	r20, Z
     79a:	51 81       	ldd	r21, Z+1	; 0x01
     79c:	41 3e       	cpi	r20, 0xE1	; 225
     79e:	51 05       	cpc	r21, r1
     7a0:	48 f0       	brcs	.+18     	; 0x7b4 <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     7a2:	fc 01       	movw	r30, r24
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	e8 5a       	subi	r30, 0xA8	; 168
     7aa:	fd 4f       	sbci	r31, 0xFD	; 253
     7ac:	40 ee       	ldi	r20, 0xE0	; 224
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	51 83       	std	Z+1, r21	; 0x01
     7b2:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	91 05       	cpc	r25, r1
     7ba:	c8 f2       	brcs	.-78     	; 0x76e <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     7bc:	fc 01       	movw	r30, r24
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e8 5a       	subi	r30, 0xA8	; 168
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	40 ee       	ldi	r20, 0xE0	; 224
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	51 83       	std	Z+1, r21	; 0x01
     7cc:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7ce:	1a c0       	rjmp	.+52     	; 0x804 <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     7d0:	fc 01       	movw	r30, r24
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	e8 5a       	subi	r30, 0xA8	; 168
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	40 81       	ld	r20, Z
     7de:	51 81       	ldd	r21, Z+1	; 0x01
     7e0:	24 1b       	sub	r18, r20
     7e2:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     7e4:	28 3a       	cpi	r18, 0xA8	; 168
     7e6:	42 e0       	ldi	r20, 0x02	; 2
     7e8:	34 07       	cpc	r19, r20
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <stepCalcAcc+0x94>
			delay = MINDELAY;
     7ec:	28 ea       	ldi	r18, 0xA8	; 168
     7ee:	32 e0       	ldi	r19, 0x02	; 2
		}
		steps++;
     7f0:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     7f2:	fc 01       	movw	r30, r24
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	e8 5a       	subi	r30, 0xA8	; 168
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	40 ee       	ldi	r20, 0xE0	; 224
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	51 83       	std	Z+1, r21	; 0x01
     802:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     804:	a9 01       	movw	r20, r18
     806:	40 5a       	subi	r20, 0xA0	; 160
     808:	52 40       	sbci	r21, 0x02	; 2
     80a:	49 3a       	cpi	r20, 0xA9	; 169
     80c:	52 40       	sbci	r21, 0x02	; 2
     80e:	00 f7       	brcc	.-64     	; 0x7d0 <stepCalcAcc+0x74>
     810:	2a c0       	rjmp	.+84     	; 0x866 <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     812:	ac 01       	movw	r20, r24
     814:	4f 5f       	subi	r20, 0xFF	; 255
     816:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     818:	fc 01       	movw	r30, r24
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e8 5a       	subi	r30, 0xA8	; 168
     820:	fd 4f       	sbci	r31, 0xFD	; 253
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	26 1b       	sub	r18, r22
     828:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     82a:	60 81       	ld	r22, Z
     82c:	71 81       	ldd	r23, Z+1	; 0x01
     82e:	68 33       	cpi	r22, 0x38	; 56
     830:	71 05       	cpc	r23, r1
     832:	48 f4       	brcc	.+18     	; 0x846 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     834:	fa 01       	movw	r30, r20
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e8 5a       	subi	r30, 0xA8	; 168
     83c:	fd 4f       	sbci	r31, 0xFD	; 253
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     842:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     844:	14 c0       	rjmp	.+40     	; 0x86e <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	fc 01       	movw	r30, r24
     84c:	e8 5a       	subi	r30, 0xA8	; 168
     84e:	fd 4f       	sbci	r31, 0xFD	; 253
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	c8 97       	sbiw	r24, 0x38	; 56
     856:	fa 01       	movw	r30, r20
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e8 5a       	subi	r30, 0xA8	; 168
     85e:	fd 4f       	sbci	r31, 0xFD	; 253
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     864:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     866:	29 3a       	cpi	r18, 0xA9	; 169
     868:	42 e0       	ldi	r20, 0x02	; 2
     86a:	34 07       	cpc	r19, r20
     86c:	90 f6       	brcc	.-92     	; 0x812 <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     86e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     872:	08 95       	ret

00000874 <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     874:	73 df       	rcall	.-282    	; 0x75c <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	9a e0       	ldi	r25, 0x0A	; 10
     87a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <CurDelay+0x1>
     87e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     882:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     886:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     88a:	82 e3       	ldi	r24, 0x32	; 50
     88c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <Parts>

	stepStart();//Start stepTimer
     890:	45 df       	rcall	.-374    	; 0x71c <stepStart>
		
	while(!HALLSENSOR){
     892:	11 c0       	rjmp	.+34     	; 0x8b6 <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     894:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
     898:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
     89c:	99 23       	and	r25, r25
     89e:	1c f4       	brge	.+6      	; 0x8a6 <stepCalibrate+0x32>
     8a0:	91 95       	neg	r25
     8a2:	81 95       	neg	r24
     8a4:	91 09       	sbc	r25, r1
     8a6:	44 97       	sbiw	r24, 0x14	; 20
     8a8:	34 f4       	brge	.+12     	; 0x8b6 <stepCalibrate+0x42>
     8aa:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <HALLSENSOR>
     8ae:	81 11       	cpse	r24, r1
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <stepCalibrate+0x42>
			CurPosition = 0;
     8b2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     8b6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <HALLSENSOR>
     8ba:	88 23       	and	r24, r24
     8bc:	59 f3       	breq	.-42     	; 0x894 <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     8be:	82 e3       	ldi	r24, 0x32	; 50
     8c0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	08 95       	ret

000008c8 <startMotor>:
		return 0x01;
	}else
	{
		return 0x04;
	}
}
     8c8:	85 b1       	in	r24, 0x05	; 5
     8ca:	80 78       	andi	r24, 0x80	; 128
     8cc:	85 b9       	out	0x05, r24	; 5
     8ce:	85 b1       	in	r24, 0x05	; 5
     8d0:	8b 60       	ori	r24, 0x0B	; 11
     8d2:	85 b9       	out	0x05, r24	; 5
     8d4:	16 bc       	out	0x26, r1	; 38
     8d6:	86 ee       	ldi	r24, 0xE6	; 230
     8d8:	87 bd       	out	0x27, r24	; 39
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <MOTORFLAG>
     8e0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     8e4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     8e8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
     8ec:	08 95       	ret

000008ee <runMotor>:
     8ee:	85 b1       	in	r24, 0x05	; 5
     8f0:	80 78       	andi	r24, 0x80	; 128
     8f2:	85 b9       	out	0x05, r24	; 5
     8f4:	85 b1       	in	r24, 0x05	; 5
     8f6:	8b 60       	ori	r24, 0x0B	; 11
     8f8:	85 b9       	out	0x05, r24	; 5
     8fa:	16 bc       	out	0x26, r1	; 38
     8fc:	84 eb       	ldi	r24, 0xB4	; 180
     8fe:	87 bd       	out	0x27, r24	; 39
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <MOTORFLAG>
     906:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
     90a:	08 95       	ret

0000090c <brakeMotor>:
     90c:	85 b1       	in	r24, 0x05	; 5
     90e:	80 78       	andi	r24, 0x80	; 128
     910:	85 b9       	out	0x05, r24	; 5
     912:	85 b1       	in	r24, 0x05	; 5
     914:	8f 60       	ori	r24, 0x0F	; 15
     916:	85 b9       	out	0x05, r24	; 5
     918:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <MOTORFLAG>
     91c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
     920:	08 95       	ret

00000922 <stopMotor>:
     922:	15 b8       	out	0x05, r1	; 5
     924:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <MOTORFLAG>
     928:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
     92c:	08 95       	ret

0000092e <Motor_init>:
     92e:	84 b5       	in	r24, 0x24	; 36
     930:	83 68       	ori	r24, 0x83	; 131
     932:	84 bd       	out	0x24, r24	; 36
     934:	85 b5       	in	r24, 0x25	; 37
     936:	82 60       	ori	r24, 0x02	; 2
     938:	85 bd       	out	0x25, r24	; 37
     93a:	85 b3       	in	r24, 0x15	; 21
     93c:	82 60       	ori	r24, 0x02	; 2
     93e:	85 bb       	out	0x15, r24	; 21
     940:	17 bc       	out	0x27, r1	; 39
     942:	ef cf       	rjmp	.-34     	; 0x922 <stopMotor>
     944:	08 95       	ret

00000946 <motorTimerStart>:
     946:	e1 e2       	ldi	r30, 0x21	; 33
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 81       	ld	r24, Z
     94c:	88 60       	ori	r24, 0x08	; 8
     94e:	80 83       	st	Z, r24
     950:	80 e8       	ldi	r24, 0x80	; 128
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     958:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     95c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     960:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     964:	a3 e7       	ldi	r26, 0x73	; 115
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	8c 91       	ld	r24, X
     96a:	82 60       	ori	r24, 0x02	; 2
     96c:	8c 93       	st	X, r24
     96e:	80 81       	ld	r24, Z
     970:	85 60       	ori	r24, 0x05	; 5
     972:	80 83       	st	Z, r24
     974:	8a b3       	in	r24, 0x1a	; 26
     976:	82 60       	ori	r24, 0x02	; 2
     978:	8a bb       	out	0x1a, r24	; 26
     97a:	84 eb       	ldi	r24, 0xB4	; 180
     97c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motorDecSpeed>
     980:	08 95       	ret

00000982 <motorTimerStop>:
     982:	e1 e2       	ldi	r30, 0x21	; 33
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	80 81       	ld	r24, Z
     988:	8a 7f       	andi	r24, 0xFA	; 250
     98a:	80 83       	st	Z, r24
     98c:	08 95       	ret

0000098e <__vector_47>:
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	0b b6       	in	r0, 0x3b	; 59
     99a:	0f 92       	push	r0
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
     9b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <motorDecSpeed>
     9b8:	81 50       	subi	r24, 0x01	; 1
     9ba:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motorDecSpeed>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     9c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     9ca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <motorDecSpeed>
     9ce:	86 39       	cpi	r24, 0x96	; 150
     9d0:	20 f4       	brcc	.+8      	; 0x9da <__vector_47+0x4c>
     9d2:	86 e9       	ldi	r24, 0x96	; 150
     9d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motorDecSpeed>
     9d8:	d4 df       	rcall	.-88     	; 0x982 <motorTimerStop>
     9da:	16 bc       	out	0x26, r1	; 38
     9dc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <motorDecSpeed>
     9e0:	87 bd       	out	0x27, r24	; 39
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0b be       	out	0x3b, r0	; 59
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <ADC_Init>:
     a08:	ec e7       	ldi	r30, 0x7C	; 124
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	80 64       	ori	r24, 0x40	; 64
     a10:	80 83       	st	Z, r24
     a12:	80 81       	ld	r24, Z
     a14:	81 60       	ori	r24, 0x01	; 1
     a16:	80 83       	st	Z, r24
     a18:	ea e7       	ldi	r30, 0x7A	; 122
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	80 68       	ori	r24, 0x80	; 128
     a20:	80 83       	st	Z, r24
     a22:	80 81       	ld	r24, Z
     a24:	88 60       	ori	r24, 0x08	; 8
     a26:	80 83       	st	Z, r24
     a28:	80 81       	ld	r24, Z
     a2a:	83 60       	ori	r24, 0x03	; 3
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret

00000a30 <classify>:
     a30:	86 3b       	cpi	r24, 0xB6	; 182
     a32:	23 e0       	ldi	r18, 0x03	; 3
     a34:	92 07       	cpc	r25, r18
     a36:	38 f0       	brcs	.+14     	; 0xa46 <classify+0x16>
     a38:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
     a3e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <countB>
     a42:	82 e3       	ldi	r24, 0x32	; 50
     a44:	08 95       	ret
     a46:	80 32       	cpi	r24, 0x20	; 32
     a48:	23 e0       	ldi	r18, 0x03	; 3
     a4a:	92 07       	cpc	r25, r18
     a4c:	38 f0       	brcs	.+14     	; 0xa5c <classify+0x2c>
     a4e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <countW>
     a58:	86 e9       	ldi	r24, 0x96	; 150
     a5a:	08 95       	ret
     a5c:	80 39       	cpi	r24, 0x90	; 144
     a5e:	91 40       	sbci	r25, 0x01	; 1
     a60:	38 f0       	brcs	.+14     	; 0xa70 <classify+0x40>
     a62:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <countS>
     a6c:	88 ec       	ldi	r24, 0xC8	; 200
     a6e:	08 95       	ret
     a70:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
     a74:	8f 5f       	subi	r24, 0xFF	; 255
     a76:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <countA>
     a7a:	84 e6       	ldi	r24, 0x64	; 100
     a7c:	08 95       	ret

00000a7e <debounce>:
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	08 2e       	mov	r0, r24
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <debounce+0xc>
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <debounce+0x8>
     a8e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <debounce+0x18>
     a94:	66 0f       	add	r22, r22
     a96:	8a 95       	dec	r24
     a98:	ea f7       	brpl	.-6      	; 0xa94 <debounce+0x16>
     a9a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     a9e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     aa2:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     aa6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     aaa:	0f c0       	rjmp	.+30     	; 0xaca <debounce+0x4c>
     aac:	99 b1       	in	r25, 0x09	; 9
     aae:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     ab2:	89 23       	and	r24, r25
     ab4:	68 13       	cpse	r22, r24
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <debounce+0x62>
     ab8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     abc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     ac6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     aca:	84 2f       	mov	r24, r20
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     ad2:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	40 f3       	brcs	.-48     	; 0xaac <debounce+0x2e>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	08 95       	ret
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret

00000ae4 <debouncePINJ>:
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	08 2e       	mov	r0, r24
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <debouncePINJ+0xc>
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	0a 94       	dec	r0
     af2:	e2 f7       	brpl	.-8      	; 0xaec <debouncePINJ+0x8>
     af4:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <mask>
     af8:	01 c0       	rjmp	.+2      	; 0xafc <debouncePINJ+0x18>
     afa:	66 0f       	add	r22, r22
     afc:	8a 95       	dec	r24
     afe:	ea f7       	brpl	.-6      	; 0xafa <debouncePINJ+0x16>
     b00:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     b04:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     b08:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <countCheck+0x1>
     b0c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <countCheck>
     b10:	10 c0       	rjmp	.+32     	; 0xb32 <debouncePINJ+0x4e>
     b12:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     b16:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <mask>
     b1a:	89 23       	and	r24, r25
     b1c:	68 13       	cpse	r22, r24
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <debouncePINJ+0x64>
     b20:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <countCheck>
     b24:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <countCheck+0x1>
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <countCheck+0x1>
     b2e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <countCheck>
     b32:	84 2f       	mov	r24, r20
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <countCheck>
     b3a:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <countCheck+0x1>
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	38 f3       	brcs	.-50     	; 0xb12 <debouncePINJ+0x2e>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	08 95       	ret
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <mTimer_init>:




void mTimer_init(){
	TCCR1B |= _BV(CS11);//Set prescaler to 8
     b4c:	e1 e8       	ldi	r30, 0x81	; 129
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); // Configure counter for CTC mode;
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	80 83       	st	Z, r24
	OCR1A = 0x03E8; //Set top value for Timer counter
     b5c:	88 ee       	ldi	r24, 0xE8	; 232
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     b64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     b68:	08 95       	ret

00000b6a <mTimer>:


void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
     b6a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     b6e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
     b72:	26 b3       	in	r18, 0x16	; 22
     b74:	22 60       	ori	r18, 0x02	; 2
     b76:	26 bb       	out	0x16, r18	; 22



void mTimer(int count){
	int i; //counter for ms
	i = 0;
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     b7c:	07 c0       	rjmp	.+14     	; 0xb8c <mTimer+0x22>
		if((TIFR1 & 0x02) == 0x02){
     b7e:	b1 9b       	sbis	0x16, 1	; 22
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <mTimer+0x22>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
     b82:	46 b3       	in	r20, 0x16	; 22
     b84:	42 60       	ori	r20, 0x02	; 2
     b86:	46 bb       	out	0x16, r20	; 22
			i++;	//increment counter to count milliseconds
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer(int count){
	int i; //counter for ms
	i = 0;
	TCNT1 = 0x0000; //Counter value register; Reset to 0
	TIFR1 |= _BV(OCF1A); //Set the OC interrupt flag by writing 1
	while(i<count){
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	b4 f3       	brlt	.-20     	; 0xb7e <mTimer+0x14>
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     b92:	08 95       	ret

00000b94 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     b94:	e1 ea       	ldi	r30, 0xA1	; 161
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 60       	ori	r24, 0x08	; 8
     b9c:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     ba6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     baa:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     bae:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     bb2:	a2 e7       	ldi	r26, 0x72	; 114
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	8c 91       	ld	r24, X
     bb8:	82 60       	ori	r24, 0x02	; 2
     bba:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     bbc:	80 81       	ld	r24, Z
     bbe:	85 60       	ori	r24, 0x05	; 5
     bc0:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     bc2:	89 b3       	in	r24, 0x19	; 25
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	89 bb       	out	0x19, r24	; 25
     bc8:	08 95       	ret

00000bca <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     bca:	e1 ea       	ldi	r30, 0xA1	; 161
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8a 7f       	andi	r24, 0xFA	; 250
     bd2:	80 83       	st	Z, r24
     bd4:	08 95       	ret

00000bd6 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     bd6:	e1 ea       	ldi	r30, 0xA1	; 161
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	85 60       	ori	r24, 0x05	; 5
     bde:	80 83       	st	Z, r24
     be0:	08 95       	ret

00000be2 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     bf0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     bf4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <runTime_d+0x1>
     bfe:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <runTime_d>
	
}//ISR
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	8f 93       	push	r24
	PORTC = 0xFF;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     c20:	8f 91       	pop	r24
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	b9 da       	rcall	.-2702   	; 0x1a4 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	9b db       	rcall	.-2250   	; 0x36e <LCDGotoXY>
     c38:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	35 db       	rcall	.-2454   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c44:	83 e1       	ldi	r24, 0x13	; 19
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	25 db       	rcall	.-2486   	; 0x294 <LCDWriteString>
     c4a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
		LCDWriteInt( countA, 2);
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2c db       	rcall	.-2472   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c56:	83 e1       	ldi	r24, 0x13	; 19
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	1c db       	rcall	.-2504   	; 0x294 <LCDWriteString>
		LCDWriteInt( countW, 2);
     c5c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     c60:	62 e0       	ldi	r22, 0x02	; 2
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	23 db       	rcall	.-2490   	; 0x2ae <LCDWriteInt>
		LCDWriteString(",");
     c68:	83 e1       	ldi	r24, 0x13	; 19
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	13 db       	rcall	.-2522   	; 0x294 <LCDWriteString>
		LCDWriteInt(countS, 2);
     c6e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	1a db       	rcall	.-2508   	; 0x2ae <LCDWriteInt>
		LCDWriteString("->");
     c7a:	85 e1       	ldi	r24, 0x15	; 21
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0a db       	rcall	.-2540   	; 0x294 <LCDWriteString>
		LCDWriteInt(countSort, 2);
     c80:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countSort>
     c84:	62 e0       	ldi	r22, 0x02	; 2
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	11 db       	rcall	.-2526   	; 0x2ae <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	6e db       	rcall	.-2340   	; 0x36e <LCDGotoXY>
     c92:	88 e1       	ldi	r24, 0x18	; 24
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	fe da       	rcall	.-2564   	; 0x294 <LCDWriteString>
     c98:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
     c9c:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <runTime_d+0x1>
     ca0:	36 95       	lsr	r19
     ca2:	27 95       	ror	r18
     ca4:	36 95       	lsr	r19
     ca6:	27 95       	ror	r18
     ca8:	36 95       	lsr	r19
     caa:	27 95       	ror	r18
     cac:	a5 ec       	ldi	r26, 0xC5	; 197
     cae:	b0 e2       	ldi	r27, 0x20	; 32
     cb0:	40 d5       	rcall	.+2688   	; 0x1732 <__umulhisi3>
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	92 95       	swap	r25
     cb8:	82 95       	swap	r24
     cba:	8f 70       	andi	r24, 0x0F	; 15
     cbc:	89 27       	eor	r24, r25
     cbe:	9f 70       	andi	r25, 0x0F	; 15
     cc0:	89 27       	eor	r24, r25
     cc2:	f5 da       	rcall	.-2582   	; 0x2ae <LCDWriteInt>
		LCDWriteString( ".");
     cc4:	8b e1       	ldi	r24, 0x1B	; 27
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	e5 da       	rcall	.-2614   	; 0x294 <LCDWriteString>
     cca:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
     cce:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <runTime_d+0x1>
     cd2:	9a 01       	movw	r18, r20
     cd4:	ad ec       	ldi	r26, 0xCD	; 205
     cd6:	bc ec       	ldi	r27, 0xCC	; 204
     cd8:	2c d5       	rcall	.+2648   	; 0x1732 <__umulhisi3>
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	96 95       	lsr	r25
     ce4:	87 95       	ror	r24
     ce6:	9c 01       	movw	r18, r24
     ce8:	22 0f       	add	r18, r18
     cea:	33 1f       	adc	r19, r19
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	9a 01       	movw	r18, r20
     d02:	28 1b       	sub	r18, r24
     d04:	39 0b       	sbc	r19, r25
     d06:	c9 01       	movw	r24, r18
     d08:	d2 da       	rcall	.-2652   	; 0x2ae <LCDWriteInt>
     d0a:	8d e1       	ldi	r24, 0x1D	; 29
		LCDWriteString("s Complete");
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	c2 ca       	rjmp	.-2684   	; 0x294 <LCDWriteString>
     d10:	08 95       	ret

00000d12 <dispStatus>:
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
     d16:	46 da       	rcall	.-2932   	; 0x1a4 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	28 db       	rcall	.-2480   	; 0x36e <LCDGotoXY>
     d1e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countSort>
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	c2 da       	rcall	.-2684   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	1f db       	rcall	.-2498   	; 0x36e <LCDGotoXY>
     d30:	88 e2       	ldi	r24, 0x28	; 40
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	af da       	rcall	.-2722   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	19 db       	rcall	.-2510   	; 0x36e <LCDGotoXY>
     d3c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countPart>
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	b3 da       	rcall	.-2714   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	85 e0       	ldi	r24, 0x05	; 5
     d4c:	10 db       	rcall	.-2528   	; 0x36e <LCDGotoXY>
     d4e:	8a e2       	ldi	r24, 0x2A	; 42
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	a0 da       	rcall	.-2752   	; 0x294 <LCDWriteString>
     d54:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	0a db       	rcall	.-2540   	; 0x36e <LCDGotoXY>
     d5a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <countB>
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a4 da       	rcall	.-2744   	; 0x2ae <LCDWriteInt>
     d66:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	01 db       	rcall	.-2558   	; 0x36e <LCDGotoXY>
     d6c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <countA>
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9b da       	rcall	.-2762   	; 0x2ae <LCDWriteInt>
     d78:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	f8 da       	rcall	.-2576   	; 0x36e <LCDGotoXY>
     d7e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <countW>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	92 da       	rcall	.-2780   	; 0x2ae <LCDWriteInt>
     d8a:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	ef da       	rcall	.-2594   	; 0x36e <LCDGotoXY>
     d90:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <countS>
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	89 da       	rcall	.-2798   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8a e0       	ldi	r24, 0x0A	; 10
     da0:	e6 da       	rcall	.-2612   	; 0x36e <LCDGotoXY>
     da2:	8c e2       	ldi	r24, 0x2C	; 44
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	76 da       	rcall	.-2836   	; 0x294 <LCDWriteString>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
     dac:	e0 da       	rcall	.-2624   	; 0x36e <LCDGotoXY>
     dae:	8e e2       	ldi	r24, 0x2E	; 46
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	70 da       	rcall	.-2848   	; 0x294 <LCDWriteString>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
     db8:	da da       	rcall	.-2636   	; 0x36e <LCDGotoXY>
     dba:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <runTime_d>
     dbe:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <runTime_d+0x1>
     dc2:	36 95       	lsr	r19
     dc4:	27 95       	ror	r18
     dc6:	36 95       	lsr	r19
     dc8:	27 95       	ror	r18
     dca:	ab e7       	ldi	r26, 0x7B	; 123
     dcc:	b4 e1       	ldi	r27, 0x14	; 20
     dce:	b1 d4       	rcall	.+2402   	; 0x1732 <__umulhisi3>
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	96 95       	lsr	r25
     dd6:	87 95       	ror	r24
     dd8:	6a da       	rcall	.-2860   	; 0x2ae <LCDWriteInt>
	

	LCDWriteIntXY(0, 1, CurPosition, 3);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	c7 da       	rcall	.-2674   	; 0x36e <LCDGotoXY>
     de0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     de4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	60 da       	rcall	.-2880   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(3,1, ">");
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	bd da       	rcall	.-2694   	; 0x36e <LCDGotoXY>
     df4:	86 e1       	ldi	r24, 0x16	; 22
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	4d da       	rcall	.-2918   	; 0x294 <LCDWriteString>
     dfa:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(4, 1, Parts[countSort], 3);
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	b7 da       	rcall	.-2706   	; 0x36e <LCDGotoXY>
     e00:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <countSort>
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	e4 54       	subi	r30, 0x44	; 68
     e08:	fd 4f       	sbci	r31, 0xFD	; 253
     e0a:	80 81       	ld	r24, Z
     e0c:	63 e0       	ldi	r22, 0x03	; 3
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	4d da       	rcall	.-2918   	; 0x2ae <LCDWriteInt>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	8c e0       	ldi	r24, 0x0C	; 12
     e18:	aa da       	rcall	.-2732   	; 0x36e <LCDGotoXY>
	//LCDWriteStringXY(8, 1,"D" );
	//LCDWriteIntXY(8, 1, exitdropTime/1000, 2);//delay in ms
	LCDWriteIntXY(12, 1, adcDisp, 4);
     e1a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <adcDisp>
     e1e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <adcDisp+0x1>
     e22:	64 e0       	ldi	r22, 0x04	; 4
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	43 ca       	rjmp	.-2938   	; 0x2ae <LCDWriteInt>
     e28:	08 95       	ret

00000e2a <main>:
     e2a:	e1 e6       	ldi	r30, 0x61	; 97
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 e8       	ldi	r24, 0x80	; 128
     e30:	80 83       	st	Z, r24
     e32:	81 e0       	ldi	r24, 0x01	; 1

uint16_t calcExitTime(void)
{
	
	return 1;
}
     e34:	80 83       	st	Z, r24
     e36:	f8 94       	cli
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	81 b9       	out	0x01, r24	; 1
     e3c:	84 b9       	out	0x04, r24	; 4
     e3e:	87 b9       	out	0x07, r24	; 7
     e40:	1a b8       	out	0x0a, r1	; 10
     e42:	e4 e0       	ldi	r30, 0x04	; 4
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	80 81       	ld	r24, Z
     e48:	8e 7f       	andi	r24, 0xFE	; 254
     e4a:	80 83       	st	Z, r24
     e4c:	e9 e6       	ldi	r30, 0x69	; 105
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	82 60       	ori	r24, 0x02	; 2
     e54:	80 83       	st	Z, r24
     e56:	80 81       	ld	r24, Z
     e58:	8c 60       	ori	r24, 0x0C	; 12
     e5a:	80 83       	st	Z, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	80 62       	ori	r24, 0x20	; 32
     e60:	80 83       	st	Z, r24
     e62:	80 81       	ld	r24, Z
     e64:	80 6c       	ori	r24, 0xC0	; 192
     e66:	80 83       	st	Z, r24
     e68:	e8 e6       	ldi	r30, 0x68	; 104
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	80 83       	st	Z, r24
     e72:	ec e6       	ldi	r30, 0x6C	; 108
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	80 83       	st	Z, r24
     e7c:	c5 dd       	rcall	.-1142   	; 0xa08 <ADC_Init>
     e7e:	66 de       	rcall	.-820    	; 0xb4c <mTimer_init>
     e80:	38 dc       	rcall	.-1936   	; 0x6f2 <stepTimer_init>
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	c6 d9       	rcall	.-3188   	; 0x212 <InitLCD>
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	8c d9       	rcall	.-3304   	; 0x1a4 <LCDByte>
     e8c:	8d b3       	in	r24, 0x1d	; 29
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	8d bb       	out	0x1d, r24	; 29
     e92:	78 94       	sei
     e94:	ef dc       	rcall	.-1570   	; 0x874 <stepCalibrate>
     e96:	80 ed       	ldi	r24, 0xD0	; 208
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	67 de       	rcall	.-818    	; 0xb6a <mTimer>
     e9c:	8d b3       	in	r24, 0x1d	; 29
     e9e:	87 60       	ori	r24, 0x07	; 7
     ea0:	8d bb       	out	0x1d, r24	; 29
     ea2:	8d b3       	in	r24, 0x1d	; 29
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	8d bb       	out	0x1d, r24	; 29
     ea8:	42 dd       	rcall	.-1404   	; 0x92e <Motor_init>
     eaa:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <countPart>
     eae:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <countSort>
     eb2:	0a dd       	rcall	.-1516   	; 0x8c8 <startMotor>
     eb4:	6f de       	rcall	.-802    	; 0xb94 <runTimerStart>
     eb6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
     eba:	88 23       	and	r24, r24
     ebc:	b9 f1       	breq	.+110    	; 0xf2c <main+0x102>
     ebe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     ec2:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     ec6:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <refreshTime>
     eca:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <refreshTime+0x1>
     ece:	82 1b       	sub	r24, r18
     ed0:	93 0b       	sbc	r25, r19
     ed2:	85 36       	cpi	r24, 0x65	; 101
     ed4:	91 05       	cpc	r25, r1
     ed6:	48 f0       	brcs	.+18     	; 0xeea <main+0xc0>
     ed8:	1c df       	rcall	.-456    	; 0xd12 <dispStatus>
     eda:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     ede:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     ee2:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <refreshTime+0x1>
     ee6:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <refreshTime>
     eea:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <RAMPDOWN>
     eee:	88 23       	and	r24, r24
     ef0:	11 f3       	breq	.-60     	; 0xeb6 <main+0x8c>
     ef2:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <countSort>
     ef6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countPart>
     efa:	98 17       	cp	r25, r24
     efc:	49 f0       	breq	.+18     	; 0xf10 <main+0xe6>
     efe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     f02:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     f06:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rampTime_d+0x1>
     f0a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rampTime_d>
     f0e:	d3 cf       	rjmp	.-90     	; 0xeb6 <main+0x8c>
     f10:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     f14:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     f18:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <rampTime_d>
     f1c:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <rampTime_d+0x1>
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	81 3a       	cpi	r24, 0xA1	; 161
     f26:	9f 40       	sbci	r25, 0x0F	; 15
     f28:	30 f2       	brcs	.-116    	; 0xeb6 <main+0x8c>
     f2a:	20 c0       	rjmp	.+64     	; 0xf6c <main+0x142>
     f2c:	ef dc       	rcall	.-1570   	; 0x90c <brakeMotor>
     f2e:	48 9b       	sbis	0x09, 0	; 9
     f30:	fe cf       	rjmp	.-4      	; 0xf2e <main+0x104>
     f32:	0b dc       	rcall	.-2026   	; 0x74a <stepStop>
     f34:	4a de       	rcall	.-876    	; 0xbca <runTimerStop>
     f36:	cd b3       	in	r28, 0x1d	; 29
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	8d bb       	out	0x1d, r24	; 29
     f3c:	ec e6       	ldi	r30, 0x6C	; 108
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8d 7f       	andi	r24, 0xFD	; 253
     f44:	80 83       	st	Z, r24
     f46:	ed dc       	rcall	.-1574   	; 0x922 <stopMotor>
     f48:	c9 db       	rcall	.-2158   	; 0x6dc <stepRes>
     f4a:	e3 de       	rcall	.-570    	; 0xd12 <dispStatus>
     f4c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
     f50:	88 23       	and	r24, r24
     f52:	e1 f3       	breq	.-8      	; 0xf4c <main+0x122>
     f54:	48 9b       	sbis	0x09, 0	; 9
     f56:	fe cf       	rjmp	.-4      	; 0xf54 <main+0x12a>
     f58:	cd bb       	out	0x1d, r28	; 29
     f5a:	ec e6       	ldi	r30, 0x6C	; 108
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	80 83       	st	Z, r24
     f64:	38 de       	rcall	.-912    	; 0xbd6 <runTimerResume>
     f66:	da db       	rcall	.-2124   	; 0x71c <stepStart>
     f68:	36 de       	rcall	.-916    	; 0xbd6 <runTimerResume>
     f6a:	a5 cf       	rjmp	.-182    	; 0xeb6 <main+0x8c>
     f6c:	f8 94       	cli
     f6e:	15 b8       	out	0x05, r1	; 5
     f70:	12 b8       	out	0x02, r1	; 2
     f72:	5c de       	rcall	.-840    	; 0xc2c <dispComplete>
     f74:	ff cf       	rjmp	.-2      	; 0xf74 <main+0x14a>

00000f76 <__vector_2>:
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	0b b6       	in	r0, 0x3b	; 59
     f82:	0f 92       	push	r0
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
     fa4:	88 23       	and	r24, r24
     fa6:	69 f1       	breq	.+90     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     fa8:	4c e3       	ldi	r20, 0x3C	; 60
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	67 dd       	rcall	.-1330   	; 0xa7e <debounce>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_2+0x40>
     fb4:	79 c0       	rjmp	.+242    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
     fb6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ORFLAG>
     fba:	8d b3       	in	r24, 0x1d	; 29
     fbc:	8d 7f       	andi	r24, 0xFD	; 253
     fbe:	8d bb       	out	0x1d, r24	; 29
     fc0:	e9 e6       	ldi	r30, 0x69	; 105
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	80 83       	st	Z, r24
     fca:	8d b3       	in	r24, 0x1d	; 29
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	8d bb       	out	0x1d, r24	; 29
     fd0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <countADC+0x1>
     fd4:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <countADC>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
     fe0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
     fe4:	ea e7       	ldi	r30, 0x7A	; 122
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	80 83       	st	Z, r24
     fee:	ab dc       	rcall	.-1706   	; 0x946 <motorTimerStart>
     ff0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
     ff4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
     ff8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <ORTime_s+0x1>
     ffc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <ORTime_s>
    1000:	53 c0       	rjmp	.+166    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1002:	4c e3       	ldi	r20, 0x3C	; 60
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	3a dd       	rcall	.-1420   	; 0xa7e <debounce>
    100a:	88 23       	and	r24, r24
    100c:	09 f4       	brne	.+2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100e:	4c c0       	rjmp	.+152    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1010:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    1014:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    1018:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <ORTime_s>
    101c:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <ORTime_s+0x1>
    1020:	82 1b       	sub	r24, r18
    1022:	93 0b       	sbc	r25, r19
    1024:	06 97       	sbiw	r24, 0x06	; 6
    1026:	08 f4       	brcc	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	3f c0       	rjmp	.+126    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ORFLAG>
    1030:	8d b3       	in	r24, 0x1d	; 29
    1032:	8d 7f       	andi	r24, 0xFD	; 253
    1034:	8d bb       	out	0x1d, r24	; 29
    1036:	e9 e6       	ldi	r30, 0x69	; 105
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	84 60       	ori	r24, 0x04	; 4
    103e:	80 83       	st	Z, r24
    1040:	8d b3       	in	r24, 0x1d	; 29
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8d bb       	out	0x1d, r24	; 29
    1046:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    104a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    104e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <adcDisp+0x1>
    1052:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcDisp>
    1056:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    105a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    105e:	82 3f       	cpi	r24, 0xF2	; 242
    1060:	93 40       	sbci	r25, 0x03	; 3
    1062:	10 f5       	brcc	.+68     	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1064:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countADC>
    1068:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <countADC+0x1>
    106c:	c3 97       	sbiw	r24, 0x33	; 51
    106e:	e0 f0       	brcs	.+56     	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1070:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <countPart>
    1074:	d0 e0       	ldi	r29, 0x00	; 0
    1076:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    107a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    107e:	d8 dc       	rcall	.-1616   	; 0xa30 <classify>
    1080:	c4 54       	subi	r28, 0x44	; 68
    1082:	dd 4f       	sbci	r29, 0xFD	; 253
    1084:	88 83       	st	Y, r24
    1086:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <countPart>
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <countPart>
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	a4 54       	subi	r26, 0x44	; 68
    1094:	bd 4f       	sbci	r27, 0xFD	; 253
    1096:	8c 91       	ld	r24, X
    1098:	e3 54       	subi	r30, 0x43	; 67
    109a:	fd 4f       	sbci	r31, 0xFD	; 253
    109c:	80 83       	st	Z, r24
    109e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countPart>
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <countPart>
    10a8:	8c b3       	in	r24, 0x1c	; 28
    10aa:	82 60       	ori	r24, 0x02	; 2
    10ac:	8c bb       	out	0x1c, r24	; 28
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0b be       	out	0x3b, r0	; 59
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_3>:



//EX ISR //376 - 471 cycles
ISR(INT2_vect){
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
	
	
	if(!EXFLAG)
    10fe:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <EXFLAG>
    1102:	81 11       	cpse	r24, r1
    1104:	6d c0       	rjmp	.+218    	; 0x11e0 <__vector_3+0x108>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    1106:	4c e3       	ldi	r20, 0x3C	; 60
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	b8 dc       	rcall	.-1680   	; 0xa7e <debounce>
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <__vector_3+0x3c>
    1112:	06 c1       	rjmp	.+524    	; 0x1320 <__vector_3+0x248>
			{
				EXFLAG =1;//Part is at EX
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    111a:	8d b3       	in	r24, 0x1d	; 29
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    1120:	e9 e6       	ldi	r30, 0x69	; 105
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 61       	ori	r24, 0x10	; 16
    1128:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    112a:	8d b3       	in	r24, 0x1d	; 29
    112c:	84 60       	ori	r24, 0x04	; 4
				
				stepUpdateError();
    112e:	8d bb       	out	0x1d, r24	; 29
    1130:	6c d9       	rcall	.-3368   	; 0x40a <stepUpdateError>
				enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    1132:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
    1136:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    113a:	88 5a       	subi	r24, 0xA8	; 168
    113c:	92 40       	sbci	r25, 0x02	; 2
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    1146:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	24 1b       	sub	r18, r20
    114e:	31 09       	sbc	r19, r1
    1150:	28 9f       	mul	r18, r24
    1152:	a0 01       	movw	r20, r0
    1154:	29 9f       	mul	r18, r25
    1156:	50 0d       	add	r21, r0
    1158:	38 9f       	mul	r19, r24
    115a:	50 0d       	add	r21, r0
    115c:	11 24       	eor	r1, r1
								+ (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
    115e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
    1162:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
    1166:	99 23       	and	r25, r25
    1168:	1c f4       	brge	.+6      	; 0x1170 <__vector_3+0x98>
    116a:	91 95       	neg	r25
    116c:	81 95       	neg	r24
    116e:	91 09       	sbc	r25, r1
    1170:	46 97       	sbiw	r24, 0x16	; 22
    1172:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    1176:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	26 1b       	sub	r18, r22
    117e:	31 09       	sbc	r19, r1
    1180:	82 1b       	sub	r24, r18
    1182:	93 0b       	sbc	r25, r19
    1184:	68 ea       	ldi	r22, 0xA8	; 168
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	86 9f       	mul	r24, r22
    118a:	90 01       	movw	r18, r0
    118c:	87 9f       	mul	r24, r23
    118e:	30 0d       	add	r19, r0
    1190:	96 9f       	mul	r25, r22
    1192:	30 0d       	add	r19, r0
    1194:	11 24       	eor	r1, r1
    1196:	c9 01       	movw	r24, r18
    1198:	84 0f       	add	r24, r20
    119a:	95 1f       	adc	r25, r21
				EIMSK &= ~_BV(INT2);
				EICRA |= _BV(ISC20);// Rising Edge
				EIMSK |= _BV(INT2); //Enable Interrupt
				
				stepUpdateError();
				enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    119c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <enterTime+0x1>
    11a0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <enterTime>
								+ (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
				
				if(MOTORFLAG)
    11a4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
    11a8:	88 23       	and	r24, r24
    11aa:	49 f0       	breq	.+18     	; 0x11be <__vector_3+0xe6>
				{
					if(enterTime>ENTER_DROP_TIME)
    11ac:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <enterTime>
    11b0:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <enterTime+0x1>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	90 48       	sbci	r25, 0x80	; 128
					{
						brakeMotor();//brake motor
    11b8:	50 f0       	brcs	.+20     	; 0x11ce <__vector_3+0xf6>
    11ba:	a8 db       	rcall	.-2224   	; 0x90c <brakeMotor>
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <__vector_3+0xf6>
					}
				}else
				{
					if(enterTime>RUNNING_ENTER_DROP_TIME)
    11be:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <enterTime>
    11c2:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <enterTime+0x1>
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	90 46       	sbci	r25, 0x60	; 96
					{
						brakeMotor();//brake motor
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__vector_3+0xf6>
    11cc:	9f db       	rcall	.-2242   	; 0x90c <brakeMotor>
					}	
				}
				EXTime_s = runTime_d;
    11ce:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    11d2:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    11d6:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <EXTime_s+0x1>
    11da:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <EXTime_s>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME)	)
    11de:	a0 c0       	rjmp	.+320    	; 0x1320 <__vector_3+0x248>
    11e0:	4c e3       	ldi	r20, 0x3C	; 60
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	4b dc       	rcall	.-1898   	; 0xa7e <debounce>
    11e8:	88 23       	and	r24, r24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <__vector_3+0x116>
    11ec:	99 c0       	rjmp	.+306    	; 0x1320 <__vector_3+0x248>
    11ee:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    11f2:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    11f6:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <EXTime_s>
    11fa:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <EXTime_s+0x1>
    11fe:	82 1b       	sub	r24, r18
    1200:	93 0b       	sbc	r25, r19
    1202:	06 97       	sbiw	r24, 0x06	; 6
    1204:	08 f4       	brcc	.+2      	; 0x1208 <__vector_3+0x130>
    1206:	8c c0       	rjmp	.+280    	; 0x1320 <__vector_3+0x248>
		{
				EXFLAG = 0;
    1208:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <EXFLAG>
				EIMSK &= ~_BV(INT2);
    120c:	8d b3       	in	r24, 0x1d	; 29
    120e:	8b 7f       	andi	r24, 0xFB	; 251
    1210:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    1212:	e9 e6       	ldi	r30, 0x69	; 105
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8f 7e       	andi	r24, 0xEF	; 239
    121a:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    121c:	8d b3       	in	r24, 0x1d	; 29
    121e:	84 60       	ori	r24, 0x04	; 4
    1220:	8d bb       	out	0x1d, r24	; 29

				if(countSort<countPart)
    1222:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <countSort>
    1226:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countPart>
    122a:	98 17       	cp	r25, r24
    122c:	38 f4       	brcc	.+14     	; 0x123c <__vector_3+0x164>
				{
					countSort+=1;//go to next part immediately
    122e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countSort>
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <countSort>
					TARGETFLAG =0;
    1238:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION){
    123c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
    1240:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
    1244:	99 23       	and	r25, r25
    1246:	1c f4       	brge	.+6      	; 0x124e <__vector_3+0x176>
    1248:	91 95       	neg	r25
    124a:	81 95       	neg	r24
    124c:	91 09       	sbc	r25, r1
    124e:	47 97       	sbiw	r24, 0x17	; 23
					brakeMotor();
    1250:	2c f0       	brlt	.+10     	; 0x125c <__vector_3+0x184>
    1252:	5c db       	rcall	.-2376   	; 0x90c <brakeMotor>
					SLIPFLAG = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <SLIPFLAG>
    125a:	62 c0       	rjmp	.+196    	; 0x1320 <__vector_3+0x248>
				}else
				{
						exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    125c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
    1260:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    1264:	88 5a       	subi	r24, 0xA8	; 168
    1266:	92 40       	sbci	r25, 0x02	; 2
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    1270:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	24 1b       	sub	r18, r20
    1278:	31 09       	sbc	r19, r1
    127a:	28 9f       	mul	r18, r24
    127c:	a0 01       	movw	r20, r0
    127e:	29 9f       	mul	r18, r25
    1280:	50 0d       	add	r21, r0
    1282:	38 9f       	mul	r19, r24
    1284:	50 0d       	add	r21, r0
    1286:	11 24       	eor	r1, r1
									+ (DROP_REGION - (CurPosition - Parts[countSort-1]) - (Steps2Acc - accSteps))*MINDELAY;				
    1288:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
    128c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <countSort>
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	e5 54       	subi	r30, 0x45	; 69
    1294:	fd 4f       	sbci	r31, 0xFD	; 253
    1296:	80 81       	ld	r24, Z
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	28 1b       	sub	r18, r24
    129c:	31 09       	sbc	r19, r1
    129e:	86 e1       	ldi	r24, 0x16	; 22
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	82 1b       	sub	r24, r18
    12a4:	93 0b       	sbc	r25, r19
    12a6:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    12aa:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	26 1b       	sub	r18, r22
    12b2:	31 09       	sbc	r19, r1
    12b4:	82 1b       	sub	r24, r18
    12b6:	93 0b       	sbc	r25, r19
    12b8:	68 ea       	ldi	r22, 0xA8	; 168
    12ba:	72 e0       	ldi	r23, 0x02	; 2
    12bc:	86 9f       	mul	r24, r22
    12be:	90 01       	movw	r18, r0
    12c0:	87 9f       	mul	r24, r23
    12c2:	30 0d       	add	r19, r0
    12c4:	96 9f       	mul	r25, r22
    12c6:	30 0d       	add	r19, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	42 0f       	add	r20, r18
    12cc:	53 1f       	adc	r21, r19
				if(abs(CurError)>DROP_REGION){
					brakeMotor();
					SLIPFLAG = 1;
				}else
				{
						exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    12ce:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <exitTime+0x1>
    12d2:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <exitTime>
									+ (DROP_REGION - (CurPosition - Parts[countSort-1]) - (Steps2Acc - accSteps))*MINDELAY;				
						
						if(MOTORFLAG)
    12d6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>
    12da:	88 23       	and	r24, r24
    12dc:	89 f0       	breq	.+34     	; 0x1300 <__vector_3+0x228>
						{
							if(exitTime<RUNNING_EXIT_DROP_TIME)
    12de:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <exitTime>
    12e2:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <exitTime+0x1>
    12e6:	81 15       	cp	r24, r1
    12e8:	90 45       	sbci	r25, 0x50	; 80
    12ea:	d0 f4       	brcc	.+52     	; 0x1320 <__vector_3+0x248>
							{
								PAUSEFLAG = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <PAUSEFLAG>
								exitdropTime = RUNNING_EXIT_DROP_TIME;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e5       	ldi	r25, 0x50	; 80
    12f6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
    12fa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
    12fe:	10 c0       	rjmp	.+32     	; 0x1320 <__vector_3+0x248>
							}
						}else
						{
							if(exitTime<EXIT_DROP_TIME)
    1300:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <exitTime>
    1304:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <exitTime+0x1>
    1308:	88 3a       	cpi	r24, 0xA8	; 168
    130a:	98 47       	sbci	r25, 0x78	; 120
    130c:	48 f4       	brcc	.+18     	; 0x1320 <__vector_3+0x248>
							{
								PAUSEFLAG = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <PAUSEFLAG>
								exitdropTime = EXIT_DROP_TIME;
    1314:	88 ea       	ldi	r24, 0xA8	; 168
    1316:	98 e7       	ldi	r25, 0x78	; 120
    1318:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
    131c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
				
			
				
		}//HI
	}
	EIFR |= _BV(INT2);
    1320:	8c b3       	in	r24, 0x1c	; 28
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	8c bb       	out	0x1c, r24	; 28
}//EX
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0b be       	out	0x3b, r0	; 59
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <__vector_32>:




//STEPPER ISR  //84 - 250 cycles
ISR(TIMER3_COMPA_vect){
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	0b b6       	in	r0, 0x3b	; 59
    1358:	0f 92       	push	r0
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    1372:	05 d8       	rcall	.-4086   	; 0x37e <step>
	stepUpdateError(); //calculate the stepper position error
    1374:	4a d8       	rcall	.-3948   	; 0x40a <stepUpdateError>
    1376:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PAUSEFLAG>
	
	if(PAUSEFLAG)
    137a:	88 23       	and	r24, r24
    137c:	09 f4       	brne	.+2      	; 0x1380 <__vector_32+0x34>
    137e:	5e c0       	rjmp	.+188    	; 0x143c <__vector_32+0xf0>
    1380:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
	{
		
		exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
    1384:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    1388:	88 5a       	subi	r24, 0xA8	; 168
    138a:	92 40       	sbci	r25, 0x02	; 2
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    1394:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	24 1b       	sub	r18, r20
    139c:	31 09       	sbc	r19, r1
    139e:	28 9f       	mul	r18, r24
    13a0:	a0 01       	movw	r20, r0
    13a2:	29 9f       	mul	r18, r25
    13a4:	50 0d       	add	r21, r0
    13a6:	38 9f       	mul	r19, r24
    13a8:	50 0d       	add	r21, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
					+ (DROP_REGION - (CurPosition - Parts[countSort-1]) - (Steps2Acc - accSteps))*MINDELAY;
    13b0:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <countSort>
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	e5 54       	subi	r30, 0x45	; 69
    13b8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ba:	80 81       	ld	r24, Z
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	28 1b       	sub	r18, r24
    13c0:	31 09       	sbc	r19, r1
    13c2:	86 e1       	ldi	r24, 0x16	; 22
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	82 1b       	sub	r24, r18
    13c8:	93 0b       	sbc	r25, r19
    13ca:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    13ce:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	26 1b       	sub	r18, r22
    13d6:	31 09       	sbc	r19, r1
    13d8:	82 1b       	sub	r24, r18
    13da:	93 0b       	sbc	r25, r19
    13dc:	68 ea       	ldi	r22, 0xA8	; 168
    13de:	72 e0       	ldi	r23, 0x02	; 2
    13e0:	86 9f       	mul	r24, r22
    13e2:	90 01       	movw	r18, r0
    13e4:	87 9f       	mul	r24, r23
    13e6:	30 0d       	add	r19, r0
    13e8:	96 9f       	mul	r25, r22
    13ea:	30 0d       	add	r19, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	42 0f       	add	r20, r18
    13f0:	53 1f       	adc	r21, r19
    13f2:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <exitTime+0x1>
	stepUpdateError(); //calculate the stepper position error
	
	if(PAUSEFLAG)
	{
		
		exitTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps)
    13f6:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <exitTime>
    13fa:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <CurDelay>
					+ (DROP_REGION - (CurPosition - Parts[countSort-1]) - (Steps2Acc - accSteps))*MINDELAY;
		
		exitdropTime -=CurDelay;
    13fe:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <CurDelay+0x1>
    1402:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <exitdropTime>
    1406:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <exitdropTime+0x1>
    140a:	82 1b       	sub	r24, r18
    140c:	93 0b       	sbc	r25, r19
    140e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
    1412:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
    1416:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <exitTime>
		
		if(exitTime>exitdropTime)
    141a:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <exitTime+0x1>
    141e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <exitdropTime>
    1422:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <exitdropTime+0x1>
    1426:	82 17       	cp	r24, r18
    1428:	93 07       	cpc	r25, r19
    142a:	40 f4       	brcc	.+16     	; 0x143c <__vector_32+0xf0>
    142c:	88 ea       	ldi	r24, 0xA8	; 168
		{
			exitdropTime =EXIT_DROP_TIME;
    142e:	98 e7       	ldi	r25, 0x78	; 120
    1430:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <exitdropTime+0x1>
    1434:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <exitdropTime>
    1438:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <PAUSEFLAG>
			PAUSEFLAG = 0;
		}
	}
	
	stepUpdateDir(); //update the stepper direction
    143c:	49 d8       	rcall	.-3950   	; 0x4d0 <stepUpdateDir>
    143e:	cd d8       	rcall	.-3686   	; 0x5da <stepUpdateDelay>
	stepUpdateDelay(); //update the stepper speed
    1440:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <MOTORFLAG>

	


//CONTROL MOTOR
	if(!MOTORFLAG){//If motor is OFF
    1444:	81 11       	cpse	r24, r1
    1446:	5b c0       	rjmp	.+182    	; 0x14fe <__vector_32+0x1b2>
    1448:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
		
		if(abs(CurError)> DROP_REGION){
    144c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
    1450:	99 23       	and	r25, r25
    1452:	1c f4       	brge	.+6      	; 0x145a <__vector_32+0x10e>
    1454:	91 95       	neg	r25
    1456:	81 95       	neg	r24
    1458:	91 09       	sbc	r25, r1
    145a:	47 97       	sbiw	r24, 0x17	; 23
    145c:	0c f4       	brge	.+2      	; 0x1460 <__vector_32+0x114>
    145e:	4e c0       	rjmp	.+156    	; 0x14fc <__vector_32+0x1b0>
    1460:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CurDelay>
			enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    1464:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <CurDelay+0x1>
    1468:	88 5a       	subi	r24, 0xA8	; 168
    146a:	92 40       	sbci	r25, 0x02	; 2
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    1474:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <accSteps>
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	24 1b       	sub	r18, r20
    147c:	31 09       	sbc	r19, r1
    147e:	28 9f       	mul	r18, r24
    1480:	a0 01       	movw	r20, r0
    1482:	29 9f       	mul	r18, r25
    1484:	50 0d       	add	r21, r0
    1486:	38 9f       	mul	r19, r24
    1488:	50 0d       	add	r21, r0
    148a:	11 24       	eor	r1, r1
    148c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <CurError>
							+ (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
    1490:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <CurError+0x1>
    1494:	99 23       	and	r25, r25
    1496:	1c f4       	brge	.+6      	; 0x149e <__vector_32+0x152>
    1498:	91 95       	neg	r25
    149a:	81 95       	neg	r24
    149c:	91 09       	sbc	r25, r1
    149e:	46 97       	sbiw	r24, 0x16	; 22
    14a0:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Steps2Acc>
    14a4:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <accSteps>
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	26 1b       	sub	r18, r22
    14ac:	31 09       	sbc	r19, r1
    14ae:	82 1b       	sub	r24, r18
    14b0:	93 0b       	sbc	r25, r19
    14b2:	68 ea       	ldi	r22, 0xA8	; 168
    14b4:	72 e0       	ldi	r23, 0x02	; 2
    14b6:	86 9f       	mul	r24, r22
    14b8:	90 01       	movw	r18, r0
    14ba:	87 9f       	mul	r24, r23
    14bc:	30 0d       	add	r19, r0
    14be:	96 9f       	mul	r25, r22
    14c0:	30 0d       	add	r19, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	c9 01       	movw	r24, r18
    14c6:	84 0f       	add	r24, r20
    14c8:	95 1f       	adc	r25, r21
    14ca:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <enterTime+0x1>

//CONTROL MOTOR
	if(!MOTORFLAG){//If motor is OFF
		
		if(abs(CurError)> DROP_REGION){
			enterTime  = (CurDelay - MINDELAY)/2 * (Steps2Acc - accSteps) 
    14ce:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <enterTime>
    14d2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <SLIPFLAG>
							+ (abs(CurError)- DROP_REGION - (Steps2Acc - accSteps))*MINDELAY;
			if(SLIPFLAG)
    14d6:	88 23       	and	r24, r24
    14d8:	49 f0       	breq	.+18     	; 0x14ec <__vector_32+0x1a0>
    14da:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <enterTime>
			{
				if(enterTime<RUNNING_ENTER_DROP_TIME)
    14de:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <enterTime+0x1>
    14e2:	81 15       	cp	r24, r1
    14e4:	90 46       	sbci	r25, 0x60	; 96
    14e6:	58 f4       	brcc	.+22     	; 0x14fe <__vector_32+0x1b2>
				{				
					runMotor();//Turn motor on
    14e8:	02 da       	rcall	.-3068   	; 0x8ee <runMotor>
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <__vector_32+0x1b2>
    14ec:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <enterTime>
				}
			}else
			{
				if(enterTime<ENTER_DROP_TIME)
    14f0:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <enterTime+0x1>
    14f4:	99 23       	and	r25, r25
    14f6:	1c f0       	brlt	.+6      	; 0x14fe <__vector_32+0x1b2>
				{
					runMotor();//Turn motor on
    14f8:	fa d9       	rcall	.-3084   	; 0x8ee <runMotor>
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <__vector_32+0x1b2>
				}
			}
			
		}else
		{
			runMotor();
    14fc:	f8 d9       	rcall	.-3088   	; 0x8ee <runMotor>
    14fe:	ff 91       	pop	r31
		}
	}
//CONTROL MOTOR	

}//stepTimer
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_29>:
    1524:	1f 92       	push	r1

//ADC ISR
ISR(ADC_vect){
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	0b b6       	in	r0, 0x3b	; 59
    1530:	0f 92       	push	r0
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    153e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    1548:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	adcTemp+= (ADCH<<8);
    154c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	98 2f       	mov	r25, r24
    1554:	88 27       	eor	r24, r24
    1556:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    155a:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcTemp+0x1>
    1566:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcTemp>
	countADC+=1;
    156a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countADC>
    156e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <countADC+0x1>
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <countADC+0x1>
    1578:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <countADC>
	
	if(adcTemp<adcPart){
    157c:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <adcTemp>
    1580:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <adcTemp+0x1>
    1584:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcPart>
    1588:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcPart+0x1>
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	40 f4       	brcc	.+16     	; 0x15a2 <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    1592:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcTemp>
    1596:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcTemp+0x1>
    159a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcPart+0x1>
    159e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcPart>
	}
	
	if(!ORFLAG){
    15a2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ORFLAG>
    15a6:	81 11       	cpse	r24, r1
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    15aa:	ea e7       	ldi	r30, 0x7A	; 122
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	80 64       	ori	r24, 0x40	; 64
    15b2:	80 83       	st	Z, r24
	}
}//ADC
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	3f 91       	pop	r19
    15be:	2f 91       	pop	r18
    15c0:	0f 90       	pop	r0
    15c2:	0b be       	out	0x3b, r0	; 59
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_4>:


//HE ISR
ISR(INT3_vect){
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	0b b6       	in	r0, 0x3b	; 59
    15da:	0f 92       	push	r0
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    15f4:	4c e3       	ldi	r20, 0x3C	; 60
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	41 da       	rcall	.-2942   	; 0xa7e <debounce>
    15fc:	88 23       	and	r24, r24
    15fe:	31 f0       	breq	.+12     	; 0x160c <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    1600:	82 e3       	ldi	r24, 0x32	; 50
    1602:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <HALLSENSOR>
	}
}//HE
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0b be       	out	0x3b, r0	; 59
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <__vector_1>:




//ISR Stop Button
ISR(INT0_vect){
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	0b b6       	in	r0, 0x3b	; 59
    163e:	0f 92       	push	r0
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0f da       	rcall	.-3042   	; 0xa7e <debounce>
    1660:	88 23       	and	r24, r24
    1662:	51 f0       	breq	.+20     	; 0x1678 <__vector_1+0x46>
		if(ENABLE)
    1664:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ENABLE>
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <__vector_1+0x40>
		{
			ENABLE = 0;
    166c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ENABLE>
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <ENABLE>
		}
	}
}//ISR Pause Button
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0b be       	out	0x3b, r0	; 59
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_10>:

ISR(PCINT1_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	0b b6       	in	r0, 0x3b	; 59
    16aa:	0f 92       	push	r0
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    16c4:	4a ef       	ldi	r20, 0xFA	; 250
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0c da       	rcall	.-3048   	; 0xae4 <debouncePINJ>
    16cc:	88 23       	and	r24, r24
    16ce:	59 f0       	breq	.+22     	; 0x16e6 <__vector_10+0x48>
		RAMPDOWN = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <RAMPDOWN>
		rampTime_d = runTime_d;	
    16d6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <runTime_d>
    16da:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <runTime_d+0x1>
    16de:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rampTime_d+0x1>
    16e2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rampTime_d>
	}
}//ISR Ramp Button
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__divmodhi4>:
    170c:	97 fb       	bst	r25, 7
    170e:	07 2e       	mov	r0, r23
    1710:	16 f4       	brtc	.+4      	; 0x1716 <__divmodhi4+0xa>
    1712:	00 94       	com	r0
    1714:	06 d0       	rcall	.+12     	; 0x1722 <__divmodhi4_neg1>
    1716:	77 fd       	sbrc	r23, 7
    1718:	08 d0       	rcall	.+16     	; 0x172a <__divmodhi4_neg2>
    171a:	1a d0       	rcall	.+52     	; 0x1750 <__udivmodhi4>
    171c:	07 fc       	sbrc	r0, 7
    171e:	05 d0       	rcall	.+10     	; 0x172a <__divmodhi4_neg2>
    1720:	3e f4       	brtc	.+14     	; 0x1730 <__divmodhi4_exit>

00001722 <__divmodhi4_neg1>:
    1722:	90 95       	com	r25
    1724:	81 95       	neg	r24
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	08 95       	ret

0000172a <__divmodhi4_neg2>:
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255

00001730 <__divmodhi4_exit>:
    1730:	08 95       	ret

00001732 <__umulhisi3>:
    1732:	a2 9f       	mul	r26, r18
    1734:	b0 01       	movw	r22, r0
    1736:	b3 9f       	mul	r27, r19
    1738:	c0 01       	movw	r24, r0
    173a:	a3 9f       	mul	r26, r19
    173c:	70 0d       	add	r23, r0
    173e:	81 1d       	adc	r24, r1
    1740:	11 24       	eor	r1, r1
    1742:	91 1d       	adc	r25, r1
    1744:	b2 9f       	mul	r27, r18
    1746:	70 0d       	add	r23, r0
    1748:	81 1d       	adc	r24, r1
    174a:	11 24       	eor	r1, r1
    174c:	91 1d       	adc	r25, r1
    174e:	08 95       	ret

00001750 <__udivmodhi4>:
    1750:	aa 1b       	sub	r26, r26
    1752:	bb 1b       	sub	r27, r27
    1754:	51 e1       	ldi	r21, 0x11	; 17
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <__udivmodhi4_ep>

00001758 <__udivmodhi4_loop>:
    1758:	aa 1f       	adc	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	a6 17       	cp	r26, r22
    175e:	b7 07       	cpc	r27, r23
    1760:	10 f0       	brcs	.+4      	; 0x1766 <__udivmodhi4_ep>
    1762:	a6 1b       	sub	r26, r22
    1764:	b7 0b       	sbc	r27, r23

00001766 <__udivmodhi4_ep>:
    1766:	88 1f       	adc	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	5a 95       	dec	r21
    176c:	a9 f7       	brne	.-22     	; 0x1758 <__udivmodhi4_loop>
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	08 95       	ret

00001778 <_exit>:
    1778:	f8 94       	cli

0000177a <__stop_program>:
    177a:	ff cf       	rjmp	.-2      	; 0x177a <__stop_program>
