
MECH458_Sorting_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  000019a0  00001a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800240  00800240  00001a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029e7  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b5  00000000  00000000  000046bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001731  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00006fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ade  00000000  00000000  000075e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ff  00000000  00000000  000080be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000092bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_1>
       8:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_2>
       c:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__vector_3>
      10:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_4>
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__vector_9>
      28:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_10>
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_29>
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c7       	rjmp	.+3780   	; 0xf6e <__vector_42>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c6       	rjmp	.+3202   	; 0xd40 <__vector_47>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ea       	ldi	r30, 0xA0	; 160
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 33       	cpi	r26, 0x38	; 56
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <main>
     122:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <_exit>

00000126 <__bad_interrupt>:
     126:	3a c7       	rjmp	.+3700   	; 0xf9c <__vector_default>

00000128 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     128:	87 b1       	in	r24, 0x07	; 7
     12a:	80 7f       	andi	r24, 0xF0	; 240
     12c:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12e:	88 b1       	in	r24, 0x08	; 8
     130:	80 62       	ori	r24, 0x20	; 32
     132:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     134:	88 b1       	in	r24, 0x08	; 8
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0x14>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     142:	88 b1       	in	r24, 0x08	; 8
     144:	80 68       	ori	r24, 0x80	; 128
     146:	88 b9       	out	0x08, r24	; 8
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	9a 95       	dec	r25
     14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0x22>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     150:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     152:	82 95       	swap	r24
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	92 e0       	ldi	r25, 0x02	; 2
     158:	9a 95       	dec	r25
     15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0x30>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15e:	98 b1       	in	r25, 0x08	; 8
     160:	9f 77       	andi	r25, 0x7F	; 127
     162:	98 b9       	out	0x08, r25	; 8
     164:	95 e0       	ldi	r25, 0x05	; 5
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x3e>
     16a:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16c:	98 b1       	in	r25, 0x08	; 8
     16e:	90 68       	ori	r25, 0x80	; 128
     170:	98 b9       	out	0x08, r25	; 8
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	9a 95       	dec	r25
     176:	f1 f7       	brne	.-4      	; 0x174 <LCDBusyLoop+0x4c>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     17a:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17c:	80 78       	andi	r24, 0x80	; 128
     17e:	92 e0       	ldi	r25, 0x02	; 2
     180:	9a 95       	dec	r25
     182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x58>
     184:	00 c0       	rjmp	.+0      	; 0x186 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     186:	98 b1       	in	r25, 0x08	; 8
     188:	9f 77       	andi	r25, 0x7F	; 127
     18a:	98 b9       	out	0x08, r25	; 8
     18c:	95 e0       	ldi	r25, 0x05	; 5
     18e:	9a 95       	dec	r25
     190:	f1 f7       	brne	.-4      	; 0x18e <LCDBusyLoop+0x66>
     192:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     194:	81 11       	cpse	r24, r1
     196:	d5 cf       	rjmp	.-86     	; 0x142 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	8f 7d       	andi	r24, 0xDF	; 223
     19c:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19e:	87 b1       	in	r24, 0x07	; 7
     1a0:	8f 60       	ori	r24, 0x0F	; 15
     1a2:	87 b9       	out	0x07, r24	; 7
     1a4:	08 95       	ret

000001a6 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a6:	28 2f       	mov	r18, r24
     1a8:	22 95       	swap	r18
     1aa:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1ac:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ae:	61 11       	cpse	r22, r1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCDByte+0x14>
	CLEAR_RS();
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 7b       	andi	r25, 0xBF	; 191
     1b6:	98 b9       	out	0x08, r25	; 8
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCDByte+0x1a>
else
	SET_RS();
     1ba:	98 b1       	in	r25, 0x08	; 8
     1bc:	90 64       	ori	r25, 0x40	; 64
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	9a 95       	dec	r25
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCDByte+0x1c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c8:	98 b1       	in	r25, 0x08	; 8
     1ca:	90 68       	ori	r25, 0x80	; 128
     1cc:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1ce:	98 b1       	in	r25, 0x08	; 8
     1d0:	90 7f       	andi	r25, 0xF0	; 240
     1d2:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d4:	98 b9       	out	0x08, r25	; 8
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	9a 95       	dec	r25
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDByte+0x32>
     1dc:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1de:	98 b1       	in	r25, 0x08	; 8
     1e0:	9f 77       	andi	r25, 0x7F	; 127
     1e2:	98 b9       	out	0x08, r25	; 8
     1e4:	95 e0       	ldi	r25, 0x05	; 5
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDByte+0x40>
     1ea:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	90 68       	ori	r25, 0x80	; 128
     1f0:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f2:	98 b1       	in	r25, 0x08	; 8
     1f4:	90 7f       	andi	r25, 0xF0	; 240
     1f6:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f8:	88 b9       	out	0x08, r24	; 8
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCDByte+0x56>
     200:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     202:	88 b1       	in	r24, 0x08	; 8
     204:	8f 77       	andi	r24, 0x7F	; 127
     206:	88 b9       	out	0x08, r24	; 8
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCDByte+0x64>
     20e:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     210:	8b cf       	rjmp	.-234    	; 0x128 <LCDBusyLoop>
     212:	08 95       	ret

00000214 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	2f ef       	ldi	r18, 0xFF	; 255
     21a:	86 e7       	ldi	r24, 0x76	; 118
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	21 50       	subi	r18, 0x01	; 1
     220:	80 40       	sbci	r24, 0x00	; 0
     222:	90 40       	sbci	r25, 0x00	; 0
     224:	e1 f7       	brne	.-8      	; 0x21e <InitLCD+0xa>
     226:	00 c0       	rjmp	.+0      	; 0x228 <InitLCD+0x14>
     228:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     22a:	87 b1       	in	r24, 0x07	; 7
     22c:	8f 60       	ori	r24, 0x0F	; 15
     22e:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     230:	87 b1       	in	r24, 0x07	; 7
     232:	80 68       	ori	r24, 0x80	; 128
     234:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     236:	87 b1       	in	r24, 0x07	; 7
     238:	80 64       	ori	r24, 0x40	; 64
     23a:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23c:	87 b1       	in	r24, 0x07	; 7
     23e:	80 62       	ori	r24, 0x20	; 32
     240:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     242:	88 b1       	in	r24, 0x08	; 8
     244:	80 7f       	andi	r24, 0xF0	; 240
     246:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     248:	88 b1       	in	r24, 0x08	; 8
     24a:	8f 77       	andi	r24, 0x7F	; 127
     24c:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24e:	88 b1       	in	r24, 0x08	; 8
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     254:	88 b1       	in	r24, 0x08	; 8
     256:	8f 7b       	andi	r24, 0xBF	; 191
     258:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x48>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <InitLCD+0x4a>
     25e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     260:	88 b1       	in	r24, 0x08	; 8
     262:	80 68       	ori	r24, 0x80	; 128
     264:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     266:	88 b1       	in	r24, 0x08	; 8
     268:	82 60       	ori	r24, 0x02	; 2
     26a:	88 b9       	out	0x08, r24	; 8
     26c:	25 e0       	ldi	r18, 0x05	; 5
     26e:	2a 95       	dec	r18
     270:	f1 f7       	brne	.-4      	; 0x26e <InitLCD+0x5a>
     272:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     274:	88 b1       	in	r24, 0x08	; 8
     276:	8f 77       	andi	r24, 0x7F	; 127
     278:	88 b9       	out	0x08, r24	; 8
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	8a 95       	dec	r24
     27e:	f1 f7       	brne	.-4      	; 0x27c <InitLCD+0x68>
     280:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     282:	52 df       	rcall	.-348    	; 0x128 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	8c 2f       	mov	r24, r28
     288:	8c 60       	ori	r24, 0x0C	; 12
     28a:	8d df       	rcall	.-230    	; 0x1a6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	88 e2       	ldi	r24, 0x28	; 40
     290:	8a df       	rcall	.-236    	; 0x1a6 <LCDByte>
}
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	82 df       	rcall	.-252    	; 0x1a6 <LCDByte>
	msg++;
     2a2:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a4:	88 81       	ld	r24, Y
     2a6:	81 11       	cpse	r24, r1
     2a8:	fa cf       	rjmp	.-12     	; 0x29e <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <LCDWriteInt+0xe>
     2be:	1f 92       	push	r1
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c8:	fe 01       	movw	r30, r28
     2ca:	31 96       	adiw	r30, 0x01	; 1
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	df 01       	movw	r26, r30
     2d0:	1d 92       	st	X+, r1
     2d2:	2a 95       	dec	r18
     2d4:	e9 f7       	brne	.-6      	; 0x2d0 <LCDWriteInt+0x20>
	int i=4,j=0;
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2da:	0f c0       	rjmp	.+30     	; 0x2fa <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	0e 94 98 0c 	call	0x1930	; 0x1930 <__divmodhi4>
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e2 0f       	add	r30, r18
     2ee:	f3 1f       	adc	r31, r19
     2f0:	80 83       	st	Z, r24
	val=val/10;
     2f2:	86 2f       	mov	r24, r22
     2f4:	97 2f       	mov	r25, r23
	i--;
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	79 f7       	brne	.-34     	; 0x2dc <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fe:	bf ef       	ldi	r27, 0xFF	; 255
     300:	eb 16       	cp	r14, r27
     302:	fb 06       	cpc	r15, r27
     304:	81 f4       	brne	.+32     	; 0x326 <LCDWriteInt+0x76>
     306:	03 c0       	rjmp	.+6      	; 0x30e <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	02 c0       	rjmp	.+4      	; 0x312 <LCDWriteInt+0x62>
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ec 0f       	add	r30, r28
     318:	fd 1f       	adc	r31, r29
     31a:	e0 0f       	add	r30, r16
     31c:	f1 1f       	adc	r31, r17
     31e:	20 81       	ld	r18, Z
     320:	22 23       	and	r18, r18
     322:	91 f3       	breq	.-28     	; 0x308 <LCDWriteInt+0x58>
     324:	04 c0       	rjmp	.+8      	; 0x32e <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     326:	05 e0       	ldi	r16, 0x05	; 5
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	0e 19       	sub	r16, r14
     32c:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32e:	99 23       	and	r25, r25
     330:	84 f4       	brge	.+32     	; 0x352 <LCDWriteInt+0xa2>
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	8d e2       	ldi	r24, 0x2D	; 45
     336:	37 df       	rcall	.-402    	; 0x1a6 <LCDByte>
     338:	0c c0       	rjmp	.+24     	; 0x352 <LCDWriteInt+0xa2>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     33a:	e1 e0       	ldi	r30, 0x01	; 1
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ec 0f       	add	r30, r28
     340:	fd 1f       	adc	r31, r29
     342:	e0 0f       	add	r30, r16
     344:	f1 1f       	adc	r31, r17
     346:	80 81       	ld	r24, Z
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	2c df       	rcall	.-424    	; 0x1a6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34e:	0f 5f       	subi	r16, 0xFF	; 255
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	05 30       	cpi	r16, 0x05	; 5
     354:	11 05       	cpc	r17, r1
     356:	8c f3       	brlt	.-30     	; 0x33a <LCDWriteInt+0x8a>
	{
	LCDData(48+str[i]);
	}
}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	08 95       	ret

00000370 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     370:	88 32       	cpi	r24, 0x28	; 40
     372:	28 f4       	brcc	.+10     	; 0x37e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     374:	61 11       	cpse	r22, r1
     376:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	14 cf       	rjmp	.-472    	; 0x1a6 <LCDByte>
     37e:	08 95       	ret

00000380 <step>:
extern volatile char TARGETFLAG;
extern volatile char HOLDFLAG;
extern volatile uint8_t Steps2Exit;

uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
     380:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__data_end>
     384:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     388:	89 0f       	add	r24, r25
     38a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
     38e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     392:	84 30       	cpi	r24, 0x04	; 4
     394:	1c f0       	brlt	.+6      	; 0x39c <step+0x1c>
     396:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
     39c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     3a0:	88 23       	and	r24, r24
     3a2:	1c f4       	brge	.+6      	; 0x3aa <step+0x2a>
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
		
	PORTA = StepStates[CurState]; //Step
     3aa:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__data_end>
     3ae:	0e 2e       	mov	r0, r30
     3b0:	00 0c       	add	r0, r0
     3b2:	ff 0b       	sbc	r31, r31
     3b4:	e0 50       	subi	r30, 0x00	; 0
     3b6:	fe 4f       	sbci	r31, 0xFE	; 254
     3b8:	80 81       	ld	r24, Z
     3ba:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
     3bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3c0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Dir>
     3c4:	89 0f       	add	r24, r25
     3c6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	//protect against roll over
	if(CurPosition > 225 && Dir==1){CurPosition -=  200;}
     3ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3ce:	82 3e       	cpi	r24, 0xE2	; 226
     3d0:	50 f0       	brcs	.+20     	; 0x3e6 <step+0x66>
     3d2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <step+0x66>
     3da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3de:	88 5c       	subi	r24, 0xC8	; 200
     3e0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
     3e4:	0d c0       	rjmp	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
	else if(CurPosition < 25 && Dir==-1){CurPosition += 200;}
     3e6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3ea:	89 31       	cpi	r24, 0x19	; 25
     3ec:	48 f4       	brcc	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     3fa:	88 53       	subi	r24, 0x38	; 56
     3fc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
     400:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     404:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	08 95       	ret

0000040c <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(HOLDFLAG)
     40c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <HOLDFLAG>
     410:	88 23       	and	r24, r24
     412:	81 f1       	breq	.+96     	; 0x474 <stepUpdateError+0x68>
	{
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
     414:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     418:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     41c:	99 23       	and	r25, r25
     41e:	1c f4       	brge	.+6      	; 0x426 <stepUpdateError+0x1a>
     420:	91 95       	neg	r25
     422:	81 95       	neg	r24
     424:	91 09       	sbc	r25, r1
     426:	0f 97       	sbiw	r24, 0x0f	; 15
     428:	ac f4       	brge	.+42     	; 0x454 <stepUpdateError+0x48>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			HOLDFLAG = 0;
     42a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <HOLDFLAG>
            PAUSEFLAG = 0;
     42e:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <PAUSEFLAG>
            runMotor();
     432:	64 d4       	rcall	.+2248   	; 0xcfc <runMotor>
			CurError = Parts[countSort] - CurPosition;
     434:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ec 52       	subi	r30, 0x2C	; 44
     43c:	fd 4f       	sbci	r31, 0xFD	; 253
     43e:	80 81       	ld	r24, Z
     440:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	82 1b       	sub	r24, r18
     448:	91 09       	sbc	r25, r1
     44a:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     44e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     452:	1f c0       	rjmp	.+62     	; 0x492 <stepUpdateError+0x86>
		}else
		{
			CurError = Parts[countSort-1] - CurPosition;
     454:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ed 52       	subi	r30, 0x2D	; 45
     45c:	fd 4f       	sbci	r31, 0xFD	; 253
     45e:	80 81       	ld	r24, Z
     460:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	82 1b       	sub	r24, r18
     468:	91 09       	sbc	r25, r1
     46a:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     46e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     472:	0f c0       	rjmp	.+30     	; 0x492 <stepUpdateError+0x86>
			
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
     474:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	ec 52       	subi	r30, 0x2C	; 44
     47c:	fd 4f       	sbci	r31, 0xFD	; 253
     47e:	80 81       	ld	r24, Z
     480:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <CurPosition>
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	82 1b       	sub	r24, r18
     488:	91 09       	sbc	r25, r1
     48a:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     48e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	
	if(CurError>100)
     492:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     496:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     49a:	85 36       	cpi	r24, 0x65	; 101
     49c:	91 05       	cpc	r25, r1
     49e:	5c f0       	brlt	.+22     	; 0x4b6 <stepUpdateError+0xaa>
	{
		CurError = CurError - 200;
     4a0:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4a4:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4a8:	88 5c       	subi	r24, 0xC8	; 200
     4aa:	91 09       	sbc	r25, r1
     4ac:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     4b0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <stepUpdateError+0xcc>
	}else if(CurError<-100)
     4b6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4ba:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4be:	8c 39       	cpi	r24, 0x9C	; 156
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	54 f4       	brge	.+20     	; 0x4d8 <stepUpdateError+0xcc>
	{
		CurError = CurError + 200;
     4c4:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     4c8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     4cc:	88 53       	subi	r24, 0x38	; 56
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <CurError+0x1>
     4d4:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <CurError>
	}
	
	if(abs(CurError) < Steps2Acc)//change if slowing down to quickly at zone; may cause oscillation
     4d8:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     4dc:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     4e0:	33 23       	and	r19, r19
     4e2:	1c f4       	brge	.+6      	; 0x4ea <stepUpdateError+0xde>
     4e4:	31 95       	neg	r19
     4e6:	21 95       	neg	r18
     4e8:	31 09       	sbc	r19, r1
     4ea:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	24 f4       	brge	.+8      	; 0x4fe <stepUpdateError+0xf2>
	{
		TARGETFLAG = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <TARGETFLAG>
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <stepUpdateError+0xf6>
	}else
	{
		TARGETFLAG = 0;
     4fe:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <TARGETFLAG>
	}
	return 1;
}
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret

00000506 <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
		if(CurError == 0)
     506:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     50a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     50e:	89 2b       	or	r24, r25
     510:	91 f4       	brne	.+36     	; 0x536 <stepUpdateDir+0x30>
		{// if stepper is at target
			if(CurDelay > (MAXDELAY-MINDELAY))
     512:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     516:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	97 40       	sbci	r25, 0x07	; 7
     51e:	30 f0       	brcs	.+12     	; 0x52c <stepUpdateDir+0x26>
			{// if stepper can stop
				Dir = 0; //stop stepping
     520:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Dir>
				TARGETFLAG = 0; //clear target flag
     524:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <TARGETFLAG>
				return 1;	
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
			}else
			{//Decelerate stepper
				DECELFLAG = 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DECELFLAG>
				return 0;
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
     536:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     53a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     53e:	99 23       	and	r25, r25
     540:	1c f4       	brge	.+6      	; 0x548 <stepUpdateDir+0x42>
     542:	91 95       	neg	r25
     544:	81 95       	neg	r24
     546:	91 09       	sbc	r25, r1
     548:	8b 35       	cpi	r24, 0x5B	; 91
     54a:	91 05       	cpc	r25, r1
     54c:	b4 f0       	brlt	.+44     	; 0x57a <stepUpdateDir+0x74>
     54e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     552:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     556:	81 15       	cp	r24, r1
     558:	9a 40       	sbci	r25, 0x0A	; 10
     55a:	78 f4       	brcc	.+30     	; 0x57a <stepUpdateDir+0x74>
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
     55c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <DECELFLAG>
			if(Dir != 0)
     560:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     564:	88 23       	and	r24, r24
     566:	29 f0       	breq	.+10     	; 0x572 <stepUpdateDir+0x6c>
			{//Keep direction
				NextDir = Dir;
     568:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     56c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
				return 0;
			}
		}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
		{//Next target is close in same direction and you are at speed don't change
			DECELFLAG = 0;
			if(Dir != 0)
     570:	18 c0       	rjmp	.+48     	; 0x5a2 <stepUpdateDir+0x9c>
			{//Keep direction
				NextDir = Dir;
			}else
			{//edge case where Dir might be zero
				Dir = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
				return 1;
     578:	08 95       	ret
			}
		}else
		{//Calculate closest direction
			NextDir = (CurError>0) - (CurError<0);	
     57a:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     57e:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	12 16       	cp	r1, r18
     586:	13 06       	cpc	r1, r19
     588:	0c f0       	brlt	.+2      	; 0x58c <stepUpdateDir+0x86>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     590:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     594:	93 2f       	mov	r25, r19
     596:	99 1f       	adc	r25, r25
     598:	99 27       	eor	r25, r25
     59a:	99 1f       	adc	r25, r25
     59c:	89 1b       	sub	r24, r25
     59e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <NextDir>
		}

		if(NextDir == Dir)
     5a2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextDir>
     5a6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5aa:	98 13       	cpse	r25, r24
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <stepUpdateDir+0xb4>
		{//next direction is the same
			Dir = NextDir;
     5ae:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5b2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret
		}else if(CurDelay >= MAXDELAY)
     5ba:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     5be:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     5c2:	81 15       	cp	r24, r1
     5c4:	9a 40       	sbci	r25, 0x0A	; 10
     5c6:	30 f0       	brcs	.+12     	; 0x5d4 <stepUpdateDir+0xce>
		{//stepper is can change direction
			Dir = NextDir;
     5c8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <NextDir>
     5cc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Dir>
			return 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	08 95       	ret
		}else
		{//Decelerate stepper to switch directions
			DECELFLAG = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DECELFLAG>
			return 0;
     5da:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 1;
}
     5dc:	08 95       	ret

000005de <stepRes>:
}



void stepRes(void){
	accSteps = 0;
     5de:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
	StepsDelta = 0;
     5e2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <StepsDelta>
	CurDelay = MAXDELAY;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	9a e0       	ldi	r25, 0x0A	; 10
     5ea:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     5ee:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
     5f2:	08 95       	ret

000005f4 <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
     5f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Dir>
     5f8:	81 11       	cpse	r24, r1
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
     5fc:	f0 df       	rcall	.-32     	; 0x5de <stepRes>
     5fe:	7e c0       	rjmp	.+252    	; 0x6fc <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
     600:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <TARGETFLAG>
     604:	81 11       	cpse	r24, r1
     606:	08 c0       	rjmp	.+16     	; 0x618 <stepUpdateDelay+0x24>
     608:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <DECELFLAG>
     60c:	81 11       	cpse	r24, r1
     60e:	04 c0       	rjmp	.+8      	; 0x618 <stepUpdateDelay+0x24>
     610:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <PAUSEFLAG>
     614:	88 23       	and	r24, r24
     616:	c9 f1       	breq	.+114    	; 0x68a <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
     618:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e0 59       	subi	r30, 0x90	; 144
     624:	fd 4f       	sbci	r31, 0xFD	; 253
     626:	20 81       	ld	r18, Z
     628:	31 81       	ldd	r19, Z+1	; 0x01
     62a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     62e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     63a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay > MAXDELAY)
     63e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     642:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	9a 40       	sbci	r25, 0x0A	; 10
     64a:	a0 f0       	brcs	.+40     	; 0x674 <stepUpdateDelay+0x80>
		{
			if(PAUSEFLAG && (Steps2Exit<3))
     64c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <PAUSEFLAG>
     650:	88 23       	and	r24, r24
     652:	29 f0       	breq	.+10     	; 0x65e <stepUpdateDelay+0x6a>
     654:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     658:	83 30       	cpi	r24, 0x03	; 3
     65a:	08 f4       	brcc	.+2      	; 0x65e <stepUpdateDelay+0x6a>
     65c:	4f c0       	rjmp	.+158    	; 0x6fc <stepUpdateDelay+0x108>
			{
				
			}else
			{
				CurDelay = MAXDELAY;
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	9a e0       	ldi	r25, 0x0A	; 10
     662:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     666:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
				accSteps = 0;
     66a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <accSteps>
				DECELFLAG = 0;
     66e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <DECELFLAG>
     672:	44 c0       	rjmp	.+136    	; 0x6fc <stepUpdateDelay+0x108>
			}		     
		}else if(accSteps>0){
     674:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     678:	88 23       	and	r24, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <stepUpdateDelay+0x8a>
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <stepUpdateDelay+0x108>
			accSteps--;
     67e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     682:	81 50       	subi	r24, 0x01	; 1
     684:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
     688:	39 c0       	rjmp	.+114    	; 0x6fc <stepUpdateDelay+0x108>
		}
	
	}else if(CurDelay>MINDELAY)
     68a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     68e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	93 40       	sbci	r25, 0x03	; 3
     696:	e0 f1       	brcs	.+120    	; 0x710 <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
     698:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     69c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6a0:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <accSteps>
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	e0 59       	subi	r30, 0x90	; 144
     6ac:	fd 4f       	sbci	r31, 0xFD	; 253
     6ae:	20 81       	ld	r18, Z
     6b0:	31 81       	ldd	r19, Z+1	; 0x01
     6b2:	82 1b       	sub	r24, r18
     6b4:	93 0b       	sbc	r25, r19
     6b6:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     6ba:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
     6be:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     6c2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	93 40       	sbci	r25, 0x03	; 3
     6ca:	38 f0       	brcs	.+14     	; 0x6da <stepUpdateDelay+0xe6>
     6cc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     6d0:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	9a 40       	sbci	r25, 0x0A	; 10
     6d8:	30 f0       	brcs	.+12     	; 0x6e6 <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     6e2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
		}
		if(accSteps<Steps2Acc)
     6e6:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     6ea:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     6ee:	98 17       	cp	r25, r24
     6f0:	28 f4       	brcc	.+10     	; 0x6fc <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
     6f2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <accSteps>
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
     6fc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     700:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     704:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     708:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
     710:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
     712:	08 95       	ret

00000714 <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
     714:	e1 e9       	ldi	r30, 0x91	; 145
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	88 60       	ori	r24, 0x08	; 8
     71c:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	9f ef       	ldi	r25, 0xFF	; 255
     722:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     726:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
     72a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     72e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
     732:	e1 e7       	ldi	r30, 0x71	; 113
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	82 60       	ori	r24, 0x02	; 2
     73a:	80 83       	st	Z, r24
     73c:	08 95       	ret

0000073e <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
     73e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     742:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	3a e0       	ldi	r19, 0x0A	; 10
     74a:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     74e:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler	
     752:	e1 e9       	ldi	r30, 0x91	; 145
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	83 60       	ori	r24, 0x03	; 3
     75a:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
     75c:	88 b3       	in	r24, 0x18	; 24
     75e:	82 60       	ori	r24, 0x02	; 2
     760:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
     762:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <CurDelay+0x1>
     766:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <CurDelay>
     76a:	08 95       	ret

0000076c <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
     76c:	e1 e9       	ldi	r30, 0x91	; 145
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8d 7f       	andi	r24, 0xFD	; 253
     774:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
     776:	80 81       	ld	r24, Z
     778:	8e 7f       	andi	r24, 0xFE	; 254
     77a:	80 83       	st	Z, r24
     77c:	08 95       	ret

0000077e <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
     77e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <CurAcc+0x1>
     782:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	24 c0       	rjmp	.+72     	; 0x7d8 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
     790:	fc 01       	movw	r30, r24
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	e0 59       	subi	r30, 0x90	; 144
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
     79c:	40 81       	ld	r20, Z
     79e:	51 81       	ldd	r21, Z+1	; 0x01
     7a0:	24 1b       	sub	r18, r20
     7a2:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
     7a4:	40 81       	ld	r20, Z
     7a6:	51 81       	ldd	r21, Z+1	; 0x01
     7a8:	48 5d       	subi	r20, 0xD8	; 216
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	fc 01       	movw	r30, r24
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	e0 59       	subi	r30, 0x90	; 144
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	51 83       	std	Z+1, r21	; 0x01
     7b8:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
     7ba:	40 81       	ld	r20, Z
     7bc:	51 81       	ldd	r21, Z+1	; 0x01
     7be:	41 3a       	cpi	r20, 0xA1	; 161
     7c0:	51 05       	cpc	r21, r1
     7c2:	48 f0       	brcs	.+18     	; 0x7d6 <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
     7c4:	fc 01       	movw	r30, r24
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e0 59       	subi	r30, 0x90	; 144
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	40 ea       	ldi	r20, 0xA0	; 160
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	51 83       	std	Z+1, r21	; 0x01
     7d4:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	84 30       	cpi	r24, 0x04	; 4
     7da:	91 05       	cpc	r25, r1
     7dc:	c8 f2       	brcs	.-78     	; 0x790 <stepCalcAcc+0x12>
			CurAcc[steps] = MAXACC;
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
     7de:	fc 01       	movw	r30, r24
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	e0 59       	subi	r30, 0x90	; 144
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	40 ea       	ldi	r20, 0xA0	; 160
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	51 83       	std	Z+1, r21	; 0x01
     7ee:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     7f0:	1a c0       	rjmp	.+52     	; 0x826 <stepCalcAcc+0xa8>
		
		delay -=CurAcc[steps-1];
     7f2:	fc 01       	movw	r30, r24
     7f4:	31 97       	sbiw	r30, 0x01	; 1
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e0 59       	subi	r30, 0x90	; 144
     7fc:	fd 4f       	sbci	r31, 0xFD	; 253
     7fe:	40 81       	ld	r20, Z
     800:	51 81       	ldd	r21, Z+1	; 0x01
     802:	24 1b       	sub	r18, r20
     804:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
     806:	21 15       	cp	r18, r1
     808:	43 e0       	ldi	r20, 0x03	; 3
     80a:	34 07       	cpc	r19, r20
     80c:	10 f4       	brcc	.+4      	; 0x812 <stepCalcAcc+0x94>
			delay = MINDELAY;
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
     812:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
     814:	fc 01       	movw	r30, r24
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	e0 59       	subi	r30, 0x90	; 144
     81c:	fd 4f       	sbci	r31, 0xFD	; 253
     81e:	40 ea       	ldi	r20, 0xA0	; 160
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	51 83       	std	Z+1, r21	; 0x01
     824:	40 83       	st	Z, r20
		}

	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
     826:	a9 01       	movw	r20, r18
     828:	40 5e       	subi	r20, 0xE0	; 224
     82a:	51 40       	sbci	r21, 0x01	; 1
     82c:	41 30       	cpi	r20, 0x01	; 1
     82e:	53 40       	sbci	r21, 0x03	; 3
     830:	00 f7       	brcc	.-64     	; 0x7f2 <stepCalcAcc+0x74>
     832:	2a c0       	rjmp	.+84     	; 0x888 <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     834:	ac 01       	movw	r20, r24
     836:	4f 5f       	subi	r20, 0xFF	; 255
     838:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
     83a:	fc 01       	movw	r30, r24
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e0 59       	subi	r30, 0x90	; 144
     842:	fd 4f       	sbci	r31, 0xFD	; 253
     844:	60 81       	ld	r22, Z
     846:	71 81       	ldd	r23, Z+1	; 0x01
     848:	26 1b       	sub	r18, r22
     84a:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
     84c:	60 81       	ld	r22, Z
     84e:	71 81       	ldd	r23, Z+1	; 0x01
     850:	68 32       	cpi	r22, 0x28	; 40
     852:	71 05       	cpc	r23, r1
     854:	48 f4       	brcc	.+18     	; 0x868 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
     856:	fa 01       	movw	r30, r20
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e0 59       	subi	r30, 0x90	; 144
     85e:	fd 4f       	sbci	r31, 0xFD	; 253
     860:	11 82       	std	Z+1, r1	; 0x01
     862:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     864:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
     866:	14 c0       	rjmp	.+40     	; 0x890 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	fc 01       	movw	r30, r24
     86e:	e0 59       	subi	r30, 0x90	; 144
     870:	fd 4f       	sbci	r31, 0xFD	; 253
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	88 97       	sbiw	r24, 0x28	; 40
     878:	fa 01       	movw	r30, r20
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	e0 59       	subi	r30, 0x90	; 144
     880:	fd 4f       	sbci	r31, 0xFD	; 253
     882:	91 83       	std	Z+1, r25	; 0x01
     884:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
     886:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
		//mTimer(1000);
	}//Constant Acc
	
	while(delay >MINDELAY){
     888:	21 30       	cpi	r18, 0x01	; 1
     88a:	43 e0       	ldi	r20, 0x03	; 3
     88c:	34 07       	cpc	r19, r20
     88e:	90 f6       	brcc	.-92     	; 0x834 <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;	
     890:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Steps2Acc>
     894:	08 95       	ret

00000896 <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
     896:	73 df       	rcall	.-282    	; 0x77e <stepCalcAcc>
	
	CurDelay = MAXDELAY;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9a e0       	ldi	r25, 0x0A	; 10
     89c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <CurDelay+0x1>
     8a0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
     8a4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <HALLSENSOR>
	CurPosition = 0;//set CurPosition
     8a8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
     8ac:	82 e3       	ldi	r24, 0x32	; 50
     8ae:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <Parts>

	stepStart();//Start stepTimer
     8b2:	45 df       	rcall	.-374    	; 0x73e <stepStart>
		
	while(!HALLSENSOR){
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <stepCalibrate+0x42>
		if(abs(CurError)<20 && !HALLSENSOR){
     8b6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     8ba:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     8be:	99 23       	and	r25, r25
     8c0:	1c f4       	brge	.+6      	; 0x8c8 <stepCalibrate+0x32>
     8c2:	91 95       	neg	r25
     8c4:	81 95       	neg	r24
     8c6:	91 09       	sbc	r25, r1
     8c8:	44 97       	sbiw	r24, 0x14	; 20
     8ca:	34 f4       	brge	.+12     	; 0x8d8 <stepCalibrate+0x42>
     8cc:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <HALLSENSOR>
     8d0:	81 11       	cpse	r24, r1
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <stepCalibrate+0x42>
			CurPosition = 0;
     8d4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <CurPosition>
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
		
	while(!HALLSENSOR){
     8d8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <HALLSENSOR>
     8dc:	88 23       	and	r24, r24
     8de:	59 f3       	breq	.-42     	; 0x8b6 <stepCalibrate+0x20>
	//dispStatus();
	//mTimer(10);	
	}//Wait for hall sensor to trigger

	//EIMSK &= ~(0x08); //Disable HALLSENSOR interrupt
	Parts[0] = B_ID;
     8e0:	82 e3       	ldi	r24, 0x32	; 50
     8e2:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <Parts>
	//CurPosition = B_ID;//Calibrate the stepper
	//accSteps = 0;
	//mTimer(1000);
	return 1;
}
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	08 95       	ret

000008ea <CalcExitTime>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     8ea:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <HOLDFLAG>
     8ee:	81 11       	cpse	r24, r1
     8f0:	bc c0       	rjmp	.+376    	; 0xa6a <CalcExitTime+0x180>
     8f2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
     8f6:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	ed 52       	subi	r30, 0x2D	; 45
     8fe:	fd 4f       	sbci	r31, 0xFD	; 253
     900:	20 81       	ld	r18, Z
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	82 1b       	sub	r24, r18
     906:	91 09       	sbc	r25, r1
     908:	9c 01       	movw	r18, r24
     90a:	22 f4       	brpl	.+8      	; 0x914 <CalcExitTime+0x2a>
     90c:	22 27       	eor	r18, r18
     90e:	33 27       	eor	r19, r19
     910:	28 1b       	sub	r18, r24
     912:	39 0b       	sbc	r19, r25
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	82 1b       	sub	r24, r18
     918:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <Steps2Exit>
     91c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     920:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     924:	89 1b       	sub	r24, r25
     926:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     92a:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     92e:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     932:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     936:	42 03       	mulsu	r20, r18
     938:	c0 01       	movw	r24, r0
     93a:	43 9f       	mul	r20, r19
     93c:	90 0d       	add	r25, r0
     93e:	11 24       	eor	r1, r1
     940:	18 16       	cp	r1, r24
     942:	19 06       	cpc	r1, r25
     944:	44 f0       	brlt	.+16     	; 0x956 <CalcExitTime+0x6c>
     946:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     94a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     94e:	81 15       	cp	r24, r1
     950:	9a 40       	sbci	r25, 0x0A	; 10
     952:	08 f4       	brcc	.+2      	; 0x956 <CalcExitTime+0x6c>
     954:	3f c0       	rjmp	.+126    	; 0x9d4 <CalcExitTime+0xea>
     956:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <Steps2Exit>
     95a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     95e:	98 17       	cp	r25, r24
     960:	98 f4       	brcc	.+38     	; 0x988 <CalcExitTime+0x9e>
     962:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     966:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     96a:	93 50       	subi	r25, 0x03	; 3
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2Exit>
     974:	48 9f       	mul	r20, r24
     976:	90 01       	movw	r18, r0
     978:	49 9f       	mul	r20, r25
     97a:	30 0d       	add	r19, r0
     97c:	11 24       	eor	r1, r1
     97e:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <exitTime+0x1>
     982:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <exitTime>
     986:	64 c0       	rjmp	.+200    	; 0xa50 <CalcExitTime+0x166>
     988:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     98c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     990:	93 50       	subi	r25, 0x03	; 3
     992:	96 95       	lsr	r25
     994:	87 95       	ror	r24
     996:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     99a:	48 9f       	mul	r20, r24
     99c:	90 01       	movw	r18, r0
     99e:	49 9f       	mul	r20, r25
     9a0:	30 0d       	add	r19, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <Steps2Exit>
     9a8:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	84 1b       	sub	r24, r20
     9b0:	91 09       	sbc	r25, r1
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	73 e0       	ldi	r23, 0x03	; 3
     9b6:	86 9f       	mul	r24, r22
     9b8:	a0 01       	movw	r20, r0
     9ba:	87 9f       	mul	r24, r23
     9bc:	50 0d       	add	r21, r0
     9be:	96 9f       	mul	r25, r22
     9c0:	50 0d       	add	r21, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	ca 01       	movw	r24, r20
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     9ce:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     9d2:	3e c0       	rjmp	.+124    	; 0xa50 <CalcExitTime+0x166>
     9d4:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     9d8:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	9a e0       	ldi	r25, 0x0A	; 10
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     9ec:	48 9f       	mul	r20, r24
     9ee:	90 01       	movw	r18, r0
     9f0:	49 9f       	mul	r20, r25
     9f2:	30 0d       	add	r19, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Steps2Acc>
     9fa:	89 2f       	mov	r24, r25
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	ac 01       	movw	r20, r24
     a00:	56 95       	lsr	r21
     a02:	54 2f       	mov	r21, r20
     a04:	44 27       	eor	r20, r20
     a06:	57 95       	ror	r21
     a08:	47 95       	ror	r20
     a0a:	98 2f       	mov	r25, r24
     a0c:	88 27       	eor	r24, r24
     a0e:	99 0f       	add	r25, r25
     a10:	99 0f       	add	r25, r25
     a12:	84 1b       	sub	r24, r20
     a14:	95 0b       	sbc	r25, r21
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
     a1a:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <Steps2Exit>
     a1e:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     a22:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <Steps2MIN>
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	43 1b       	sub	r20, r19
     a2a:	51 09       	sbc	r21, r1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	24 1b       	sub	r18, r20
     a30:	35 0b       	sbc	r19, r21
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	73 e0       	ldi	r23, 0x03	; 3
     a36:	26 9f       	mul	r18, r22
     a38:	a0 01       	movw	r20, r0
     a3a:	27 9f       	mul	r18, r23
     a3c:	50 0d       	add	r21, r0
     a3e:	36 9f       	mul	r19, r22
     a40:	50 0d       	add	r21, r0
     a42:	11 24       	eor	r1, r1
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <exitTime+0x1>
     a4c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <exitTime>
     a50:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <exitTime>
     a54:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <exitTime+0x1>
     a58:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
     a5c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
     a60:	28 17       	cp	r18, r24
     a62:	39 07       	cpc	r19, r25
     a64:	20 f4       	brcc	.+8      	; 0xa6e <CalcExitTime+0x184>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	08 95       	ret
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret

00000a72 <CalcEnterTime>:
     a72:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a76:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a7a:	99 23       	and	r25, r25
     a7c:	1c f4       	brge	.+6      	; 0xa84 <CalcEnterTime+0x12>
     a7e:	91 95       	neg	r25
     a80:	81 95       	neg	r24
     a82:	91 09       	sbc	r25, r1
     a84:	0f 97       	sbiw	r24, 0x0f	; 15
     a86:	0c f4       	brge	.+2      	; 0xa8a <CalcEnterTime+0x18>
     a88:	d2 c0       	rjmp	.+420    	; 0xc2e <CalcEnterTime+0x1bc>
     a8a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
     a8e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
     a92:	99 23       	and	r25, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <CalcEnterTime+0x2a>
     a96:	91 95       	neg	r25
     a98:	81 95       	neg	r24
     a9a:	91 09       	sbc	r25, r1
     a9c:	8f 50       	subi	r24, 0x0F	; 15
     a9e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <Steps2Enter>
     aa2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     aa6:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <accSteps>
     aaa:	89 1b       	sub	r24, r25
     aac:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2MIN>
     ab0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     ab4:	89 32       	cpi	r24, 0x29	; 41
     ab6:	08 f0       	brcs	.+2      	; 0xaba <CalcEnterTime+0x48>
     ab8:	bc c0       	rjmp	.+376    	; 0xc32 <CalcEnterTime+0x1c0>
     aba:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Dir>
     abe:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <CurError>
     ac2:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <CurError+0x1>
     ac6:	42 03       	mulsu	r20, r18
     ac8:	c0 01       	movw	r24, r0
     aca:	43 9f       	mul	r20, r19
     acc:	90 0d       	add	r25, r0
     ace:	11 24       	eor	r1, r1
     ad0:	18 16       	cp	r1, r24
     ad2:	19 06       	cpc	r1, r25
     ad4:	0c f0       	brlt	.+2      	; 0xad8 <CalcEnterTime+0x66>
     ad6:	4e c0       	rjmp	.+156    	; 0xb74 <CalcEnterTime+0x102>
     ad8:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Steps2MIN>
     adc:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     ae0:	89 17       	cp	r24, r25
     ae2:	98 f4       	brcc	.+38     	; 0xb0a <CalcEnterTime+0x98>
     ae4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     ae8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     aec:	93 50       	subi	r25, 0x03	; 3
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     af6:	48 9f       	mul	r20, r24
     af8:	90 01       	movw	r18, r0
     afa:	49 9f       	mul	r20, r25
     afc:	30 0d       	add	r19, r0
     afe:	11 24       	eor	r1, r1
     b00:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <enterTime+0x1>
     b04:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <enterTime>
     b08:	85 c0       	rjmp	.+266    	; 0xc14 <CalcEnterTime+0x1a2>
     b0a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     b0e:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <Steps2MIN>
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	82 1b       	sub	r24, r18
     b16:	91 09       	sbc	r25, r1
     b18:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b1c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b20:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <enterTime>
     b24:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <enterTime+0x1>
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	33 e0       	ldi	r19, 0x03	; 3
     b2c:	42 9f       	mul	r20, r18
     b2e:	c0 01       	movw	r24, r0
     b30:	43 9f       	mul	r20, r19
     b32:	90 0d       	add	r25, r0
     b34:	52 9f       	mul	r21, r18
     b36:	90 0d       	add	r25, r0
     b38:	11 24       	eor	r1, r1
     b3a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b3e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b42:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
     b46:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
     b4a:	93 50       	subi	r25, 0x03	; 3
     b4c:	96 95       	lsr	r25
     b4e:	87 95       	ror	r24
     b50:	40 91 4b 02 	lds	r20, 0x024B	; 0x80024b <Steps2MIN>
     b54:	48 9f       	mul	r20, r24
     b56:	90 01       	movw	r18, r0
     b58:	49 9f       	mul	r20, r25
     b5a:	30 0d       	add	r19, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <enterTime>
     b62:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <enterTime+0x1>
     b66:	82 0f       	add	r24, r18
     b68:	93 1f       	adc	r25, r19
     b6a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b6e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b72:	50 c0       	rjmp	.+160    	; 0xc14 <CalcEnterTime+0x1a2>
     b74:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Steps2Enter>
     b78:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <Steps2MIN>
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	82 1b       	sub	r24, r18
     b80:	91 09       	sbc	r25, r1
     b82:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     b86:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     b8a:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <enterTime>
     b8e:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <enterTime+0x1>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	33 e0       	ldi	r19, 0x03	; 3
     b96:	42 9f       	mul	r20, r18
     b98:	c0 01       	movw	r24, r0
     b9a:	43 9f       	mul	r20, r19
     b9c:	90 0d       	add	r25, r0
     b9e:	52 9f       	mul	r21, r18
     ba0:	90 0d       	add	r25, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     ba8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     bac:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
     bb0:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	9a e0       	ldi	r25, 0x0A	; 10
     bb8:	82 1b       	sub	r24, r18
     bba:	93 0b       	sbc	r25, r19
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <Steps2Acc>
     bc4:	48 9f       	mul	r20, r24
     bc6:	90 01       	movw	r18, r0
     bc8:	49 9f       	mul	r20, r25
     bca:	30 0d       	add	r19, r0
     bcc:	11 24       	eor	r1, r1
     bce:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <enterTime>
     bd2:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <enterTime+0x1>
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     bde:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     be2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Steps2Acc>
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 01       	movw	r18, r24
     bea:	36 95       	lsr	r19
     bec:	32 2f       	mov	r19, r18
     bee:	22 27       	eor	r18, r18
     bf0:	37 95       	ror	r19
     bf2:	27 95       	ror	r18
     bf4:	98 2f       	mov	r25, r24
     bf6:	88 27       	eor	r24, r24
     bf8:	99 0f       	add	r25, r25
     bfa:	99 0f       	add	r25, r25
     bfc:	82 1b       	sub	r24, r18
     bfe:	93 0b       	sbc	r25, r19
     c00:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <enterTime>
     c04:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <enterTime+0x1>
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
     c0c:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <enterTime+0x1>
     c10:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <enterTime>
     c14:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <enterTime>
     c18:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <enterTime+0x1>
     c1c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <enterdropTime>
     c20:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <enterdropTime+0x1>
     c24:	82 17       	cp	r24, r18
     c26:	93 07       	cpc	r25, r19
     c28:	30 f4       	brcc	.+12     	; 0xc36 <CalcEnterTime+0x1c4>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 95       	ret
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	08 95       	ret
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	08 95       	ret

00000c3a <brakeMotor>:
     c3a:	85 b1       	in	r24, 0x05	; 5
     c3c:	80 78       	andi	r24, 0x80	; 128
     c3e:	85 b9       	out	0x05, r24	; 5
     c40:	85 b1       	in	r24, 0x05	; 5
     c42:	8f 60       	ori	r24, 0x0F	; 15
     c44:	85 b9       	out	0x05, r24	; 5
     c46:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <MOTORFLAG>
     c4a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     c4e:	08 95       	ret

00000c50 <stopMotor>:
     c50:	15 b8       	out	0x05, r1	; 5
     c52:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <MOTORFLAG>
     c56:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     c5a:	08 95       	ret

00000c5c <Motor_init>:
     c5c:	84 b5       	in	r24, 0x24	; 36
     c5e:	83 68       	ori	r24, 0x83	; 131
     c60:	84 bd       	out	0x24, r24	; 36
     c62:	85 b5       	in	r24, 0x25	; 37
     c64:	82 60       	ori	r24, 0x02	; 2
     c66:	85 bd       	out	0x25, r24	; 37
     c68:	85 b3       	in	r24, 0x15	; 21
     c6a:	82 60       	ori	r24, 0x02	; 2
     c6c:	85 bb       	out	0x15, r24	; 21
     c6e:	17 bc       	out	0x27, r1	; 39
     c70:	ef cf       	rjmp	.-34     	; 0xc50 <stopMotor>
     c72:	08 95       	ret

00000c74 <motorTimerStart>:
     c74:	e1 e2       	ldi	r30, 0x21	; 33
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	80 83       	st	Z, r24
     c7e:	80 ef       	ldi	r24, 0xF0	; 240
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     c86:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     c8a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     c8e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     c92:	a3 e7       	ldi	r26, 0x73	; 115
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	8c 91       	ld	r24, X
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	85 60       	ori	r24, 0x05	; 5
     ca0:	80 83       	st	Z, r24
     ca2:	8a b3       	in	r24, 0x1a	; 26
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	8a bb       	out	0x1a, r24	; 26
     ca8:	8a ea       	ldi	r24, 0xAA	; 170
     caa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     cae:	08 95       	ret

00000cb0 <startMotor>:
     cb0:	85 b1       	in	r24, 0x05	; 5
     cb2:	80 78       	andi	r24, 0x80	; 128
     cb4:	85 b9       	out	0x05, r24	; 5
     cb6:	85 b1       	in	r24, 0x05	; 5
     cb8:	8b 60       	ori	r24, 0x0B	; 11
     cba:	85 b9       	out	0x05, r24	; 5
     cbc:	16 bc       	out	0x26, r1	; 38
     cbe:	8c ed       	ldi	r24, 0xDC	; 220
     cc0:	87 bd       	out	0x27, r24	; 39
     cc2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     cc6:	81 11       	cpse	r24, r1
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <startMotor+0x3e>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <MOTORFLAG>
     cd0:	d1 df       	rcall	.-94     	; 0xc74 <motorTimerStart>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	94 e2       	ldi	r25, 0x24	; 36
     cd6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     cda:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     cde:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     ce2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     ce6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     cea:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     cee:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     cf2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     cf6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     cfa:	08 95       	ret

00000cfc <runMotor>:
     cfc:	85 b1       	in	r24, 0x05	; 5
     cfe:	80 78       	andi	r24, 0x80	; 128
     d00:	85 b9       	out	0x05, r24	; 5
     d02:	85 b1       	in	r24, 0x05	; 5
     d04:	8b 60       	ori	r24, 0x0B	; 11
     d06:	85 b9       	out	0x05, r24	; 5
     d08:	16 bc       	out	0x26, r1	; 38
     d0a:	8a ea       	ldi	r24, 0xAA	; 170
     d0c:	87 bd       	out	0x27, r24	; 39
     d0e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     d12:	81 11       	cpse	r24, r1
     d14:	0c c0       	rjmp	.+24     	; 0xd2e <runMotor+0x32>
     d16:	ae df       	rcall	.-164    	; 0xc74 <motorTimerStart>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <MOTORFLAG>
     d1e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     d22:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     d26:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <motorTime_d+0x1>
     d2a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <motorTime_d>
     d2e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <MOTORFLAG>
     d32:	08 95       	ret

00000d34 <motorTimerStop>:
     d34:	e1 e2       	ldi	r30, 0x21	; 33
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	80 81       	ld	r24, Z
     d3a:	8a 7f       	andi	r24, 0xFA	; 250
     d3c:	80 83       	st	Z, r24
     d3e:	08 95       	ret

00000d40 <__vector_47>:
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d6a:	82 50       	subi	r24, 0x02	; 2
     d6c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     d78:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     d7c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d80:	8e 36       	cpi	r24, 0x6E	; 110
     d82:	30 f4       	brcc	.+12     	; 0xd90 <__vector_47+0x50>
     d84:	8e e6       	ldi	r24, 0x6E	; 110
     d86:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <motorDecSpeed>
     d8a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <MOTORFLAG>
     d8e:	d2 df       	rcall	.-92     	; 0xd34 <motorTimerStop>
     d90:	16 bc       	out	0x26, r1	; 38
     d92:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <motorDecSpeed>
     d96:	87 bd       	out	0x27, r24	; 39
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0b be       	out	0x3b, r0	; 59
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <ADC_Init>:
     dbe:	ec e7       	ldi	r30, 0x7C	; 124
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 64       	ori	r24, 0x40	; 64
     dc6:	80 83       	st	Z, r24
     dc8:	80 81       	ld	r24, Z
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	80 83       	st	Z, r24
     dce:	ea e7       	ldi	r30, 0x7A	; 122
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 68       	ori	r24, 0x80	; 128
     dd6:	80 83       	st	Z, r24
     dd8:	80 81       	ld	r24, Z
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	80 83       	st	Z, r24
     dde:	80 81       	ld	r24, Z
     de0:	83 60       	ori	r24, 0x03	; 3
     de2:	80 83       	st	Z, r24
     de4:	08 95       	ret

00000de6 <classify>:
     de6:	80 3c       	cpi	r24, 0xC0	; 192
     de8:	23 e0       	ldi	r18, 0x03	; 3
     dea:	92 07       	cpc	r25, r18
     dec:	38 f0       	brcs	.+14     	; 0xdfc <classify+0x16>
     dee:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <countB>
     df8:	82 e3       	ldi	r24, 0x32	; 50
     dfa:	08 95       	ret
     dfc:	80 32       	cpi	r24, 0x20	; 32
     dfe:	23 e0       	ldi	r18, 0x03	; 3
     e00:	92 07       	cpc	r25, r18
     e02:	38 f0       	brcs	.+14     	; 0xe12 <classify+0x2c>
     e04:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <countW>
     e0e:	86 e9       	ldi	r24, 0x96	; 150
     e10:	08 95       	ret
     e12:	8c 32       	cpi	r24, 0x2C	; 44
     e14:	91 40       	sbci	r25, 0x01	; 1
     e16:	38 f0       	brcs	.+14     	; 0xe26 <classify+0x40>
     e18:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <countS>
     e22:	88 ec       	ldi	r24, 0xC8	; 200
     e24:	08 95       	ret
     e26:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <countA>
     e30:	84 e6       	ldi	r24, 0x64	; 100
     e32:	08 95       	ret

00000e34 <debounce>:
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	08 2e       	mov	r0, r24
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <debounce+0xc>
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <debounce+0x8>
     e44:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <debounce+0x18>
     e4a:	66 0f       	add	r22, r22
     e4c:	8a 95       	dec	r24
     e4e:	ea f7       	brpl	.-6      	; 0xe4a <debounce+0x16>
     e50:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e54:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e58:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     e5c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <debounce+0x4c>
     e62:	99 b1       	in	r25, 0x09	; 9
     e64:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     e68:	89 23       	and	r24, r25
     e6a:	68 13       	cpse	r22, r24
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <debounce+0x62>
     e6e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     e72:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     e7c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     e80:	84 2f       	mov	r24, r20
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <countCheck>
     e88:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <countCheck+0x1>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	40 f3       	brcs	.-48     	; 0xe62 <debounce+0x2e>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	08 95       	ret
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	08 95       	ret

00000e9a <debouncePINJ>:
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	08 2e       	mov	r0, r24
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <debouncePINJ+0xc>
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <debouncePINJ+0x8>
     eaa:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <mask>
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <debouncePINJ+0x18>
     eb0:	66 0f       	add	r22, r22
     eb2:	8a 95       	dec	r24
     eb4:	ea f7       	brpl	.-6      	; 0xeb0 <debouncePINJ+0x16>
     eb6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     eba:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     ebe:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck+0x1>
     ec2:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <countCheck>
     ec6:	10 c0       	rjmp	.+32     	; 0xee8 <debouncePINJ+0x4e>
     ec8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     ecc:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <mask>
     ed0:	89 23       	and	r24, r25
     ed2:	68 13       	cpse	r22, r24
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <debouncePINJ+0x64>
     ed6:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <countCheck>
     eda:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <countCheck+0x1>
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <countCheck+0x1>
     ee4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <countCheck>
     ee8:	84 2f       	mov	r24, r20
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <countCheck>
     ef0:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <countCheck+0x1>
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	38 f3       	brcs	.-50     	; 0xec8 <debouncePINJ+0x2e>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	08 95       	ret
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret

00000f02 <mTimer_init>:
     f02:	e1 e8       	ldi	r30, 0x81	; 129
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	80 83       	st	Z, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	88 60       	ori	r24, 0x08	; 8
     f10:	80 83       	st	Z, r24
     f12:	88 ee       	ldi	r24, 0xE8	; 232
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     f1a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     f1e:	08 95       	ret

00000f20 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     f20:	e1 ea       	ldi	r30, 0xA1	; 161
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     f32:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     f36:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     f3a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     f3e:	a2 e7       	ldi	r26, 0x72	; 114
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	8c 91       	ld	r24, X
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     f48:	80 81       	ld	r24, Z
     f4a:	85 60       	ori	r24, 0x05	; 5
     f4c:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     f4e:	89 b3       	in	r24, 0x19	; 25
     f50:	82 60       	ori	r24, 0x02	; 2
     f52:	89 bb       	out	0x19, r24	; 25
     f54:	08 95       	ret

00000f56 <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     f56:	e1 ea       	ldi	r30, 0xA1	; 161
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8a 7f       	andi	r24, 0xFA	; 250
     f5e:	80 83       	st	Z, r24
     f60:	08 95       	ret

00000f62 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     f62:	e1 ea       	ldi	r30, 0xA1	; 161
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	85 60       	ori	r24, 0x05	; 5
     f6a:	80 83       	st	Z, r24
     f6c:	08 95       	ret

00000f6e <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     f7c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
     f80:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <runTime_d+0x1>
     f8a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <runTime_d>
	
}//ISR
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	8f 93       	push	r24
	PORTC = 0xFF;
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     fac:	8f 91       	pop	r24
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
		LCDClear();
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	f4 d8       	rcall	.-3608   	; 0x1a6 <LCDByte>
		LCDWriteIntXY(0,0, countB, 2);
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	d6 d9       	rcall	.-3156   	; 0x370 <LCDGotoXY>
     fc4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	70 d9       	rcall	.-3360   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     fd0:	85 e1       	ldi	r24, 0x15	; 21
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	60 d9       	rcall	.-3392   	; 0x296 <LCDWriteString>
     fd6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
		LCDWriteInt( countA, 2);
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	67 d9       	rcall	.-3378   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     fe2:	85 e1       	ldi	r24, 0x15	; 21
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	57 d9       	rcall	.-3410   	; 0x296 <LCDWriteString>
		LCDWriteInt( countW, 2);
     fe8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	5e d9       	rcall	.-3396   	; 0x2b0 <LCDWriteInt>
		LCDWriteString(",");
     ff4:	85 e1       	ldi	r24, 0x15	; 21
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	4e d9       	rcall	.-3428   	; 0x296 <LCDWriteString>
		LCDWriteInt(countS, 2);
     ffa:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	55 d9       	rcall	.-3414   	; 0x2b0 <LCDWriteInt>
		LCDWriteString("->");
    1006:	87 e1       	ldi	r24, 0x17	; 23
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	45 d9       	rcall	.-3446   	; 0x296 <LCDWriteString>
		LCDWriteInt(countSort, 2);
    100c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	4c d9       	rcall	.-3432   	; 0x2b0 <LCDWriteInt>
		LCDWriteStringXY(0,1, "T=");
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	a9 d9       	rcall	.-3246   	; 0x370 <LCDGotoXY>
    101e:	8a e1       	ldi	r24, 0x1A	; 26
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	39 d9       	rcall	.-3470   	; 0x296 <LCDWriteString>
    1024:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d/1000, 2);
    1028:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
    102c:	36 95       	lsr	r19
    102e:	27 95       	ror	r18
    1030:	36 95       	lsr	r19
    1032:	27 95       	ror	r18
    1034:	36 95       	lsr	r19
    1036:	27 95       	ror	r18
    1038:	a5 ec       	ldi	r26, 0xC5	; 197
    103a:	b0 e2       	ldi	r27, 0x20	; 32
    103c:	8c d4       	rcall	.+2328   	; 0x1956 <__umulhisi3>
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	92 95       	swap	r25
    1044:	82 95       	swap	r24
    1046:	8f 70       	andi	r24, 0x0F	; 15
    1048:	89 27       	eor	r24, r25
    104a:	9f 70       	andi	r25, 0x0F	; 15
    104c:	89 27       	eor	r24, r25
    104e:	30 d9       	rcall	.-3488   	; 0x2b0 <LCDWriteInt>
		LCDWriteString( ".");
    1050:	8d e1       	ldi	r24, 0x1D	; 29
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	20 d9       	rcall	.-3520   	; 0x296 <LCDWriteString>
    1056:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <runTime_d>
		LCDWriteInt(runTime_d%10 , 1);
    105a:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <runTime_d+0x1>
    105e:	9a 01       	movw	r18, r20
    1060:	ad ec       	ldi	r26, 0xCD	; 205
    1062:	bc ec       	ldi	r27, 0xCC	; 204
    1064:	78 d4       	rcall	.+2288   	; 0x1956 <__umulhisi3>
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	9c 01       	movw	r18, r24
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	9a 01       	movw	r18, r20
    108e:	28 1b       	sub	r18, r24
    1090:	39 0b       	sbc	r19, r25
    1092:	c9 01       	movw	r24, r18
    1094:	0d d9       	rcall	.-3558   	; 0x2b0 <LCDWriteInt>
    1096:	8f e1       	ldi	r24, 0x1F	; 31
		LCDWriteString("s Complete");
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	fd c8       	rjmp	.-3590   	; 0x296 <LCDWriteString>
    109c:	08 95       	ret

0000109e <dispStatus>:
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
	
}

void dispStatus(void){
	LCDClear();
    10a2:	81 d8       	rcall	.-3838   	; 0x1a6 <LCDByte>
	LCDWriteIntXY(0, 0, countSort, 2);
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	63 d9       	rcall	.-3386   	; 0x370 <LCDGotoXY>
    10aa:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    10ae:	62 e0       	ldi	r22, 0x02	; 2
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	fd d8       	rcall	.-3590   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(2,0,"/");
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	5a d9       	rcall	.-3404   	; 0x370 <LCDGotoXY>
    10bc:	8a e2       	ldi	r24, 0x2A	; 42
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	ea d8       	rcall	.-3628   	; 0x296 <LCDWriteString>
	LCDWriteIntXY(3,0, countPart, 2);
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	54 d9       	rcall	.-3416   	; 0x370 <LCDGotoXY>
    10c8:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	ee d8       	rcall	.-3620   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(5,0, "(");
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	4b d9       	rcall	.-3434   	; 0x370 <LCDGotoXY>
    10da:	8c e2       	ldi	r24, 0x2C	; 44
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	db d8       	rcall	.-3658   	; 0x296 <LCDWriteString>
    10e0:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(6,0, countB, 1);
    10e2:	86 e0       	ldi	r24, 0x06	; 6
    10e4:	45 d9       	rcall	.-3446   	; 0x370 <LCDGotoXY>
    10e6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countB>
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	df d8       	rcall	.-3650   	; 0x2b0 <LCDWriteInt>
    10f2:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(7,0, countA, 1);
    10f4:	87 e0       	ldi	r24, 0x07	; 7
    10f6:	3c d9       	rcall	.-3464   	; 0x370 <LCDGotoXY>
    10f8:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <countA>
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	d6 d8       	rcall	.-3668   	; 0x2b0 <LCDWriteInt>
    1104:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(8,0, countW, 1);
    1106:	88 e0       	ldi	r24, 0x08	; 8
    1108:	33 d9       	rcall	.-3482   	; 0x370 <LCDGotoXY>
    110a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countW>
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	cd d8       	rcall	.-3686   	; 0x2b0 <LCDWriteInt>
    1116:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteIntXY(9,0, countS, 1);
    1118:	89 e0       	ldi	r24, 0x09	; 9
    111a:	2a d9       	rcall	.-3500   	; 0x370 <LCDGotoXY>
    111c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countS>
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	c4 d8       	rcall	.-3704   	; 0x2b0 <LCDWriteInt>
	LCDWriteStringXY(10,0, ")");
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	8a e0       	ldi	r24, 0x0A	; 10
    112c:	21 d9       	rcall	.-3518   	; 0x370 <LCDGotoXY>
    112e:	8e e2       	ldi	r24, 0x2E	; 46
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	b1 d8       	rcall	.-3742   	; 0x296 <LCDWriteString>
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	8c e0       	ldi	r24, 0x0C	; 12
	LCDWriteStringXY(12,0, "T");
    1138:	1b d9       	rcall	.-3530   	; 0x370 <LCDGotoXY>
    113a:	86 e3       	ldi	r24, 0x36	; 54
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	ab d8       	rcall	.-3754   	; 0x296 <LCDWriteString>
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	8d e0       	ldi	r24, 0x0D	; 13
	LCDWriteIntXY(13,0, runTime_d/100, 3);
    1144:	15 d9       	rcall	.-3542   	; 0x370 <LCDGotoXY>
    1146:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <runTime_d>
    114a:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <runTime_d+0x1>
    114e:	36 95       	lsr	r19
    1150:	27 95       	ror	r18
    1152:	36 95       	lsr	r19
    1154:	27 95       	ror	r18
    1156:	ab e7       	ldi	r26, 0x7B	; 123
    1158:	b4 e1       	ldi	r27, 0x14	; 20
    115a:	fd d3       	rcall	.+2042   	; 0x1956 <__umulhisi3>
    115c:	63 e0       	ldi	r22, 0x03	; 3
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	a5 d8       	rcall	.-3766   	; 0x2b0 <LCDWriteInt>
	//LCDWriteStringXY(0,1,"N=" );
	//LCDWriteInt(enterTime,8);
	//LCDWriteString(" X=");
	//LCDWriteInt(exitTime,6);	

LCDWriteIntXY(0, 1, CurPosition, 3);
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	02 d9       	rcall	.-3580   	; 0x370 <LCDGotoXY>
    116c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CurPosition>
    1170:	63 e0       	ldi	r22, 0x03	; 3
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c d8       	rcall	.-3784   	; 0x2b0 <LCDWriteInt>
LCDWriteStringXY(3,1, ">");
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	83 e0       	ldi	r24, 0x03	; 3
    117c:	f9 d8       	rcall	.-3598   	; 0x370 <LCDGotoXY>
    117e:	88 e1       	ldi	r24, 0x18	; 24
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	89 d8       	rcall	.-3822   	; 0x296 <LCDWriteString>
    1184:	61 e0       	ldi	r22, 0x01	; 1
LCDWriteIntXY(4, 1, Parts[countSort], 3);
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	f3 d8       	rcall	.-3610   	; 0x370 <LCDGotoXY>
    118a:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <countSort>
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	ec 52       	subi	r30, 0x2C	; 44
    1192:	fd 4f       	sbci	r31, 0xFD	; 253
    1194:	80 81       	ld	r24, Z
    1196:	63 e0       	ldi	r22, 0x03	; 3
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	89 d8       	rcall	.-3822   	; 0x2b0 <LCDWriteInt>
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	8c e0       	ldi	r24, 0x0C	; 12
    11a2:	e6 d8       	rcall	.-3636   	; 0x370 <LCDGotoXY>
// 
// 	LCDWriteIntXY(8,1, PAUSEFLAG,1);
// 	LCDWriteInt(HOLDFLAG,1);
//  	LCDWriteInt(TARGETFLAG,1);
//  	LCDWriteInt(DECELFLAG,1);
LCDWriteIntXY(12, 1, adcDisp, 4);
    11a4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <adcDisp>
    11a8:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <adcDisp+0x1>
    11ac:	64 e0       	ldi	r22, 0x04	; 4
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	7f c8       	rjmp	.-3842   	; 0x2b0 <LCDWriteInt>
    11b2:	08 95       	ret

000011b4 <main>:
    11b4:	e1 e6       	ldi	r30, 0x61	; 97
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 e8       	ldi	r24, 0x80	; 128
    11ba:	80 83       	st	Z, r24
    11bc:	81 e0       	ldi	r24, 0x01	; 1


int main(int argc, char *argv[]){

	CLKPR = 0x80;
	CLKPR = 0x01;
    11be:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
    11c0:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
    11c6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
    11c8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
    11ca:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
    11cc:	e4 e0       	ldi	r30, 0x04	; 4
    11ce:	f1 e0       	ldi	r31, 0x01	; 1
    11d0:	80 81       	ld	r24, Z
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	80 83       	st	Z, r24
	DDRE |= _BV(PINE1); //OUTPUT
    11d6:	8d b1       	in	r24, 0x0d	; 13
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8d b9       	out	0x0d, r24	; 13
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
    11dc:	e9 e6       	ldi	r30, 0x69	; 105
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
    11e6:	80 81       	ld	r24, Z
    11e8:	8c 60       	ori	r24, 0x0C	; 12
    11ea:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
    11ec:	80 81       	ld	r24, Z
    11ee:	80 62       	ori	r24, 0x20	; 32
    11f0:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
    11f2:	80 81       	ld	r24, Z
    11f4:	80 6c       	ori	r24, 0xC0	; 192
    11f6:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);
    11f8:	e8 e6       	ldi	r30, 0x68	; 104
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);//RAMPDOWN
    1202:	ac e6       	ldi	r26, 0x6C	; 108
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	8c 91       	ld	r24, X
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	8c 93       	st	X, r24
	PCICR |= _BV(PCIE0);
    120c:	80 81       	ld	r24, Z
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	80 83       	st	Z, r24
	PCMSK0 |= _BV(PCINT3);//Time Calculator
    1212:	eb e6       	ldi	r30, 0x6B	; 107
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	88 60       	ori	r24, 0x08	; 8
    121a:	80 83       	st	Z, r24


	ADC_Init();
    121c:	d0 dd       	rcall	.-1120   	; 0xdbe <ADC_Init>
	mTimer_init();
    121e:	71 de       	rcall	.-798    	; 0xf02 <mTimer_init>
	stepTimer_init();
    1220:	79 da       	rcall	.-2830   	; 0x714 <stepTimer_init>
    1222:	83 e0       	ldi	r24, 0x03	; 3
	InitLCD(LS_BLINK|LS_ULINE);
    1224:	0e 94 0a 01 	call	0x214	; 0x214 <InitLCD>
    1228:	60 e0       	ldi	r22, 0x00	; 0
	LCDClear();
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCDByte>
    1230:	8d b3       	in	r24, 0x1d	; 29
	EIMSK |= 0x08;
    1232:	88 60       	ori	r24, 0x08	; 8
    1234:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
    1236:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
    1238:	2e db       	rcall	.-2468   	; 0x896 <stepCalibrate>
    123a:	8d b3       	in	r24, 0x1d	; 29
	//mTimer(2000);
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
    123c:	87 60       	ori	r24, 0x07	; 7
    123e:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
    1240:	8d b3       	in	r24, 0x1d	; 29
    1242:	87 7f       	andi	r24, 0xF7	; 247
    1244:	8d bb       	out	0x1d, r24	; 29
	Motor_init();
    1246:	0a dd       	rcall	.-1516   	; 0xc5c <Motor_init>
	//sei();
	
	//MAIN OPERATION
	countPart=0;
    1248:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <countPart>
	countSort = 0;
    124c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <countSort>

	startMotor();//Start Belt
    1250:	2f dd       	rcall	.-1442   	; 0xcb0 <startMotor>
	runTimerStart();//Start System Timer
    1252:	66 de       	rcall	.-820    	; 0xf20 <runTimerStart>
    1254:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
    1258:	88 23       	and	r24, r24
    125a:	b1 f1       	breq	.+108    	; 0x12c8 <main+0x114>
    125c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
    1260:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1264:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <refreshTime>
    1268:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <refreshTime+0x1>
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	c3 97       	sbiw	r24, 0x33	; 51
    1272:	48 f0       	brcs	.+18     	; 0x1286 <main+0xd2>
			{
               //dispFLAGS();
				dispStatus();
    1274:	14 df       	rcall	.-472    	; 0x109e <dispStatus>
    1276:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
				refreshTime = runTime_d;	
    127a:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    127e:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <refreshTime+0x1>
    1282:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <refreshTime>
    1286:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
    128a:	88 23       	and	r24, r24
    128c:	19 f3       	breq	.-58     	; 0x1254 <main+0xa0>
    128e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
		{
			if(countSort != countPart)
    1292:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    1296:	98 17       	cp	r25, r24
    1298:	49 f0       	breq	.+18     	; 0x12ac <main+0xf8>
    129a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
			{
				rampTime_d = runTime_d;	
    129e:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    12a2:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    12a6:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
    12aa:	d4 cf       	rjmp	.-88     	; 0x1254 <main+0xa0>
    12ac:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
    12b0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    12b4:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <rampTime_d>
    12b8:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <rampTime_d+0x1>
    12bc:	82 1b       	sub	r24, r18
    12be:	93 0b       	sbc	r25, r19
    12c0:	81 3a       	cpi	r24, 0xA1	; 161
    12c2:	9f 40       	sbci	r25, 0x0F	; 15
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
    12c4:	38 f2       	brcs	.-114    	; 0x1254 <main+0xa0>
    12c6:	2a c0       	rjmp	.+84     	; 0x131c <main+0x168>
	
	while((PIND & 0x01) == 0x00);
    12c8:	b8 dc       	rcall	.-1680   	; 0xc3a <brakeMotor>
    12ca:	48 9b       	sbis	0x09, 0	; 9
	stepStop();
    12cc:	fe cf       	rjmp	.-4      	; 0x12ca <main+0x116>
    12ce:	4e da       	rcall	.-2916   	; 0x76c <stepStop>
	runTimerStop();
    12d0:	42 de       	rcall	.-892    	; 0xf56 <runTimerStop>
    12d2:	cd b3       	in	r28, 0x1d	; 29
	uint8_t INTState = EIMSK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
	EIMSK = 0x01;
    12d6:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 &= ~_BV(PCINT9);
    12d8:	ec e6       	ldi	r30, 0x6C	; 108
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8d 7f       	andi	r24, 0xFD	; 253
	PCMSK0 &= ~_BV(PCINT3);
    12e0:	80 83       	st	Z, r24
    12e2:	eb e6       	ldi	r30, 0x6B	; 107
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	87 7f       	andi	r24, 0xF7	; 247
	brakeMotor();
    12ea:	80 83       	st	Z, r24
    12ec:	a6 dc       	rcall	.-1716   	; 0xc3a <brakeMotor>
	//stopMotor();
	stepRes();
    12ee:	77 d9       	rcall	.-3346   	; 0x5de <stepRes>
    12f0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
	//dispStatus();
	while(!ENABLE)
    12f4:	88 23       	and	r24, r24
    12f6:	e1 f3       	breq	.-8      	; 0x12f0 <main+0x13c>
    12f8:	48 9b       	sbis	0x09, 0	; 9
	{
	}
	
	while((PIND & 0x01) == 0x00);
    12fa:	fe cf       	rjmp	.-4      	; 0x12f8 <main+0x144>
	EIMSK = INTState;
	PCMSK1 |= _BV(PCINT9);
    12fc:	cd bb       	out	0x1d, r28	; 29
    12fe:	ec e6       	ldi	r30, 0x6C	; 108
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
	PCMSK0 |= _BV(PCINT3);
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	80 83       	st	Z, r24
    1308:	eb e6       	ldi	r30, 0x6B	; 107
    130a:	f0 e0       	ldi	r31, 0x00	; 0
	runTimerResume();
    130c:	80 81       	ld	r24, Z
    130e:	88 60       	ori	r24, 0x08	; 8
	stepStart();
    1310:	80 83       	st	Z, r24
    1312:	27 de       	rcall	.-946    	; 0xf62 <runTimerResume>
	runMotor();
    1314:	14 da       	rcall	.-3032   	; 0x73e <stepStart>
    1316:	f2 dc       	rcall	.-1564   	; 0xcfc <runMotor>
	runTimerResume();
    1318:	24 de       	rcall	.-952    	; 0xf62 <runTimerResume>
    131a:	9c cf       	rjmp	.-200    	; 0x1254 <main+0xa0>
	
goto STANDBY;
    131c:	f8 94       	cli
	
	
	
	
SHUTDOWN:
	cli();
    131e:	15 b8       	out	0x05, r1	; 5
	PORTB = 0x00;
    1320:	12 b8       	out	0x02, r1	; 2
	PORTA = 0x00;
    1322:	4a de       	rcall	.-876    	; 0xfb8 <dispComplete>
	
	dispComplete();
    1324:	ff cf       	rjmp	.-2      	; 0x1324 <main+0x170>

00001326 <__vector_2>:
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	0b b6       	in	r0, 0x3b	; 59
    1332:	0f 92       	push	r0
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
	if(ORFLAG){
    1350:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    1354:	88 23       	and	r24, r24
    1356:	61 f1       	breq	.+88     	; 0x13b0 <__vector_2+0x8a>
		
		if(debounce(1, 1, NOISECHECK)){
    1358:	4c e3       	ldi	r20, 0x3C	; 60
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	6a dd       	rcall	.-1324   	; 0xe34 <debounce>
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <__vector_2+0x40>
    1364:	78 c0       	rjmp	.+240    	; 0x1456 <__vector_2+0x130>
			ORFLAG  = 0; //Part has entered OR
    1366:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1);
    136a:	8d b3       	in	r24, 0x1d	; 29
    136c:	8d 7f       	andi	r24, 0xFD	; 253
    136e:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
    1370:	e9 e6       	ldi	r30, 0x69	; 105
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    137a:	8d b3       	in	r24, 0x1d	; 29
    137c:	82 60       	ori	r24, 0x02	; 2
    137e:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
    1380:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <countADC+0x1>
    1384:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <countADC>
			adcPart = 1023;
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	93 e0       	ldi	r25, 0x03	; 3
    138c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    1390:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
		
			ADCSRA |=_BV(ADSC);
    1394:	ea e7       	ldi	r30, 0x7A	; 122
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	80 83       	st	Z, r24
		
			//motorTimerStart();//slow down motor on approach
			ORTime_s = runTime_d;
    139e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    13a2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    13a6:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ORTime_s+0x1>
    13aa:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ORTime_s>
    13ae:	53 c0       	rjmp	.+166    	; 0x1456 <__vector_2+0x130>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
    13b0:	4c e3       	ldi	r20, 0x3C	; 60
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	3e dd       	rcall	.-1412   	; 0xe34 <debounce>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <__vector_2+0x98>
    13bc:	4c c0       	rjmp	.+152    	; 0x1456 <__vector_2+0x130>
    13be:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    13c2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    13c6:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <ORTime_s>
    13ca:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <ORTime_s+0x1>
    13ce:	82 1b       	sub	r24, r18
    13d0:	93 0b       	sbc	r25, r19
    13d2:	4f 97       	sbiw	r24, 0x1f	; 31
    13d4:	08 f4       	brcc	.+2      	; 0x13d8 <__vector_2+0xb2>
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <__vector_2+0x130>
			ORFLAG  = 1;//Part has cleared OR	
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
    13de:	8d b3       	in	r24, 0x1d	; 29
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
    13e4:	e9 e6       	ldi	r30, 0x69	; 105
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	84 60       	ori	r24, 0x04	; 4
    13ec:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
    13ee:	8d b3       	in	r24, 0x1d	; 29
    13f0:	82 60       	ori	r24, 0x02	; 2
    13f2:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
    13f4:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    13f8:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    13fc:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <adcDisp+0x1>
    1400:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
    1404:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    1408:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    140c:	82 3f       	cpi	r24, 0xF2	; 242
    140e:	93 40       	sbci	r25, 0x03	; 3
    1410:	10 f5       	brcc	.+68     	; 0x1456 <__vector_2+0x130>
    1412:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    1416:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    141a:	c3 97       	sbiw	r24, 0x33	; 51
    141c:	e0 f0       	brcs	.+56     	; 0x1456 <__vector_2+0x130>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
    141e:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <countPart>
    1422:	d0 e0       	ldi	r29, 0x00	; 0
    1424:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    1428:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    142c:	dc dc       	rcall	.-1608   	; 0xde6 <classify>
    142e:	cc 52       	subi	r28, 0x2C	; 44
    1430:	dd 4f       	sbci	r29, 0xFD	; 253
    1432:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
    1434:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countPart>
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <countPart>
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ac 52       	subi	r26, 0x2C	; 44
    1442:	bd 4f       	sbci	r27, 0xFD	; 253
    1444:	8c 91       	ld	r24, X
    1446:	eb 52       	subi	r30, 0x2B	; 43
    1448:	fd 4f       	sbci	r31, 0xFD	; 253
    144a:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
    144c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
    1456:	8c b3       	in	r24, 0x1c	; 28
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	8c bb       	out	0x1c, r24	; 28
}//OR
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	bf 91       	pop	r27
    1466:	af 91       	pop	r26
    1468:	9f 91       	pop	r25
    146a:	8f 91       	pop	r24
    146c:	7f 91       	pop	r23
    146e:	6f 91       	pop	r22
    1470:	5f 91       	pop	r21
    1472:	4f 91       	pop	r20
    1474:	3f 91       	pop	r19
    1476:	2f 91       	pop	r18
    1478:	0f 90       	pop	r0
    147a:	0b be       	out	0x3b, r0	; 59
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f 90       	pop	r0
    1482:	1f 90       	pop	r1
    1484:	18 95       	reti

00001486 <__vector_3>:




//EX ISR //547cycles
ISR(INT2_vect){
    1486:	1f 92       	push	r1
    1488:	0f 92       	push	r0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
    1490:	0b b6       	in	r0, 0x3b	; 59
    1492:	0f 92       	push	r0
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
	
	if(!EXFLAG)
    14ac:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <EXFLAG>
    14b0:	81 11       	cpse	r24, r1
    14b2:	2d c0       	rjmp	.+90     	; 0x150e <__vector_3+0x88>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
    14b4:	4c e3       	ldi	r20, 0x3C	; 60
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	bc dc       	rcall	.-1672   	; 0xe34 <debounce>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <__vector_3+0x3c>
    14c0:	85 c0       	rjmp	.+266    	; 0x15cc <__vector_3+0x146>
			{
				EXFLAG =1;//Part is at EX
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <EXFLAG>
				EIMSK &= ~_BV(INT2);
    14c8:	8d b3       	in	r24, 0x1d	; 29
    14ca:	8b 7f       	andi	r24, 0xFB	; 251
    14cc:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
    14ce:	e9 e6       	ldi	r30, 0x69	; 105
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 61       	ori	r24, 0x10	; 16
    14d6:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    14d8:	8d b3       	in	r24, 0x1d	; 29
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    14de:	8c b3       	in	r24, 0x1c	; 28
    14e0:	84 60       	ori	r24, 0x04	; 4
    14e2:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;
    14e4:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <SORTFLAG>
				if(HOLDFLAG)
    14e8:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <HOLDFLAG>
				{
					brakeMotor();
    14ec:	81 11       	cpse	r24, r1
    14ee:	a5 db       	rcall	.-2230   	; 0xc3a <brakeMotor>
				}
				enterdropTime = ENTER_DROP_TIME;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e2       	ldi	r25, 0x20	; 32
    14f4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    14f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
				EXTime_s = runTime_d;
    14fc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1500:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1504:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    1508:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
    150c:	5f c0       	rjmp	.+190    	; 0x15cc <__vector_3+0x146>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME))
    150e:	4c e3       	ldi	r20, 0x3C	; 60
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	8f dc       	rcall	.-1762   	; 0xe34 <debounce>
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <__vector_3+0x96>
    151a:	58 c0       	rjmp	.+176    	; 0x15cc <__vector_3+0x146>
    151c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1520:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1524:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <EXTime_s>
    1528:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <EXTime_s+0x1>
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	4f 97       	sbiw	r24, 0x1f	; 31
    1532:	08 f4       	brcc	.+2      	; 0x1536 <__vector_3+0xb0>
    1534:	4b c0       	rjmp	.+150    	; 0x15cc <__vector_3+0x146>
		{
				EXFLAG = 0;
    1536:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <EXFLAG>
				EIMSK &= ~_BV(INT2);
    153a:	8d b3       	in	r24, 0x1d	; 29
    153c:	8b 7f       	andi	r24, 0xFB	; 251
    153e:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
    1540:	e9 e6       	ldi	r30, 0x69	; 105
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 7e       	andi	r24, 0xEF	; 239
    1548:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
    154a:	8d b3       	in	r24, 0x1d	; 29
    154c:	84 60       	ori	r24, 0x04	; 4
    154e:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    1550:	8c b3       	in	r24, 0x1c	; 28
    1552:	84 60       	ori	r24, 0x04	; 4
    1554:	8c bb       	out	0x1c, r24	; 28
                
				if(countSort<countPart)
    1556:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countSort>
    155a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countPart>
    155e:	98 17       	cp	r25, r24
    1560:	38 f4       	brcc	.+14     	; 0x1570 <__vector_3+0xea>
				{//if we won't overrun the array
					countSort+=1;//go to next part
    1562:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <countSort>
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <countSort>
					TARGETFLAG =0;//New target; reset flag
    156c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION)
    1570:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <CurError>
    1574:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <CurError+0x1>
    1578:	99 23       	and	r25, r25
    157a:	1c f4       	brge	.+6      	; 0x1582 <__vector_3+0xfc>
    157c:	91 95       	neg	r25
    157e:	81 95       	neg	r24
    1580:	91 09       	sbc	r25, r1
    1582:	40 97       	sbiw	r24, 0x10	; 16
    1584:	24 f0       	brlt	.+8      	; 0x158e <__vector_3+0x108>
				{//Current Error is for count-1 at this point
					HOLDFLAG = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <HOLDFLAG>
				}else
				{
					runMotor();
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <__vector_3+0x10a>
    158e:	b6 db       	rcall	.-2196   	; 0xcfc <runMotor>
				}
				
			
                PAUSEFLAG=0;
    1590:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <PAUSEFLAG>
				SORTFLAG = 0;
    1594:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <SORTFLAG>
				DROPFLAG = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <DROPFLAG>
				dropTime = DROP_TIME - (OCR3A - TCNT3);        
    159e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    15a2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    15a6:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    15aa:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    15ae:	82 1b       	sub	r24, r18
    15b0:	93 0b       	sbc	r25, r19
    15b2:	90 5a       	subi	r25, 0xA0	; 160
    15b4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    15b8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
			EXTime_s = runTime_d;	
    15bc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    15c0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    15c4:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <EXTime_s+0x1>
    15c8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <EXTime_s>
		}//HI
	}	
}//EX
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0b be       	out	0x3b, r0	; 59
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	0b b6       	in	r0, 0x3b	; 59
    15fe:	0f 92       	push	r0
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
    1618:	0e 94 c0 01 	call	0x380	; 0x380 <step>
	stepUpdateError(); //calculate the stepper position error
    161c:	0e 94 06 02 	call	0x40c	; 0x40c <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
    1620:	0e 94 83 02 	call	0x506	; 0x506 <stepUpdateDir>
	stepUpdateDelay(); //update the stepper speed
    1624:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <stepUpdateDelay>
//CONTROL STEPPER
//CONTROL MOTOR
	
	CALCFLAG = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <CALCFLAG>
	PORTE ^= _BV(PINE3);
    162e:	9e b1       	in	r25, 0x0e	; 14
    1630:	88 e0       	ldi	r24, 0x08	; 8
    1632:	89 27       	eor	r24, r25
    1634:	8e b9       	out	0x0e, r24	; 14
	
}//stepTimer
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0b be       	out	0x3b, r0	; 59
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_29>:
	



//ADC ISR
ISR(ADC_vect){
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	0b b6       	in	r0, 0x3b	; 59
    1668:	0f 92       	push	r0
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    1676:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    1680:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	adcTemp+= (ADCH<<8);
    1684:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	98 2f       	mov	r25, r24
    168c:	88 27       	eor	r24, r24
    168e:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    1692:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    1696:	82 0f       	add	r24, r18
    1698:	93 1f       	adc	r25, r19
    169a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <adcTemp+0x1>
    169e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <adcTemp>
	countADC+=1;
    16a2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <countADC>
    16a6:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <countADC+0x1>
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <countADC+0x1>
    16b0:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <countADC>
	
	if(adcTemp<adcPart){
    16b4:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <adcTemp>
    16b8:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <adcTemp+0x1>
    16bc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <adcPart>
    16c0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <adcPart+0x1>
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	40 f4       	brcc	.+16     	; 0x16da <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    16ca:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <adcTemp>
    16ce:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <adcTemp+0x1>
    16d2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <adcPart+0x1>
    16d6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <adcPart>
	}
	
	if(!ORFLAG){
    16da:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <ORFLAG>
    16de:	81 11       	cpse	r24, r1
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    16e2:	ea e7       	ldi	r30, 0x7A	; 122
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 64       	ori	r24, 0x40	; 64
    16ea:	80 83       	st	Z, r24
	}
}//ADC
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0b be       	out	0x3b, r0	; 59
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	0b b6       	in	r0, 0x3b	; 59
    1712:	0f 92       	push	r0
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    172c:	4c e3       	ldi	r20, 0x3C	; 60
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	80 db       	rcall	.-2304   	; 0xe34 <debounce>
    1734:	88 23       	and	r24, r24
    1736:	31 f0       	breq	.+12     	; 0x1744 <__vector_4+0x3e>
		//stepStop();
		CurPosition = B_ID;
    1738:	82 e3       	ldi	r24, 0x32	; 50
    173a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <CurPosition>
		HALLSENSOR= 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <HALLSENSOR>
	}
}//HE
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0b be       	out	0x3b, r0	; 59
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <__vector_1>:


//ISR Stop Button
ISR(INT0_vect){
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	0b b6       	in	r0, 0x3b	; 59
    1776:	0f 92       	push	r0
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	4e db       	rcall	.-2404   	; 0xe34 <debounce>
    1798:	88 23       	and	r24, r24
    179a:	51 f0       	breq	.+20     	; 0x17b0 <__vector_1+0x46>
		if(ENABLE)
    179c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ENABLE>
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <__vector_1+0x40>
		{
			ENABLE = 0;
    17a4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <ENABLE>
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <__vector_1+0x46>
		}else
		{
			ENABLE = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ENABLE>
		}
	}
}//ISR Pause Button
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_10>:

ISR(PCINT1_vect)
{
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	0b b6       	in	r0, 0x3b	; 59
    17e2:	0f 92       	push	r0
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	4b db       	rcall	.-2410   	; 0xe9a <debouncePINJ>
    1804:	88 23       	and	r24, r24
    1806:	59 f0       	breq	.+22     	; 0x181e <__vector_10+0x48>
		RAMPDOWN = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <RAMPDOWN>
		rampTime_d = runTime_d;	
    180e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <runTime_d>
    1812:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <runTime_d+0x1>
    1816:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <rampTime_d+0x1>
    181a:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <rampTime_d>
	}
}//ISR Ramp Button
    181e:	ff 91       	pop	r31
    1820:	ef 91       	pop	r30
    1822:	bf 91       	pop	r27
    1824:	af 91       	pop	r26
    1826:	9f 91       	pop	r25
    1828:	8f 91       	pop	r24
    182a:	7f 91       	pop	r23
    182c:	6f 91       	pop	r22
    182e:	5f 91       	pop	r21
    1830:	4f 91       	pop	r20
    1832:	3f 91       	pop	r19
    1834:	2f 91       	pop	r18
    1836:	0f 90       	pop	r0
    1838:	0b be       	out	0x3b, r0	; 59
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	0f 90       	pop	r0
    1840:	1f 90       	pop	r1
    1842:	18 95       	reti

00001844 <__vector_9>:


ISR(PCINT0_vect)
{
    1844:	1f 92       	push	r1
    1846:	0f 92       	push	r0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	0f 92       	push	r0
    184c:	11 24       	eor	r1, r1
    184e:	0b b6       	in	r0, 0x3b	; 59
    1850:	0f 92       	push	r0
    1852:	2f 93       	push	r18
    1854:	3f 93       	push	r19
    1856:	4f 93       	push	r20
    1858:	5f 93       	push	r21
    185a:	6f 93       	push	r22
    185c:	7f 93       	push	r23
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	ef 93       	push	r30
    1868:	ff 93       	push	r31
	if(CALCFLAG)
    186a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <CALCFLAG>
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <__vector_9+0x30>
    1872:	49 c0       	rjmp	.+146    	; 0x1906 <__vector_9+0xc2>
	{
		if(SORTFLAG ^ HOLDFLAG)
    1874:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <SORTFLAG>
    1878:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <HOLDFLAG>
    187c:	98 17       	cp	r25, r24
    187e:	79 f0       	breq	.+30     	; 0x189e <__vector_9+0x5a>
		{
			if(CalcEnterTime())
    1880:	f8 d8       	rcall	.-3600   	; 0xa72 <CalcEnterTime>
    1882:	88 23       	and	r24, r24
    1884:	41 f0       	breq	.+16     	; 0x1896 <__vector_9+0x52>
			{
				brakeMotor();
    1886:	d9 d9       	rcall	.-3150   	; 0xc3a <brakeMotor>
    1888:	80 e0       	ldi	r24, 0x00	; 0
				enterdropTime = BRAKE_DROP_TIME;
    188a:	94 e3       	ldi	r25, 0x34	; 52
    188c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enterdropTime+0x1>
    1890:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enterdropTime>
    1894:	0c c0       	rjmp	.+24     	; 0x18ae <__vector_9+0x6a>
    1896:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <SORTFLAG>
			}else
			{
				SORTFLAG = 0;
				runMotor();
    189a:	30 da       	rcall	.-2976   	; 0xcfc <runMotor>
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <__vector_9+0x6a>
    189e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <SORTFLAG>
			}
		}else if(SORTFLAG && HOLDFLAG)
    18a2:	88 23       	and	r24, r24
    18a4:	21 f0       	breq	.+8      	; 0x18ae <__vector_9+0x6a>
    18a6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <HOLDFLAG>
    18aa:	81 11       	cpse	r24, r1
		{
			brakeMotor();
    18ac:	c6 d9       	rcall	.-3188   	; 0xc3a <brakeMotor>
    18ae:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <DROPFLAG>
		}
		if(DROPFLAG)
    18b2:	88 23       	and	r24, r24
    18b4:	41 f1       	breq	.+80     	; 0x1906 <__vector_9+0xc2>
    18b6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <dropTime>
		{
			if(dropTime<CurDelay)
    18ba:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <dropTime+0x1>
    18be:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <CurDelay>
    18c2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CurDelay+0x1>
    18c6:	28 17       	cp	r18, r24
    18c8:	39 07       	cpc	r19, r25
    18ca:	28 f4       	brcc	.+10     	; 0x18d6 <__vector_9+0x92>
    18cc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <DROPFLAG>
			{
				DROPFLAG = 0;
    18d0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <PAUSEFLAG>
				PAUSEFLAG = 0;
    18d4:	18 c0       	rjmp	.+48     	; 0x1906 <__vector_9+0xc2>
    18d6:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <CurDelay>
				
			}else
			{
				dropTime -=CurDelay;	
    18da:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <CurDelay+0x1>
    18de:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dropTime>
    18e2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dropTime+0x1>
    18e6:	82 1b       	sub	r24, r18
    18e8:	93 0b       	sbc	r25, r19
    18ea:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dropTime+0x1>
    18ee:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dropTime>
    18f2:	0e 94 75 04 	call	0x8ea	; 0x8ea <CalcExitTime>
				if(CalcExitTime())
    18f6:	88 23       	and	r24, r24
    18f8:	21 f0       	breq	.+8      	; 0x1902 <__vector_9+0xbe>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
				{

					PAUSEFLAG = 1;
    18fc:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <PAUSEFLAG>
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <__vector_9+0xc2>
    1902:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <PAUSEFLAG>
				}else
				{
					PAUSEFLAG = 0;
    1906:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <CALCFLAG>
				}
			}	
		}	
	}
	CALCFLAG = 0;
    190a:	ff 91       	pop	r31
	
}
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0b be       	out	0x3b, r0	; 59
    1926:	0f 90       	pop	r0
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	0f 90       	pop	r0
    192c:	1f 90       	pop	r1
    192e:	18 95       	reti

00001930 <__divmodhi4>:
    1930:	97 fb       	bst	r25, 7
    1932:	07 2e       	mov	r0, r23
    1934:	16 f4       	brtc	.+4      	; 0x193a <__divmodhi4+0xa>
    1936:	00 94       	com	r0
    1938:	06 d0       	rcall	.+12     	; 0x1946 <__divmodhi4_neg1>
    193a:	77 fd       	sbrc	r23, 7
    193c:	08 d0       	rcall	.+16     	; 0x194e <__divmodhi4_neg2>
    193e:	1a d0       	rcall	.+52     	; 0x1974 <__udivmodhi4>
    1940:	07 fc       	sbrc	r0, 7
    1942:	05 d0       	rcall	.+10     	; 0x194e <__divmodhi4_neg2>
    1944:	3e f4       	brtc	.+14     	; 0x1954 <__divmodhi4_exit>

00001946 <__divmodhi4_neg1>:
    1946:	90 95       	com	r25
    1948:	81 95       	neg	r24
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	08 95       	ret

0000194e <__divmodhi4_neg2>:
    194e:	70 95       	com	r23
    1950:	61 95       	neg	r22
    1952:	7f 4f       	sbci	r23, 0xFF	; 255

00001954 <__divmodhi4_exit>:
    1954:	08 95       	ret

00001956 <__umulhisi3>:
    1956:	a2 9f       	mul	r26, r18
    1958:	b0 01       	movw	r22, r0
    195a:	b3 9f       	mul	r27, r19
    195c:	c0 01       	movw	r24, r0
    195e:	a3 9f       	mul	r26, r19
    1960:	70 0d       	add	r23, r0
    1962:	81 1d       	adc	r24, r1
    1964:	11 24       	eor	r1, r1
    1966:	91 1d       	adc	r25, r1
    1968:	b2 9f       	mul	r27, r18
    196a:	70 0d       	add	r23, r0
    196c:	81 1d       	adc	r24, r1
    196e:	11 24       	eor	r1, r1
    1970:	91 1d       	adc	r25, r1
    1972:	08 95       	ret

00001974 <__udivmodhi4>:
    1974:	aa 1b       	sub	r26, r26
    1976:	bb 1b       	sub	r27, r27
    1978:	51 e1       	ldi	r21, 0x11	; 17
    197a:	07 c0       	rjmp	.+14     	; 0x198a <__udivmodhi4_ep>

0000197c <__udivmodhi4_loop>:
    197c:	aa 1f       	adc	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	a6 17       	cp	r26, r22
    1982:	b7 07       	cpc	r27, r23
    1984:	10 f0       	brcs	.+4      	; 0x198a <__udivmodhi4_ep>
    1986:	a6 1b       	sub	r26, r22
    1988:	b7 0b       	sbc	r27, r23

0000198a <__udivmodhi4_ep>:
    198a:	88 1f       	adc	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	5a 95       	dec	r21
    1990:	a9 f7       	brne	.-22     	; 0x197c <__udivmodhi4_loop>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	08 95       	ret

0000199c <_exit>:
    199c:	f8 94       	cli

0000199e <__stop_program>:
    199e:	ff cf       	rjmp	.-2      	; 0x199e <__stop_program>
