
RiskySortingMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  0000181e  000018b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000181e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800240  00800240  000018f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c8  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001746  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00006e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7e  00000000  00000000  00007444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ff  00000000  00000000  00007ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000090c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_1>
       8:	03 c6       	rjmp	.+3078   	; 0xc10 <__vector_2>
       a:	00 00       	nop
       c:	b3 c6       	rjmp	.+3430   	; 0xd74 <__vector_3>
       e:	00 00       	nop
      10:	ef c7       	rjmp	.+4062   	; 0xff0 <__vector_4>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_9>
      28:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c7       	rjmp	.+3792   	; 0xf46 <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c7       	rjmp	.+3682   	; 0xee4 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	83 c3       	rjmp	.+1798   	; 0x7b0 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	66 c2       	rjmp	.+1228   	; 0x58a <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e1       	ldi	r30, 0x1E	; 30
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 33       	cpi	r26, 0x38	; 56
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	ca d4       	rcall	.+2452   	; 0xab4 <main>
     120:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <_exit>

00000124 <__bad_interrupt>:
     124:	5c c3       	rjmp	.+1720   	; 0x7de <__vector_default>

00000126 <CalcExitTime>:
			TIFR1 |= _BV(OCF1A);//reset interrupt flag
			i++;	//increment counter to count milliseconds
		}
	}
	return;
}//mTimer
     126:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <HOLDFLAG>
     12a:	81 11       	cpse	r24, r1
     12c:	bc c0       	rjmp	.+376    	; 0x2a6 <CalcExitTime+0x180>
     12e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
     132:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <countSort>
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	e1 59       	subi	r30, 0x91	; 145
     13a:	fd 4f       	sbci	r31, 0xFD	; 253
     13c:	20 81       	ld	r18, Z
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	82 1b       	sub	r24, r18
     142:	91 09       	sbc	r25, r1
     144:	9c 01       	movw	r18, r24
     146:	22 f4       	brpl	.+8      	; 0x150 <CalcExitTime+0x2a>
     148:	22 27       	eor	r18, r18
     14a:	33 27       	eor	r19, r19
     14c:	28 1b       	sub	r18, r24
     14e:	39 0b       	sbc	r19, r25
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	82 1b       	sub	r24, r18
     154:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <Steps2Exit>
     158:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     15c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <accSteps>
     160:	89 1b       	sub	r24, r25
     162:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <Steps2MIN>
     166:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Dir>
     16a:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <CurError>
     16e:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <CurError+0x1>
     172:	42 03       	mulsu	r20, r18
     174:	c0 01       	movw	r24, r0
     176:	43 9f       	mul	r20, r19
     178:	90 0d       	add	r25, r0
     17a:	11 24       	eor	r1, r1
     17c:	18 16       	cp	r1, r24
     17e:	19 06       	cpc	r1, r25
     180:	44 f0       	brlt	.+16     	; 0x192 <CalcExitTime+0x6c>
     182:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     186:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     18a:	81 15       	cp	r24, r1
     18c:	9a 40       	sbci	r25, 0x0A	; 10
     18e:	08 f4       	brcc	.+2      	; 0x192 <CalcExitTime+0x6c>
     190:	3f c0       	rjmp	.+126    	; 0x210 <CalcExitTime+0xea>
     192:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <Steps2Exit>
     196:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     19a:	98 17       	cp	r25, r24
     19c:	98 f4       	brcc	.+38     	; 0x1c4 <CalcExitTime+0x9e>
     19e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     1a2:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     1a6:	93 50       	subi	r25, 0x03	; 3
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <Steps2Exit>
     1b0:	48 9f       	mul	r20, r24
     1b2:	90 01       	movw	r18, r0
     1b4:	49 9f       	mul	r20, r25
     1b6:	30 0d       	add	r19, r0
     1b8:	11 24       	eor	r1, r1
     1ba:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <exitTime+0x1>
     1be:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <exitTime>
     1c2:	64 c0       	rjmp	.+200    	; 0x28c <CalcExitTime+0x166>
     1c4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     1c8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     1cc:	93 50       	subi	r25, 0x03	; 3
     1ce:	96 95       	lsr	r25
     1d0:	87 95       	ror	r24
     1d2:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <Steps2MIN>
     1d6:	48 9f       	mul	r20, r24
     1d8:	90 01       	movw	r18, r0
     1da:	49 9f       	mul	r20, r25
     1dc:	30 0d       	add	r19, r0
     1de:	11 24       	eor	r1, r1
     1e0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <Steps2Exit>
     1e4:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	84 1b       	sub	r24, r20
     1ec:	91 09       	sbc	r25, r1
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	73 e0       	ldi	r23, 0x03	; 3
     1f2:	86 9f       	mul	r24, r22
     1f4:	a0 01       	movw	r20, r0
     1f6:	87 9f       	mul	r24, r23
     1f8:	50 0d       	add	r21, r0
     1fa:	96 9f       	mul	r25, r22
     1fc:	50 0d       	add	r21, r0
     1fe:	11 24       	eor	r1, r1
     200:	ca 01       	movw	r24, r20
     202:	82 0f       	add	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <exitTime+0x1>
     20a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <exitTime>
     20e:	3e c0       	rjmp	.+124    	; 0x28c <CalcExitTime+0x166>
     210:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <CurDelay>
     214:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <CurDelay+0x1>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	9a e0       	ldi	r25, 0x0A	; 10
     21c:	82 1b       	sub	r24, r18
     21e:	93 0b       	sbc	r25, r19
     220:	96 95       	lsr	r25
     222:	87 95       	ror	r24
     224:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     228:	48 9f       	mul	r20, r24
     22a:	90 01       	movw	r18, r0
     22c:	49 9f       	mul	r20, r25
     22e:	30 0d       	add	r19, r0
     230:	11 24       	eor	r1, r1
     232:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Steps2Acc>
     236:	89 2f       	mov	r24, r25
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	ac 01       	movw	r20, r24
     23c:	56 95       	lsr	r21
     23e:	54 2f       	mov	r21, r20
     240:	44 27       	eor	r20, r20
     242:	57 95       	ror	r21
     244:	47 95       	ror	r20
     246:	98 2f       	mov	r25, r24
     248:	88 27       	eor	r24, r24
     24a:	99 0f       	add	r25, r25
     24c:	99 0f       	add	r25, r25
     24e:	84 1b       	sub	r24, r20
     250:	95 0b       	sbc	r25, r21
     252:	82 0f       	add	r24, r18
     254:	93 1f       	adc	r25, r19
     256:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <Steps2Exit>
     25a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     25e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <Steps2MIN>
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	43 1b       	sub	r20, r19
     266:	51 09       	sbc	r21, r1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	24 1b       	sub	r18, r20
     26c:	35 0b       	sbc	r19, r21
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	73 e0       	ldi	r23, 0x03	; 3
     272:	26 9f       	mul	r18, r22
     274:	a0 01       	movw	r20, r0
     276:	27 9f       	mul	r18, r23
     278:	50 0d       	add	r21, r0
     27a:	36 9f       	mul	r19, r22
     27c:	50 0d       	add	r21, r0
     27e:	11 24       	eor	r1, r1
     280:	84 0f       	add	r24, r20
     282:	95 1f       	adc	r25, r21
     284:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <exitTime+0x1>
     288:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <exitTime>
     28c:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <exitTime>
     290:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <exitTime+0x1>
     294:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dropTime>
     298:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dropTime+0x1>
     29c:	28 17       	cp	r18, r24
     29e:	39 07       	cpc	r19, r25
     2a0:	20 f4       	brcc	.+8      	; 0x2aa <CalcExitTime+0x184>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	08 95       	ret
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <CalcEnterTime>:
     2ae:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
     2b2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
     2b6:	99 23       	and	r25, r25
     2b8:	1c f4       	brge	.+6      	; 0x2c0 <CalcEnterTime+0x12>
     2ba:	91 95       	neg	r25
     2bc:	81 95       	neg	r24
     2be:	91 09       	sbc	r25, r1
     2c0:	0f 97       	sbiw	r24, 0x0f	; 15
     2c2:	0c f4       	brge	.+2      	; 0x2c6 <CalcEnterTime+0x18>
     2c4:	d9 c0       	rjmp	.+434    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     2c6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
     2ca:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
     2ce:	99 23       	and	r25, r25
     2d0:	1c f4       	brge	.+6      	; 0x2d8 <CalcEnterTime+0x2a>
     2d2:	91 95       	neg	r25
     2d4:	81 95       	neg	r24
     2d6:	91 09       	sbc	r25, r1
     2d8:	8f 50       	subi	r24, 0x0F	; 15
     2da:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Steps2Enter>
     2de:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     2e2:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <accSteps>
     2e6:	89 1b       	sub	r24, r25
     2e8:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <Steps2MIN>
     2ec:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Steps2Enter>
     2f0:	89 32       	cpi	r24, 0x29	; 41
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <CalcEnterTime+0x48>
     2f4:	c3 c0       	rjmp	.+390    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     2f6:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Dir>
     2fa:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <CurError>
     2fe:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <CurError+0x1>
     302:	42 03       	mulsu	r20, r18
     304:	c0 01       	movw	r24, r0
     306:	43 9f       	mul	r20, r19
     308:	90 0d       	add	r25, r0
     30a:	11 24       	eor	r1, r1
     30c:	18 16       	cp	r1, r24
     30e:	19 06       	cpc	r1, r25
     310:	44 f0       	brlt	.+16     	; 0x322 <CalcEnterTime+0x74>
     312:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     316:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     31a:	81 15       	cp	r24, r1
     31c:	9a 40       	sbci	r25, 0x0A	; 10
     31e:	08 f4       	brcc	.+2      	; 0x322 <CalcEnterTime+0x74>
     320:	4e c0       	rjmp	.+156    	; 0x3be <CalcEnterTime+0x110>
     322:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <Steps2MIN>
     326:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Steps2Enter>
     32a:	89 17       	cp	r24, r25
     32c:	98 f4       	brcc	.+38     	; 0x354 <CalcEnterTime+0xa6>
     32e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     332:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     336:	93 50       	subi	r25, 0x03	; 3
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <Steps2MIN>
     340:	48 9f       	mul	r20, r24
     342:	90 01       	movw	r18, r0
     344:	49 9f       	mul	r20, r25
     346:	30 0d       	add	r19, r0
     348:	11 24       	eor	r1, r1
     34a:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <enterTime+0x1>
     34e:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <enterTime>
     352:	85 c0       	rjmp	.+266    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     354:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Steps2Enter>
     358:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <Steps2MIN>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	82 1b       	sub	r24, r18
     360:	91 09       	sbc	r25, r1
     362:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     366:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     36a:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <enterTime>
     36e:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <enterTime+0x1>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	33 e0       	ldi	r19, 0x03	; 3
     376:	42 9f       	mul	r20, r18
     378:	c0 01       	movw	r24, r0
     37a:	43 9f       	mul	r20, r19
     37c:	90 0d       	add	r25, r0
     37e:	52 9f       	mul	r21, r18
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     388:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     38c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
     390:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
     394:	93 50       	subi	r25, 0x03	; 3
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <Steps2MIN>
     39e:	48 9f       	mul	r20, r24
     3a0:	90 01       	movw	r18, r0
     3a2:	49 9f       	mul	r20, r25
     3a4:	30 0d       	add	r19, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <enterTime>
     3ac:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <enterTime+0x1>
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
     3b4:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     3b8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     3bc:	50 c0       	rjmp	.+160    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3be:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Steps2Enter>
     3c2:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <Steps2MIN>
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	82 1b       	sub	r24, r18
     3ca:	91 09       	sbc	r25, r1
     3cc:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     3d0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     3d4:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <enterTime>
     3d8:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <enterTime+0x1>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	33 e0       	ldi	r19, 0x03	; 3
     3e0:	42 9f       	mul	r20, r18
     3e2:	c0 01       	movw	r24, r0
     3e4:	43 9f       	mul	r20, r19
     3e6:	90 0d       	add	r25, r0
     3e8:	52 9f       	mul	r21, r18
     3ea:	90 0d       	add	r25, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     3f2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     3f6:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <CurDelay>
     3fa:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <CurDelay+0x1>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	9a e0       	ldi	r25, 0x0A	; 10
     402:	82 1b       	sub	r24, r18
     404:	93 0b       	sbc	r25, r19
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     40e:	48 9f       	mul	r20, r24
     410:	90 01       	movw	r18, r0
     412:	49 9f       	mul	r20, r25
     414:	30 0d       	add	r19, r0
     416:	11 24       	eor	r1, r1
     418:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <enterTime>
     41c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <enterTime+0x1>
     420:	82 0f       	add	r24, r18
     422:	93 1f       	adc	r25, r19
     424:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     428:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     42c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	9c 01       	movw	r18, r24
     434:	36 95       	lsr	r19
     436:	32 2f       	mov	r19, r18
     438:	22 27       	eor	r18, r18
     43a:	37 95       	ror	r19
     43c:	27 95       	ror	r18
     43e:	98 2f       	mov	r25, r24
     440:	88 27       	eor	r24, r24
     442:	99 0f       	add	r25, r25
     444:	99 0f       	add	r25, r25
     446:	82 1b       	sub	r24, r18
     448:	93 0b       	sbc	r25, r19
     44a:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <enterTime>
     44e:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <enterTime+0x1>
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <enterTime+0x1>
     45a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <enterTime>
     45e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <enterTime>
     462:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <enterTime+0x1>
     466:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     46a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     46e:	82 17       	cp	r24, r18
     470:	93 07       	cpc	r25, r19
     472:	30 f4       	brcc	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 95       	ret
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	08 95       	ret
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	08 95       	ret

00000484 <brakeMotor>:
     484:	85 b1       	in	r24, 0x05	; 5
     486:	80 78       	andi	r24, 0x80	; 128
     488:	85 b9       	out	0x05, r24	; 5
     48a:	85 b1       	in	r24, 0x05	; 5
     48c:	8f 60       	ori	r24, 0x0F	; 15
     48e:	85 b9       	out	0x05, r24	; 5
     490:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <MOTORFLAG>
     494:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     498:	08 95       	ret

0000049a <stopMotor>:
     49a:	15 b8       	out	0x05, r1	; 5
     49c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <MOTORFLAG>
     4a0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     4a4:	08 95       	ret

000004a6 <Motor_init>:
     4a6:	84 b5       	in	r24, 0x24	; 36
     4a8:	83 68       	ori	r24, 0x83	; 131
     4aa:	84 bd       	out	0x24, r24	; 36
     4ac:	85 b5       	in	r24, 0x25	; 37
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	85 bd       	out	0x25, r24	; 37
     4b2:	85 b3       	in	r24, 0x15	; 21
     4b4:	82 60       	ori	r24, 0x02	; 2
     4b6:	85 bb       	out	0x15, r24	; 21
     4b8:	17 bc       	out	0x27, r1	; 39
     4ba:	ef cf       	rjmp	.-34     	; 0x49a <stopMotor>
     4bc:	08 95       	ret

000004be <motorTimerStart>:
     4be:	e1 e2       	ldi	r30, 0x21	; 33
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	80 81       	ld	r24, Z
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 83       	st	Z, r24
     4c8:	80 ef       	ldi	r24, 0xF0	; 240
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     4d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     4d4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     4d8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     4dc:	a3 e7       	ldi	r26, 0x73	; 115
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	8c 91       	ld	r24, X
     4e2:	82 60       	ori	r24, 0x02	; 2
     4e4:	8c 93       	st	X, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	85 60       	ori	r24, 0x05	; 5
     4ea:	80 83       	st	Z, r24
     4ec:	8a b3       	in	r24, 0x1a	; 26
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	8a bb       	out	0x1a, r24	; 26
     4f2:	8a ea       	ldi	r24, 0xAA	; 170
     4f4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     4f8:	08 95       	ret

000004fa <startMotor>:
     4fa:	85 b1       	in	r24, 0x05	; 5
     4fc:	80 78       	andi	r24, 0x80	; 128
     4fe:	85 b9       	out	0x05, r24	; 5
     500:	85 b1       	in	r24, 0x05	; 5
     502:	8b 60       	ori	r24, 0x0B	; 11
     504:	85 b9       	out	0x05, r24	; 5
     506:	16 bc       	out	0x26, r1	; 38
     508:	8c ed       	ldi	r24, 0xDC	; 220
     50a:	87 bd       	out	0x27, r24	; 39
     50c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     510:	81 11       	cpse	r24, r1
     512:	12 c0       	rjmp	.+36     	; 0x538 <startMotor+0x3e>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <MOTORFLAG>
     51a:	d1 df       	rcall	.-94     	; 0x4be <motorTimerStart>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	94 e2       	ldi	r25, 0x24	; 36
     520:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     524:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     528:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     52c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     530:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <motorTime_d+0x1>
     534:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <motorTime_d>
     538:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     53c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     540:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     544:	08 95       	ret

00000546 <runMotor>:
     546:	85 b1       	in	r24, 0x05	; 5
     548:	80 78       	andi	r24, 0x80	; 128
     54a:	85 b9       	out	0x05, r24	; 5
     54c:	85 b1       	in	r24, 0x05	; 5
     54e:	8b 60       	ori	r24, 0x0B	; 11
     550:	85 b9       	out	0x05, r24	; 5
     552:	16 bc       	out	0x26, r1	; 38
     554:	8a ea       	ldi	r24, 0xAA	; 170
     556:	87 bd       	out	0x27, r24	; 39
     558:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     55c:	81 11       	cpse	r24, r1
     55e:	0c c0       	rjmp	.+24     	; 0x578 <runMotor+0x32>
     560:	ae df       	rcall	.-164    	; 0x4be <motorTimerStart>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <MOTORFLAG>
     568:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     56c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     570:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <motorTime_d+0x1>
     574:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <motorTime_d>
     578:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <MOTORFLAG>
     57c:	08 95       	ret

0000057e <motorTimerStop>:
     57e:	e1 e2       	ldi	r30, 0x21	; 33
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	80 81       	ld	r24, Z
     584:	8a 7f       	andi	r24, 0xFA	; 250
     586:	80 83       	st	Z, r24
     588:	08 95       	ret

0000058a <__vector_47>:
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	0b b6       	in	r0, 0x3b	; 59
     596:	0f 92       	push	r0
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
     5b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5b4:	82 50       	subi	r24, 0x02	; 2
     5b6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     5c2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     5c6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5ca:	8e 36       	cpi	r24, 0x6E	; 110
     5cc:	30 f4       	brcc	.+12     	; 0x5da <__vector_47+0x50>
     5ce:	8e e6       	ldi	r24, 0x6E	; 110
     5d0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     5d4:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <MOTORFLAG>
     5d8:	d2 df       	rcall	.-92     	; 0x57e <motorTimerStop>
     5da:	16 bc       	out	0x26, r1	; 38
     5dc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5e0:	87 bd       	out	0x27, r24	; 39
     5e2:	ff 91       	pop	r31
     5e4:	ef 91       	pop	r30
     5e6:	bf 91       	pop	r27
     5e8:	af 91       	pop	r26
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	7f 91       	pop	r23
     5f0:	6f 91       	pop	r22
     5f2:	5f 91       	pop	r21
     5f4:	4f 91       	pop	r20
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	0b be       	out	0x3b, r0	; 59
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <ADC_Init>:
     608:	ec e7       	ldi	r30, 0x7C	; 124
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	80 83       	st	Z, r24
     612:	80 81       	ld	r24, Z
     614:	81 60       	ori	r24, 0x01	; 1
     616:	80 83       	st	Z, r24
     618:	ea e7       	ldi	r30, 0x7A	; 122
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	80 68       	ori	r24, 0x80	; 128
     620:	80 83       	st	Z, r24
     622:	80 81       	ld	r24, Z
     624:	88 60       	ori	r24, 0x08	; 8
     626:	80 83       	st	Z, r24
     628:	80 81       	ld	r24, Z
     62a:	83 60       	ori	r24, 0x03	; 3
     62c:	80 83       	st	Z, r24
     62e:	08 95       	ret

00000630 <classify>:
     630:	80 3c       	cpi	r24, 0xC0	; 192
     632:	23 e0       	ldi	r18, 0x03	; 3
     634:	92 07       	cpc	r25, r18
     636:	38 f0       	brcs	.+14     	; 0x646 <classify+0x16>
     638:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countB>
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <countB>
     642:	82 e3       	ldi	r24, 0x32	; 50
     644:	08 95       	ret
     646:	80 32       	cpi	r24, 0x20	; 32
     648:	23 e0       	ldi	r18, 0x03	; 3
     64a:	92 07       	cpc	r25, r18
     64c:	38 f0       	brcs	.+14     	; 0x65c <classify+0x2c>
     64e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countW>
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <countW>
     658:	86 e9       	ldi	r24, 0x96	; 150
     65a:	08 95       	ret
     65c:	8c 32       	cpi	r24, 0x2C	; 44
     65e:	91 40       	sbci	r25, 0x01	; 1
     660:	38 f0       	brcs	.+14     	; 0x670 <classify+0x40>
     662:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <countS>
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <countS>
     66c:	88 ec       	ldi	r24, 0xC8	; 200
     66e:	08 95       	ret
     670:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countA>
     674:	8f 5f       	subi	r24, 0xFF	; 255
     676:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <countA>
     67a:	84 e6       	ldi	r24, 0x64	; 100
     67c:	08 95       	ret

0000067e <debounce>:
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	08 2e       	mov	r0, r24
     684:	02 c0       	rjmp	.+4      	; 0x68a <debounce+0xc>
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	0a 94       	dec	r0
     68c:	e2 f7       	brpl	.-8      	; 0x686 <debounce+0x8>
     68e:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <__data_end>
     692:	01 c0       	rjmp	.+2      	; 0x696 <debounce+0x18>
     694:	66 0f       	add	r22, r22
     696:	8a 95       	dec	r24
     698:	ea f7       	brpl	.-6      	; 0x694 <debounce+0x16>
     69a:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <countCheck+0x1>
     69e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <countCheck>
     6a2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <countCheck+0x1>
     6a6:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <countCheck>
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <debounce+0x4c>
     6ac:	99 b1       	in	r25, 0x09	; 9
     6ae:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     6b2:	89 23       	and	r24, r25
     6b4:	68 13       	cpse	r22, r24
     6b6:	12 c0       	rjmp	.+36     	; 0x6dc <debounce+0x5e>
     6b8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countCheck>
     6bc:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <countCheck+0x1>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <countCheck+0x1>
     6c6:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <countCheck>
     6ca:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countCheck>
     6ce:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <countCheck+0x1>
     6d2:	84 17       	cp	r24, r20
     6d4:	95 07       	cpc	r25, r21
     6d6:	50 f3       	brcs	.-44     	; 0x6ac <debounce+0x2e>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	08 95       	ret
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret

000006e0 <debouncePINJ>:
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	08 2e       	mov	r0, r24
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <debouncePINJ+0xc>
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <debouncePINJ+0x8>
     6f0:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <__data_end>
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <debouncePINJ+0x18>
     6f6:	66 0f       	add	r22, r22
     6f8:	8a 95       	dec	r24
     6fa:	ea f7       	brpl	.-6      	; 0x6f6 <debouncePINJ+0x16>
     6fc:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <countCheck+0x1>
     700:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <countCheck>
     704:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <countCheck+0x1>
     708:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <countCheck>
     70c:	10 c0       	rjmp	.+32     	; 0x72e <debouncePINJ+0x4e>
     70e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     712:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     716:	89 23       	and	r24, r25
     718:	68 13       	cpse	r22, r24
     71a:	12 c0       	rjmp	.+36     	; 0x740 <debouncePINJ+0x60>
     71c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countCheck>
     720:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <countCheck+0x1>
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <countCheck+0x1>
     72a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <countCheck>
     72e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <countCheck>
     732:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <countCheck+0x1>
     736:	84 17       	cp	r24, r20
     738:	95 07       	cpc	r25, r21
     73a:	48 f3       	brcs	.-46     	; 0x70e <debouncePINJ+0x2e>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	08 95       	ret
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret

00000744 <mTimer_init>:
     744:	e1 e8       	ldi	r30, 0x81	; 129
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	82 60       	ori	r24, 0x02	; 2
     74c:	80 83       	st	Z, r24
     74e:	80 81       	ld	r24, Z
     750:	88 60       	ori	r24, 0x08	; 8
     752:	80 83       	st	Z, r24
     754:	88 ee       	ldi	r24, 0xE8	; 232
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     75c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     760:	08 95       	ret

00000762 <runTimerStart>:



//Starts System Timer
void runTimerStart(void){
	TCCR4B |= _BV(WGM42); // Configure counter for CTC mode;
     762:	e1 ea       	ldi	r30, 0xA1	; 161
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	80 83       	st	Z, r24
	OCR4A = 0x0007; //0.01s timer
     76c:	87 e0       	ldi	r24, 0x07	; 7
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     774:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCNT4 = 0x0000; //Counter value register; Reset to 0
     778:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     77c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	TIMSK4 |= _BV(OCIE4A);  //Enable Interrupt
     780:	a2 e7       	ldi	r26, 0x72	; 114
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	8c 91       	ld	r24, X
     786:	82 60       	ori	r24, 0x02	; 2
     788:	8c 93       	st	X, r24
	TCCR4B |= _BV(CS42)| _BV(CS40);//Set prescaler to 1024
     78a:	80 81       	ld	r24, Z
     78c:	85 60       	ori	r24, 0x05	; 5
     78e:	80 83       	st	Z, r24
	TIFR4 |= _BV(OCF4A);//reset interrupt flag
     790:	89 b3       	in	r24, 0x19	; 25
     792:	82 60       	ori	r24, 0x02	; 2
     794:	89 bb       	out	0x19, r24	; 25
     796:	08 95       	ret

00000798 <runTimerStop>:
}//mTimer_init


//Stops System Timer
void runTimerStop(void){
	TCCR4B &= ~_BV(CS42)& ~_BV(CS40);
     798:	e1 ea       	ldi	r30, 0xA1	; 161
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8a 7f       	andi	r24, 0xFA	; 250
     7a0:	80 83       	st	Z, r24
     7a2:	08 95       	ret

000007a4 <runTimerResume>:
}
void runTimerResume(void){
	TCCR4B |= _BV(CS42) | _BV(CS40);
     7a4:	e1 ea       	ldi	r30, 0xA1	; 161
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	85 60       	ori	r24, 0x05	; 5
     7ac:	80 83       	st	Z, r24
     7ae:	08 95       	ret

000007b0 <__vector_42>:
}

//System Timer
ISR(TIMER4_COMPA_vect){
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25

	runTime_d +=1;//add 1/1000 seconds to system time
     7be:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     7c2:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <runTime_d+0x1>
     7cc:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <runTime_d>
	
}//ISR
     7d0:	9f 91       	pop	r25
     7d2:	8f 91       	pop	r24
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <__vector_default>:



//BAD ISR
ISR(BADISR_vect)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	8f 93       	push	r24
	PORTC = 0xFF;
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	88 b9       	out	0x08, r24	; 8
	//mTimer(1000);
}//BADISR
     7ee:	8f 91       	pop	r24
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <dispComplete>:
//DISPLAY

void dispComplete (void)
{
	
	LCDClear();
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	af d0       	rcall	.+350    	; 0x95e <LCDByte>
	LCDWriteIntXY(0,0, countB, 2);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	4f d1       	rcall	.+670    	; 0xaa4 <LCDGotoXY>
     806:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <countB>
     80a:	62 e0       	ldi	r22, 0x02	; 2
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	ea d0       	rcall	.+468    	; 0x9e6 <LCDWriteInt>
	LCDWriteString(",");
     812:	85 e1       	ldi	r24, 0x15	; 21
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	da d0       	rcall	.+436    	; 0x9cc <LCDWriteString>
     818:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <countA>
	LCDWriteInt( countA, 2);
     81c:	62 e0       	ldi	r22, 0x02	; 2
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	e1 d0       	rcall	.+450    	; 0x9e6 <LCDWriteInt>
	LCDWriteString(",");
     824:	85 e1       	ldi	r24, 0x15	; 21
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	d1 d0       	rcall	.+418    	; 0x9cc <LCDWriteString>
	LCDWriteInt( countW, 2);
     82a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countW>
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	d8 d0       	rcall	.+432    	; 0x9e6 <LCDWriteInt>
	LCDWriteString(",");
     836:	85 e1       	ldi	r24, 0x15	; 21
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	c8 d0       	rcall	.+400    	; 0x9cc <LCDWriteString>
	LCDWriteInt(countS, 2);
     83c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <countS>
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	cf d0       	rcall	.+414    	; 0x9e6 <LCDWriteInt>
	LCDWriteString("->");
     848:	87 e1       	ldi	r24, 0x17	; 23
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	bf d0       	rcall	.+382    	; 0x9cc <LCDWriteString>
	LCDWriteInt(countSort, 2);
     84e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <countSort>
     852:	62 e0       	ldi	r22, 0x02	; 2
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	c6 d0       	rcall	.+396    	; 0x9e6 <LCDWriteInt>
	LCDWriteStringXY(0,1, "T=");
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	22 d1       	rcall	.+580    	; 0xaa4 <LCDGotoXY>
     860:	8a e1       	ldi	r24, 0x1A	; 26
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	b3 d0       	rcall	.+358    	; 0x9cc <LCDWriteString>
     866:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <runTime_d>
	LCDWriteInt(runTime_d/1000, 2);
     86a:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <runTime_d+0x1>
     86e:	36 95       	lsr	r19
     870:	27 95       	ror	r18
     872:	36 95       	lsr	r19
     874:	27 95       	ror	r18
     876:	36 95       	lsr	r19
     878:	27 95       	ror	r18
     87a:	a5 ec       	ldi	r26, 0xC5	; 197
     87c:	b0 e2       	ldi	r27, 0x20	; 32
     87e:	aa d7       	rcall	.+3924   	; 0x17d4 <__umulhisi3>
     880:	62 e0       	ldi	r22, 0x02	; 2
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	92 95       	swap	r25
     886:	82 95       	swap	r24
     888:	8f 70       	andi	r24, 0x0F	; 15
     88a:	89 27       	eor	r24, r25
     88c:	9f 70       	andi	r25, 0x0F	; 15
     88e:	89 27       	eor	r24, r25
     890:	aa d0       	rcall	.+340    	; 0x9e6 <LCDWriteInt>
	LCDWriteString( ".");
     892:	8d e1       	ldi	r24, 0x1D	; 29
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	9a d0       	rcall	.+308    	; 0x9cc <LCDWriteString>
     898:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <runTime_d>
	LCDWriteInt(runTime_d%10 , 1);
     89c:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <runTime_d+0x1>
     8a0:	9a 01       	movw	r18, r20
     8a2:	ad ec       	ldi	r26, 0xCD	; 205
     8a4:	bc ec       	ldi	r27, 0xCC	; 204
     8a6:	96 d7       	rcall	.+3884   	; 0x17d4 <__umulhisi3>
     8a8:	96 95       	lsr	r25
     8aa:	87 95       	ror	r24
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
     8b4:	9c 01       	movw	r18, r24
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	9a 01       	movw	r18, r20
     8d0:	28 1b       	sub	r18, r24
     8d2:	39 0b       	sbc	r19, r25
     8d4:	c9 01       	movw	r24, r18
     8d6:	87 d0       	rcall	.+270    	; 0x9e6 <LCDWriteInt>
     8d8:	8f e1       	ldi	r24, 0x1F	; 31
	LCDWriteString("s Complete");
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	77 c0       	rjmp	.+238    	; 0x9cc <LCDWriteString>
     8de:	08 95       	ret

000008e0 <LCDBusyLoop>:
     8e0:	87 b1       	in	r24, 0x07	; 7
     8e2:	80 7f       	andi	r24, 0xF0	; 240

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
     8e4:	87 b9       	out	0x07, r24	; 7
     8e6:	88 b1       	in	r24, 0x08	; 8
     8e8:	80 62       	ori	r24, 0x20	; 32
     8ea:	88 b9       	out	0x08, r24	; 8
     8ec:	88 b1       	in	r24, 0x08	; 8
     8ee:	8f 7b       	andi	r24, 0xBF	; 191
     8f0:	88 b9       	out	0x08, r24	; 8
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <LCDBusyLoop+0x14>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <LCDBusyLoop+0x1a>
     8fa:	88 b1       	in	r24, 0x08	; 8
     8fc:	80 68       	ori	r24, 0x80	; 128
     8fe:	88 b9       	out	0x08, r24	; 8
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	9a 95       	dec	r25
     904:	f1 f7       	brne	.-4      	; 0x902 <LCDBusyLoop+0x22>
     906:	00 c0       	rjmp	.+0      	; 0x908 <LCDBusyLoop+0x28>
     908:	86 b1       	in	r24, 0x06	; 6
     90a:	82 95       	swap	r24
     90c:	80 7f       	andi	r24, 0xF0	; 240
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	9a 95       	dec	r25
     912:	f1 f7       	brne	.-4      	; 0x910 <LCDBusyLoop+0x30>
     914:	00 c0       	rjmp	.+0      	; 0x916 <LCDBusyLoop+0x36>
     916:	98 b1       	in	r25, 0x08	; 8
     918:	9f 77       	andi	r25, 0x7F	; 127
     91a:	98 b9       	out	0x08, r25	; 8
     91c:	95 e0       	ldi	r25, 0x05	; 5
     91e:	9a 95       	dec	r25
     920:	f1 f7       	brne	.-4      	; 0x91e <LCDBusyLoop+0x3e>
     922:	00 00       	nop
     924:	98 b1       	in	r25, 0x08	; 8
     926:	90 68       	ori	r25, 0x80	; 128
     928:	98 b9       	out	0x08, r25	; 8
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	9a 95       	dec	r25
     92e:	f1 f7       	brne	.-4      	; 0x92c <LCDBusyLoop+0x4c>
     930:	00 c0       	rjmp	.+0      	; 0x932 <LCDBusyLoop+0x52>
     932:	96 b1       	in	r25, 0x06	; 6
     934:	80 78       	andi	r24, 0x80	; 128
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	9a 95       	dec	r25
     93a:	f1 f7       	brne	.-4      	; 0x938 <LCDBusyLoop+0x58>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <LCDBusyLoop+0x5e>
     93e:	98 b1       	in	r25, 0x08	; 8
     940:	9f 77       	andi	r25, 0x7F	; 127
     942:	98 b9       	out	0x08, r25	; 8
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	9a 95       	dec	r25
     948:	f1 f7       	brne	.-4      	; 0x946 <LCDBusyLoop+0x66>
     94a:	00 00       	nop
     94c:	81 11       	cpse	r24, r1
     94e:	d5 cf       	rjmp	.-86     	; 0x8fa <LCDBusyLoop+0x1a>
     950:	88 b1       	in	r24, 0x08	; 8
     952:	8f 7d       	andi	r24, 0xDF	; 223
     954:	88 b9       	out	0x08, r24	; 8
     956:	87 b1       	in	r24, 0x07	; 7
     958:	8f 60       	ori	r24, 0x0F	; 15
     95a:	87 b9       	out	0x07, r24	; 7
     95c:	08 95       	ret

0000095e <LCDByte>:
     95e:	28 2f       	mov	r18, r24
     960:	22 95       	swap	r18
     962:	2f 70       	andi	r18, 0x0F	; 15
     964:	8f 70       	andi	r24, 0x0F	; 15
     966:	61 11       	cpse	r22, r1
     968:	04 c0       	rjmp	.+8      	; 0x972 <LCDByte+0x14>
     96a:	98 b1       	in	r25, 0x08	; 8
     96c:	9f 7b       	andi	r25, 0xBF	; 191
     96e:	98 b9       	out	0x08, r25	; 8
     970:	03 c0       	rjmp	.+6      	; 0x978 <LCDByte+0x1a>
     972:	98 b1       	in	r25, 0x08	; 8
     974:	90 64       	ori	r25, 0x40	; 64
     976:	98 b9       	out	0x08, r25	; 8
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	9a 95       	dec	r25
     97c:	f1 f7       	brne	.-4      	; 0x97a <LCDByte+0x1c>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <LCDByte+0x22>
     980:	98 b1       	in	r25, 0x08	; 8
     982:	90 68       	ori	r25, 0x80	; 128
     984:	98 b9       	out	0x08, r25	; 8
     986:	98 b1       	in	r25, 0x08	; 8
     988:	90 7f       	andi	r25, 0xF0	; 240
     98a:	92 2b       	or	r25, r18
     98c:	98 b9       	out	0x08, r25	; 8
     98e:	95 e0       	ldi	r25, 0x05	; 5
     990:	9a 95       	dec	r25
     992:	f1 f7       	brne	.-4      	; 0x990 <LCDByte+0x32>
     994:	00 00       	nop
     996:	98 b1       	in	r25, 0x08	; 8
     998:	9f 77       	andi	r25, 0x7F	; 127
     99a:	98 b9       	out	0x08, r25	; 8
     99c:	95 e0       	ldi	r25, 0x05	; 5
     99e:	9a 95       	dec	r25
     9a0:	f1 f7       	brne	.-4      	; 0x99e <LCDByte+0x40>
     9a2:	00 00       	nop
     9a4:	98 b1       	in	r25, 0x08	; 8
     9a6:	90 68       	ori	r25, 0x80	; 128
     9a8:	98 b9       	out	0x08, r25	; 8
     9aa:	98 b1       	in	r25, 0x08	; 8
     9ac:	90 7f       	andi	r25, 0xF0	; 240
     9ae:	89 2b       	or	r24, r25
     9b0:	88 b9       	out	0x08, r24	; 8
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	8a 95       	dec	r24
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <LCDByte+0x56>
     9b8:	00 00       	nop
     9ba:	88 b1       	in	r24, 0x08	; 8
     9bc:	8f 77       	andi	r24, 0x7F	; 127
     9be:	88 b9       	out	0x08, r24	; 8
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	9a 95       	dec	r25
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <LCDByte+0x64>
     9c6:	00 00       	nop
     9c8:	8b cf       	rjmp	.-234    	; 0x8e0 <LCDBusyLoop>
     9ca:	08 95       	ret

000009cc <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <LCDWriteString+0xe>
 {
	LCDData(*msg);
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	c3 df       	rcall	.-122    	; 0x95e <LCDByte>
	msg++;
     9d8:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     9da:	88 81       	ld	r24, Y
     9dc:	81 11       	cpse	r24, r1
     9de:	fa cf       	rjmp	.-12     	; 0x9d4 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <LCDWriteInt+0xe>
     9f4:	1f 92       	push	r1
     9f6:	1f 92       	push	r1
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     9fe:	fe 01       	movw	r30, r28
     a00:	31 96       	adiw	r30, 0x01	; 1
     a02:	25 e0       	ldi	r18, 0x05	; 5
     a04:	df 01       	movw	r26, r30
     a06:	1d 92       	st	X+, r1
     a08:	2a 95       	dec	r18
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <LCDWriteInt+0x20>
	int i=4,j=0;
     a0c:	24 e0       	ldi	r18, 0x04	; 4
     a0e:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     a12:	6a e0       	ldi	r22, 0x0A	; 10
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	cb d6       	rcall	.+3478   	; 0x17ae <__divmodhi4>
     a18:	e1 e0       	ldi	r30, 0x01	; 1
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 0f       	add	r30, r28
     a1e:	fd 1f       	adc	r31, r29
     a20:	e2 0f       	add	r30, r18
     a22:	f3 1f       	adc	r31, r19
     a24:	80 83       	st	Z, r24
	val=val/10;
     a26:	86 2f       	mov	r24, r22
     a28:	97 2f       	mov	r25, r23
	i--;
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	81 f7       	brne	.-32     	; 0xa12 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     a32:	bf ef       	ldi	r27, 0xFF	; 255
     a34:	eb 16       	cp	r14, r27
     a36:	fb 06       	cpc	r15, r27
     a38:	81 f4       	brne	.+32     	; 0xa5a <LCDWriteInt+0x74>
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <LCDWriteInt+0x60>
     a42:	00 e0       	ldi	r16, 0x00	; 0
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	e1 e0       	ldi	r30, 0x01	; 1
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ec 0f       	add	r30, r28
     a4c:	fd 1f       	adc	r31, r29
     a4e:	e0 0f       	add	r30, r16
     a50:	f1 1f       	adc	r31, r17
     a52:	20 81       	ld	r18, Z
     a54:	22 23       	and	r18, r18
     a56:	91 f3       	breq	.-28     	; 0xa3c <LCDWriteInt+0x56>
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     a5a:	05 e0       	ldi	r16, 0x05	; 5
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	0e 19       	sub	r16, r14
     a60:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     a62:	99 23       	and	r25, r25
     a64:	84 f4       	brge	.+32     	; 0xa86 <LCDWriteInt+0xa0>
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	8d e2       	ldi	r24, 0x2D	; 45
     a6a:	79 df       	rcall	.-270    	; 0x95e <LCDByte>
     a6c:	0c c0       	rjmp	.+24     	; 0xa86 <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     a6e:	e1 e0       	ldi	r30, 0x01	; 1
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	ec 0f       	add	r30, r28
     a74:	fd 1f       	adc	r31, r29
     a76:	e0 0f       	add	r30, r16
     a78:	f1 1f       	adc	r31, r17
     a7a:	80 81       	ld	r24, Z
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	80 5d       	subi	r24, 0xD0	; 208
     a80:	6e df       	rcall	.-292    	; 0x95e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     a82:	0f 5f       	subi	r16, 0xFF	; 255
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	05 30       	cpi	r16, 0x05	; 5
     a88:	11 05       	cpc	r17, r1
     a8a:	8c f3       	brlt	.-30     	; 0xa6e <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	08 95       	ret

00000aa4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     aa4:	88 32       	cpi	r24, 0x28	; 40
     aa6:	28 f4       	brcc	.+10     	; 0xab2 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     aa8:	61 11       	cpse	r22, r1
     aaa:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	80 68       	ori	r24, 0x80	; 128
     ab0:	56 cf       	rjmp	.-340    	; 0x95e <LCDByte>
     ab2:	08 95       	ret

00000ab4 <main>:



int main(int argc, char *argv[]){

	CLKPR = 0x80;
     ab4:	e1 e6       	ldi	r30, 0x61	; 97
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	80 83       	st	Z, r24
	CLKPR = 0x01;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 83       	st	Z, r24
	//INITIALIZATION
	
	cli();//Disable Interrupts
     ac0:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT
     ac6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT
     ac8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT
     aca:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
     acc:	e4 e0       	ldi	r30, 0x04	; 4
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	80 81       	ld	r24, Z
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	80 83       	st	Z, r24
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
     ad6:	e9 e6       	ldi	r30, 0x69	; 105
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	82 60       	ori	r24, 0x02	; 2
     ade:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
     ae0:	80 81       	ld	r24, Z
     ae2:	8c 60       	ori	r24, 0x0C	; 12
     ae4:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
     ae6:	80 81       	ld	r24, Z
     ae8:	80 62       	ori	r24, 0x20	; 32
     aea:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
     aec:	80 81       	ld	r24, Z
     aee:	80 6c       	ori	r24, 0xC0	; 192
     af0:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);
     af2:	e8 e6       	ldi	r30, 0x68	; 104
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	82 60       	ori	r24, 0x02	; 2
     afa:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);//RAMPDOWN
     afc:	ac e6       	ldi	r26, 0x6C	; 108
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	8c 91       	ld	r24, X
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	8c 93       	st	X, r24
	PCICR |= _BV(PCIE0);
     b06:	80 81       	ld	r24, Z
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 83       	st	Z, r24
	PCMSK0 |= _BV(PCINT4);//Time Calculator
     b0c:	eb e6       	ldi	r30, 0x6B	; 107
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	80 61       	ori	r24, 0x10	; 16
     b14:	80 83       	st	Z, r24


	ADC_Init();
     b16:	78 dd       	rcall	.-1296   	; 0x608 <ADC_Init>
	mTimer_init();
     b18:	15 de       	rcall	.-982    	; 0x744 <mTimer_init>
	stepTimer_init();
     b1a:	50 d5       	rcall	.+2720   	; 0x15bc <stepTimer_init>
     b1c:	8d b3       	in	r24, 0x1d	; 29
//	InitLCD(LS_BLINK|LS_ULINE);
//	LCDClear();
	EIMSK |= 0x08;
     b1e:	88 60       	ori	r24, 0x08	; 8
     b20:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
     b22:	78 94       	sei

	//CALIBRATION
	
	stepCalibrate();
     b24:	0c d6       	rcall	.+3096   	; 0x173e <stepCalibrate>
     b26:	8d b3       	in	r24, 0x1d	; 29
	//mTimer(2000);
	//testStep();
	//while(1);
	//cli();
	EIMSK |= 0x07;
     b28:	87 60       	ori	r24, 0x07	; 7
     b2a:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);
     b2c:	8d b3       	in	r24, 0x1d	; 29
     b2e:	87 7f       	andi	r24, 0xF7	; 247
     b30:	8d bb       	out	0x1d, r24	; 29
	Motor_init();
     b32:	b9 dc       	rcall	.-1678   	; 0x4a6 <Motor_init>
	//sei();
	
	//MAIN OPERATION
	countPart=0;
     b34:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <countPart>
	countSort = 0;
     b38:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <countSort>

	startMotor();//Start Belt
     b3c:	de dc       	rcall	.-1604   	; 0x4fa <startMotor>
	runTimerStart();//Start System Timer
     b3e:	11 de       	rcall	.-990    	; 0x762 <runTimerStart>
     b40:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>

STANDBY:
	//Handle Specific Processes and Display Data
	while (1)
	{				
		if(ENABLE)
     b44:	88 23       	and	r24, r24
     b46:	a9 f1       	breq	.+106    	; 0xbb2 <main+0xfe>
     b48:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
		{
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
     b4c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     b50:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <refreshTime>
     b54:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <refreshTime+0x1>
     b58:	82 1b       	sub	r24, r18
     b5a:	93 0b       	sbc	r25, r19
     b5c:	c3 97       	sbiw	r24, 0x33	; 51
     b5e:	40 f0       	brcs	.+16     	; 0xb70 <main+0xbc>
     b60:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
			{
               //dispFLAGS();
			//	dispStatus();
				refreshTime = runTime_d;	
     b64:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     b68:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <refreshTime+0x1>
     b6c:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <refreshTime>
     b70:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <RAMPDOWN>
		{
			goto DISABLE;
		}


		if(RAMPDOWN)
     b74:	88 23       	and	r24, r24
     b76:	21 f3       	breq	.-56     	; 0xb40 <main+0x8c>
     b78:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <countSort>
		{
			if(countSort != countPart)
     b7c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <countPart>
     b80:	98 17       	cp	r25, r24
     b82:	49 f0       	breq	.+18     	; 0xb96 <main+0xe2>
     b84:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
			{
				rampTime_d = runTime_d;	
     b88:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     b8c:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <rampTime_d+0x1>
     b90:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <rampTime_d>
     b94:	d5 cf       	rjmp	.-86     	; 0xb40 <main+0x8c>
     b96:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
     b9a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     b9e:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <rampTime_d>
     ba2:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <rampTime_d+0x1>
     ba6:	82 1b       	sub	r24, r18
     ba8:	93 0b       	sbc	r25, r19
     baa:	81 3a       	cpi	r24, 0xA1	; 161
     bac:	9f 40       	sbci	r25, 0x0F	; 15
	}//while ENABLE
	
	
	
DISABLE:
	brakeMotor();
     bae:	40 f2       	brcs	.-112    	; 0xb40 <main+0x8c>
     bb0:	2a c0       	rjmp	.+84     	; 0xc06 <main+0x152>
	
	while((PIND & 0x01) == 0x00);
     bb2:	68 dc       	rcall	.-1840   	; 0x484 <brakeMotor>
     bb4:	48 9b       	sbis	0x09, 0	; 9
	stepStop();
     bb6:	fe cf       	rjmp	.-4      	; 0xbb4 <main+0x100>
     bb8:	2d d5       	rcall	.+2650   	; 0x1614 <stepStop>
	runTimerStop();
     bba:	ee dd       	rcall	.-1060   	; 0x798 <runTimerStop>
     bbc:	cd b3       	in	r28, 0x1d	; 29
	uint8_t INTState = EIMSK;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
	EIMSK = 0x01;
     bc0:	8d bb       	out	0x1d, r24	; 29
     bc2:	ec e6       	ldi	r30, 0x6C	; 108
	PCMSK1 &= ~_BV(PCINT9);
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
	PCMSK0 &= ~_BV(PCINT4);
     bca:	80 83       	st	Z, r24
     bcc:	eb e6       	ldi	r30, 0x6B	; 107
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8f 7e       	andi	r24, 0xEF	; 239
	brakeMotor();
     bd4:	80 83       	st	Z, r24
     bd6:	56 dc       	rcall	.-1876   	; 0x484 <brakeMotor>
	//stopMotor();
	stepRes();
     bd8:	56 d4       	rcall	.+2220   	; 0x1486 <stepRes>
     bda:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>
	//dispStatus();
	while(!ENABLE)
     bde:	88 23       	and	r24, r24
     be0:	e1 f3       	breq	.-8      	; 0xbda <main+0x126>
     be2:	48 9b       	sbis	0x09, 0	; 9
	{
	}
	
	while((PIND & 0x01) == 0x00);
     be4:	fe cf       	rjmp	.-4      	; 0xbe2 <main+0x12e>
	EIMSK = INTState;
	PCMSK1 |= _BV(PCINT9);
     be6:	cd bb       	out	0x1d, r28	; 29
     be8:	ec e6       	ldi	r30, 0x6C	; 108
     bea:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= _BV(PCINT4);
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	80 83       	st	Z, r24
     bf2:	eb e6       	ldi	r30, 0x6B	; 107
	runTimerResume();
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
	stepStart();
     bf8:	80 61       	ori	r24, 0x10	; 16
     bfa:	80 83       	st	Z, r24
	runMotor();
     bfc:	d3 dd       	rcall	.-1114   	; 0x7a4 <runTimerResume>
     bfe:	f3 d4       	rcall	.+2534   	; 0x15e6 <stepStart>
	runTimerResume();
     c00:	a2 dc       	rcall	.-1724   	; 0x546 <runMotor>
     c02:	d0 dd       	rcall	.-1120   	; 0x7a4 <runTimerResume>
	
goto STANDBY;
     c04:	9d cf       	rjmp	.-198    	; 0xb40 <main+0x8c>
	
	
	
	
SHUTDOWN:
	cli();
     c06:	f8 94       	cli
	PORTB = 0x00;
     c08:	15 b8       	out	0x05, r1	; 5
	PORTA = 0x00;
     c0a:	12 b8       	out	0x02, r1	; 2
	
	dispComplete();
     c0c:	f6 dd       	rcall	.-1044   	; 0x7fa <dispComplete>
     c0e:	ff cf       	rjmp	.-2      	; 0xc0e <main+0x15a>

00000c10 <__vector_2>:
     c10:	1f 92       	push	r1
//*************ISR***************//



//OR ISR
ISR(INT1_vect){
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	0b b6       	in	r0, 0x3b	; 59
     c1c:	0f 92       	push	r0
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
	if(ORFLAG){
     c3a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ORFLAG>
     c3e:	88 23       	and	r24, r24
     c40:	69 f1       	breq	.+90     	; 0xc9c <__vector_2+0x8c>
		
		if(debounce(1, 1, NOISECHECK)){
     c42:	4c e3       	ldi	r20, 0x3C	; 60
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	19 dd       	rcall	.-1486   	; 0x67e <debounce>
     c4c:	88 23       	and	r24, r24
     c4e:	09 f4       	brne	.+2      	; 0xc52 <__vector_2+0x42>
     c50:	79 c0       	rjmp	.+242    	; 0xd44 <__vector_2+0x134>
			ORFLAG  = 0; //Part has entered OR
     c52:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <ORFLAG>
			EIMSK &= ~_BV(INT1);
     c56:	8d b3       	in	r24, 0x1d	; 29
     c58:	8d 7f       	andi	r24, 0xFD	; 253
     c5a:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10); //Falling Edge
     c5c:	e9 e6       	ldi	r30, 0x69	; 105
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8b 7f       	andi	r24, 0xFB	; 251
     c64:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
     c66:	8d b3       	in	r24, 0x1d	; 29
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	8d bb       	out	0x1d, r24	; 29


			countADC = 0;
     c6c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <countADC+0x1>
     c70:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <countADC>
			adcPart = 1023;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcPart+0x1>
     c7c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcPart>
		
			ADCSRA |=_BV(ADSC);
     c80:	ea e7       	ldi	r30, 0x7A	; 122
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	80 64       	ori	r24, 0x40	; 64
     c88:	80 83       	st	Z, r24
		
			//motorTimerStart();//slow down motor on approach
			ORTime_s = runTime_d;
     c8a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     c8e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     c92:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <ORTime_s+0x1>
     c96:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <ORTime_s>
     c9a:	54 c0       	rjmp	.+168    	; 0xd44 <__vector_2+0x134>
		}//HI
		
	}else//!ORFLAG
	{
		
		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME)){
     c9c:	4c e3       	ldi	r20, 0x3C	; 60
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	ec dc       	rcall	.-1576   	; 0x67e <debounce>
     ca6:	88 23       	and	r24, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <__vector_2+0x9c>
     caa:	4c c0       	rjmp	.+152    	; 0xd44 <__vector_2+0x134>
     cac:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     cb0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     cb4:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <ORTime_s>
     cb8:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <ORTime_s+0x1>
     cbc:	82 1b       	sub	r24, r18
     cbe:	93 0b       	sbc	r25, r19
     cc0:	4f 97       	sbiw	r24, 0x1f	; 31
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <__vector_2+0xb6>
     cc4:	3f c0       	rjmp	.+126    	; 0xd44 <__vector_2+0x134>
			ORFLAG  = 1;//Part has cleared OR	
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <ORFLAG>
			EIMSK &= ~_BV(INT1); // Disable Interrupt
     ccc:	8d b3       	in	r24, 0x1d	; 29
     cce:	8d 7f       	andi	r24, 0xFD	; 253
     cd0:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);//Turn on rising edge
     cd2:	e9 e6       	ldi	r30, 0x69	; 105
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	84 60       	ori	r24, 0x04	; 4
     cda:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); // Enable Interrupt
     cdc:	8d b3       	in	r24, 0x1d	; 29
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;
     ce2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     ce6:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     cea:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <adcDisp+0x1>
     cee:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <adcDisp>
			if((adcPart<HI_Reflect) && countADC>50){
     cf2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     cf6:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     cfa:	82 3f       	cpi	r24, 0xF2	; 242
     cfc:	93 40       	sbci	r25, 0x03	; 3
     cfe:	10 f5       	brcc	.+68     	; 0xd44 <__vector_2+0x134>
     d00:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <countADC>
     d04:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <countADC+0x1>
     d08:	c3 97       	sbiw	r24, 0x33	; 51
     d0a:	e0 f0       	brcs	.+56     	; 0xd44 <__vector_2+0x134>
				Parts[countPart] = classify(adcPart);//classify the part and add to the step position
     d0c:	c0 91 5d 02 	lds	r28, 0x025D	; 0x80025d <countPart>
     d10:	d0 e0       	ldi	r29, 0x00	; 0
     d12:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     d16:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     d1a:	8a dc       	rcall	.-1772   	; 0x630 <classify>
     d1c:	c0 59       	subi	r28, 0x90	; 144
     d1e:	dd 4f       	sbci	r29, 0xFD	; 253
     d20:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
     d22:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <countPart>
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <countPart>
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	a0 59       	subi	r26, 0x90	; 144
     d30:	bd 4f       	sbci	r27, 0xFD	; 253
     d32:	8c 91       	ld	r24, X
     d34:	ef 58       	subi	r30, 0x8F	; 143
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
     d3a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <countPart>
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <countPart>
			}
		}//LO	
		
	}//else
	EIFR |= _BV(INT1); 
     d44:	8c b3       	in	r24, 0x1c	; 28
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	8c bb       	out	0x1c, r24	; 28
}//OR
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0b be       	out	0x3b, r0	; 59
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_3>:




//EX ISR //260
ISR(INT2_vect){
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	0b b6       	in	r0, 0x3b	; 59
     d80:	0f 92       	push	r0
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
	
	if(!EXFLAG)
     d9a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <EXFLAG>
     d9e:	81 11       	cpse	r24, r1
     da0:	2e c0       	rjmp	.+92     	; 0xdfe <__vector_3+0x8a>
	{//Part is entering EX

			if(debounce(2, 0, NOISECHECK))
     da2:	4c e3       	ldi	r20, 0x3C	; 60
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	69 dc       	rcall	.-1838   	; 0x67e <debounce>
     dac:	88 23       	and	r24, r24
     dae:	09 f4       	brne	.+2      	; 0xdb2 <__vector_3+0x3e>
     db0:	86 c0       	rjmp	.+268    	; 0xebe <__vector_3+0x14a>
			{
				EXFLAG =1;//Part is at EX
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <EXFLAG>
				EIMSK &= ~_BV(INT2);
     db8:	8d b3       	in	r24, 0x1d	; 29
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);// Rising Edge
     dbe:	e9 e6       	ldi	r30, 0x69	; 105
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 61       	ori	r24, 0x10	; 16
     dc6:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
     dc8:	8d b3       	in	r24, 0x1d	; 29
     dca:	84 60       	ori	r24, 0x04	; 4
     dcc:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
     dce:	8c b3       	in	r24, 0x1c	; 28
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;
     dd4:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <SORTFLAG>
				if(HOLDFLAG)
     dd8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <HOLDFLAG>
				{
					brakeMotor();
     ddc:	81 11       	cpse	r24, r1
     dde:	52 db       	rcall	.-2396   	; 0x484 <brakeMotor>
				}
				enterdropTime = ENTER_DROP_TIME;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e2       	ldi	r25, 0x20	; 32
     de4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     de8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
				EXTime_s = runTime_d;
     dec:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     df0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     df4:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <EXTime_s+0x1>
     df8:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <EXTime_s>
     dfc:	60 c0       	rjmp	.+192    	; 0xebe <__vector_3+0x14a>
			}//LO
	}else
	{//Part is leaving EX
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME))
     dfe:	4c e3       	ldi	r20, 0x3C	; 60
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	3b dc       	rcall	.-1930   	; 0x67e <debounce>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <__vector_3+0x9a>
     e0c:	58 c0       	rjmp	.+176    	; 0xebe <__vector_3+0x14a>
     e0e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     e12:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     e16:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <EXTime_s>
     e1a:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <EXTime_s+0x1>
     e1e:	82 1b       	sub	r24, r18
     e20:	93 0b       	sbc	r25, r19
     e22:	4f 97       	sbiw	r24, 0x1f	; 31
     e24:	08 f4       	brcc	.+2      	; 0xe28 <__vector_3+0xb4>
     e26:	4b c0       	rjmp	.+150    	; 0xebe <__vector_3+0x14a>
		{
				EXFLAG = 0;
     e28:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <EXFLAG>
				EIMSK &= ~_BV(INT2);
     e2c:	8d b3       	in	r24, 0x1d	; 29
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));	//Turn on falling edge
     e32:	e9 e6       	ldi	r30, 0x69	; 105
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
     e3c:	8d b3       	in	r24, 0x1d	; 29
     e3e:	84 60       	ori	r24, 0x04	; 4
     e40:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
     e42:	8c b3       	in	r24, 0x1c	; 28
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	8c bb       	out	0x1c, r24	; 28
                
				if(countSort<countPart)
     e48:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <countSort>
     e4c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <countPart>
     e50:	98 17       	cp	r25, r24
     e52:	38 f4       	brcc	.+14     	; 0xe62 <__vector_3+0xee>
				{//if we won't overrun the array
					countSort+=1;//go to next part
     e54:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <countSort>
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <countSort>
					TARGETFLAG =0;//New target; reset flag
     e5e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION)
     e62:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
     e66:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
     e6a:	99 23       	and	r25, r25
     e6c:	1c f4       	brge	.+6      	; 0xe74 <__vector_3+0x100>
     e6e:	91 95       	neg	r25
     e70:	81 95       	neg	r24
     e72:	91 09       	sbc	r25, r1
     e74:	40 97       	sbiw	r24, 0x10	; 16
     e76:	24 f0       	brlt	.+8      	; 0xe80 <__vector_3+0x10c>
				{//Current Error is for count-1 at this point
					HOLDFLAG = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <HOLDFLAG>
				}else
				{
					runMotor();
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <__vector_3+0x10e>
     e80:	62 db       	rcall	.-2364   	; 0x546 <runMotor>
				}
				
			
                PAUSEFLAG=0;
     e82:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <PAUSEFLAG>
				SORTFLAG = 0;
     e86:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <SORTFLAG>
				DROPFLAG = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <DROPFLAG>
				dropTime = DROP_TIME - (OCR3A - TCNT3);        
     e90:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     e94:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     e98:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
     e9c:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     ea0:	82 1b       	sub	r24, r18
     ea2:	93 0b       	sbc	r25, r19
     ea4:	90 5a       	subi	r25, 0xA0	; 160
     ea6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dropTime+0x1>
     eaa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dropTime>
			EXTime_s = runTime_d;	
     eae:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
     eb2:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
     eb6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <EXTime_s+0x1>
     eba:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <EXTime_s>
		}//HI
	}	
}//EX
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <__vector_32>:

//STEPPER ISR  377 cc
ISR(TIMER3_COMPA_vect){
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	0b b6       	in	r0, 0x3b	; 59
     ef0:	0f 92       	push	r0
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
//CONTROL STEPPER

	step();//step towards target
     f0a:	8a d1       	rcall	.+788    	; 0x1220 <step>
	stepUpdateError(); //calculate the stepper position error
     f0c:	cf d1       	rcall	.+926    	; 0x12ac <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
     f0e:	4f d2       	rcall	.+1182   	; 0x13ae <stepUpdateDir>
     f10:	c5 d2       	rcall	.+1418   	; 0x149c <stepUpdateDelay>
	stepUpdateDelay(); //update the stepper speed
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <CALCFLAG>
//CONTROL STEPPER
//CONTROL MOTOR
	
	CALCFLAG = 1;
     f18:	95 b1       	in	r25, 0x05	; 5
     f1a:	80 e1       	ldi	r24, 0x10	; 16
	PORTB ^= _BV(PINB4);
     f1c:	89 27       	eor	r24, r25
     f1e:	85 b9       	out	0x05, r24	; 5
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
	
}//stepTimer
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	7f 91       	pop	r23
     f2e:	6f 91       	pop	r22
     f30:	5f 91       	pop	r21
     f32:	4f 91       	pop	r20
     f34:	3f 91       	pop	r19
     f36:	2f 91       	pop	r18
     f38:	0f 90       	pop	r0
     f3a:	0b be       	out	0x3b, r0	; 59
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_29>:
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
	



//ADC ISR
ISR(ADC_vect){
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	0b b6       	in	r0, 0x3b	; 59
     f52:	0f 92       	push	r0
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
     f60:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <adcTemp+0x1>
     f6a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcTemp>
	adcTemp+= (ADCH<<8);
     f6e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	98 2f       	mov	r25, r24
     f76:	88 27       	eor	r24, r24
     f78:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <adcTemp>
     f7c:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <adcTemp+0x1>
     f80:	82 0f       	add	r24, r18
     f82:	93 1f       	adc	r25, r19
     f84:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <adcTemp+0x1>
     f88:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcTemp>
	countADC+=1;
     f8c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <countADC>
     f90:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <countADC+0x1>
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <countADC+0x1>
     f9a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <countADC>
	
	if(adcTemp<adcPart){
     f9e:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <adcTemp>
     fa2:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <adcTemp+0x1>
     fa6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     faa:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     fae:	28 17       	cp	r18, r24
     fb0:	39 07       	cpc	r19, r25
     fb2:	40 f4       	brcc	.+16     	; 0xfc4 <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
     fb4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcTemp>
     fb8:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <adcTemp+0x1>
     fbc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcPart+0x1>
     fc0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcPart>
	}
	
	if(!ORFLAG){
     fc4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ORFLAG>
     fc8:	81 11       	cpse	r24, r1
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
     fcc:	ea e7       	ldi	r30, 0x7A	; 122
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	80 83       	st	Z, r24
	}
}//ADC
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0b be       	out	0x3b, r0	; 59
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_4>:


//HE ISR
ISR(INT3_vect){
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	0b b6       	in	r0, 0x3b	; 59
     ffc:	0f 92       	push	r0
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    1016:	4c e3       	ldi	r20, 0x3C	; 60
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	2f db       	rcall	.-2466   	; 0x67e <debounce>
    1020:	88 23       	and	r24, r24
    1022:	31 f0       	breq	.+12     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
		//stepStop();
		CurPosition = B_ID;
    1024:	82 e3       	ldi	r24, 0x32	; 50
    1026:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
		HALLSENSOR= 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <HALLSENSOR>
	}
}//HE
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0b be       	out	0x3b, r0	; 59
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <__vector_1>:


//ISR Stop Button
ISR(INT0_vect){
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	0b b6       	in	r0, 0x3b	; 59
    1062:	0f 92       	push	r0
    1064:	2f 93       	push	r18
    1066:	3f 93       	push	r19
    1068:	4f 93       	push	r20
    106a:	5f 93       	push	r21
    106c:	6f 93       	push	r22
    106e:	7f 93       	push	r23
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    107c:	40 e3       	ldi	r20, 0x30	; 48
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	fc da       	rcall	.-2568   	; 0x67e <debounce>
    1086:	88 23       	and	r24, r24
    1088:	51 f0       	breq	.+20     	; 0x109e <__vector_1+0x48>
		if(ENABLE)
    108a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>
    108e:	88 23       	and	r24, r24
    1090:	19 f0       	breq	.+6      	; 0x1098 <__vector_1+0x42>
		{
			ENABLE = 0;
    1092:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <ENABLE>
    1096:	03 c0       	rjmp	.+6      	; 0x109e <__vector_1+0x48>
		}else
		{
			ENABLE = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ENABLE>
		}
	}
}//ISR Pause Button
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_10>:

ISR(PCINT1_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    10ea:	40 e3       	ldi	r20, 0x30	; 48
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	f6 da       	rcall	.-2580   	; 0x6e0 <debouncePINJ>
    10f4:	88 23       	and	r24, r24
    10f6:	59 f0       	breq	.+22     	; 0x110e <__vector_10+0x4a>
		RAMPDOWN = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <RAMPDOWN>
		rampTime_d = runTime_d;	
    10fe:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <runTime_d>
    1102:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <runTime_d+0x1>
    1106:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <rampTime_d+0x1>
    110a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <rampTime_d>
	}
}//ISR Ramp Button
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_9>:


ISR(PCINT0_vect)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if(CALCFLAG)
    115a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <CALCFLAG>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <__vector_9+0x30>
    1162:	49 c0       	rjmp	.+146    	; 0x11f6 <__vector_9+0xc2>
	{
		if(SORTFLAG ^ HOLDFLAG)
    1164:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <SORTFLAG>
    1168:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <HOLDFLAG>
    116c:	98 17       	cp	r25, r24
    116e:	79 f0       	breq	.+30     	; 0x118e <__vector_9+0x5a>
		{
			if(CalcEnterTime())
    1170:	9e d8       	rcall	.-3780   	; 0x2ae <CalcEnterTime>
    1172:	88 23       	and	r24, r24
    1174:	41 f0       	breq	.+16     	; 0x1186 <__vector_9+0x52>
			{
				brakeMotor();
    1176:	86 d9       	rcall	.-3316   	; 0x484 <brakeMotor>
    1178:	80 e0       	ldi	r24, 0x00	; 0
				enterdropTime = BRAKE_DROP_TIME;
    117a:	94 e3       	ldi	r25, 0x34	; 52
    117c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1180:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1184:	0c c0       	rjmp	.+24     	; 0x119e <__vector_9+0x6a>
    1186:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <SORTFLAG>
			}else
			{
				SORTFLAG = 0;
				runMotor();
    118a:	dd d9       	rcall	.-3142   	; 0x546 <runMotor>
    118c:	08 c0       	rjmp	.+16     	; 0x119e <__vector_9+0x6a>
    118e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <SORTFLAG>
			}
		}else if(SORTFLAG && HOLDFLAG)
    1192:	88 23       	and	r24, r24
    1194:	21 f0       	breq	.+8      	; 0x119e <__vector_9+0x6a>
    1196:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <HOLDFLAG>
    119a:	81 11       	cpse	r24, r1
		{
			brakeMotor();
    119c:	73 d9       	rcall	.-3354   	; 0x484 <brakeMotor>
    119e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <DROPFLAG>
		}
		if(DROPFLAG)
    11a2:	88 23       	and	r24, r24
    11a4:	41 f1       	breq	.+80     	; 0x11f6 <__vector_9+0xc2>
    11a6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <dropTime>
		{
			if(dropTime<CurDelay)
    11aa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <dropTime+0x1>
    11ae:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    11b2:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    11b6:	28 17       	cp	r18, r24
    11b8:	39 07       	cpc	r19, r25
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <__vector_9+0x92>
    11bc:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <DROPFLAG>
			{
				DROPFLAG = 0;
    11c0:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <PAUSEFLAG>
				PAUSEFLAG = 0;
    11c4:	18 c0       	rjmp	.+48     	; 0x11f6 <__vector_9+0xc2>
    11c6:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <CurDelay>
				
			}else
			{
				dropTime -=CurDelay;	
    11ca:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <CurDelay+0x1>
    11ce:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dropTime>
    11d2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dropTime+0x1>
    11d6:	82 1b       	sub	r24, r18
    11d8:	93 0b       	sbc	r25, r19
    11da:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dropTime+0x1>
    11de:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dropTime>
    11e2:	0e 94 93 00 	call	0x126	; 0x126 <CalcExitTime>
				if(CalcExitTime())
    11e6:	88 23       	and	r24, r24
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <__vector_9+0xbe>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
				{

					PAUSEFLAG = 1;
    11ec:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <PAUSEFLAG>
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <__vector_9+0xc2>
    11f2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <PAUSEFLAG>
				}else
				{
					PAUSEFLAG = 0;
    11f6:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <CALCFLAG>
				}
			}	
		}	
	}
	CALCFLAG = 0;
    11fa:	ff 91       	pop	r31
	
}
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0b be       	out	0x3b, r0	; 59
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <step>:
extern volatile uint8_t Steps2Exit;
extern volatile char DROPFLAG;


uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Direction
    1220:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <CurState>
    1224:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1228:	89 0f       	add	r24, r25
    122a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <CurState>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
    122e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CurState>
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	1c f0       	brlt	.+6      	; 0x123c <step+0x1c>
    1236:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <CurState>
    123a:	07 c0       	rjmp	.+14     	; 0x124a <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
    123c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CurState>
    1240:	88 23       	and	r24, r24
    1242:	1c f4       	brge	.+6      	; 0x124a <step+0x2a>
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <CurState>
	
	PORTA = StepStates[CurState]; //Step
    124a:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <CurState>
    124e:	0e 2e       	mov	r0, r30
    1250:	00 0c       	add	r0, r0
    1252:	ff 0b       	sbc	r31, r31
    1254:	e3 5f       	subi	r30, 0xF3	; 243
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
    1258:	80 81       	ld	r24, Z
    125a:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition
    125c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    1260:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <Dir>
    1264:	89 0f       	add	r24, r25
    1266:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
	//protect against roll over
	if(CurPosition > 225 && Dir==1){CurPosition -=  200;}
    126a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    126e:	82 3e       	cpi	r24, 0xE2	; 226
    1270:	50 f0       	brcs	.+20     	; 0x1286 <step+0x66>
    1272:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	31 f4       	brne	.+12     	; 0x1286 <step+0x66>
    127a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    127e:	88 5c       	subi	r24, 0xC8	; 200
    1280:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <step+0x80>
	else if(CurPosition < 25 && Dir==-1){CurPosition += 200;}
    1286:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    128a:	89 31       	cpi	r24, 0x19	; 25
    128c:	48 f4       	brcc	.+18     	; 0x12a0 <step+0x80>
    128e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1292:	8f 3f       	cpi	r24, 0xFF	; 255
    1294:	29 f4       	brne	.+10     	; 0x12a0 <step+0x80>
    1296:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    129a:	88 53       	subi	r24, 0x38	; 56
    129c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
    12a0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    12a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	08 95       	ret

000012ac <stepUpdateError>:



uint8_t stepUpdateError(void)
{
	if(HOLDFLAG)
    12ac:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <HOLDFLAG>
    12b0:	88 23       	and	r24, r24
    12b2:	81 f1       	breq	.+96     	; 0x1314 <stepUpdateError+0x68>
	{
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
    12b4:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    12b8:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    12bc:	99 23       	and	r25, r25
    12be:	1c f4       	brge	.+6      	; 0x12c6 <stepUpdateError+0x1a>
    12c0:	91 95       	neg	r25
    12c2:	81 95       	neg	r24
    12c4:	91 09       	sbc	r25, r1
    12c6:	0f 97       	sbiw	r24, 0x0f	; 15
    12c8:	ac f4       	brge	.+42     	; 0x12f4 <stepUpdateError+0x48>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			HOLDFLAG = 0;
    12ca:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <HOLDFLAG>
			PAUSEFLAG = 0;
    12ce:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <PAUSEFLAG>
			runMotor();
    12d2:	39 d9       	rcall	.-3470   	; 0x546 <runMotor>
			CurError = Parts[countSort] - CurPosition;
    12d4:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <countSort>
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	e0 59       	subi	r30, 0x90	; 144
    12dc:	fd 4f       	sbci	r31, 0xFD	; 253
    12de:	80 81       	ld	r24, Z
    12e0:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	82 1b       	sub	r24, r18
    12e8:	91 09       	sbc	r25, r1
    12ea:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <CurError+0x1>
    12ee:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <CurError>
    12f2:	1f c0       	rjmp	.+62     	; 0x1332 <stepUpdateError+0x86>
		}else
		{
			CurError = Parts[countSort-1] - CurPosition;
    12f4:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <countSort>
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	e1 59       	subi	r30, 0x91	; 145
    12fc:	fd 4f       	sbci	r31, 0xFD	; 253
    12fe:	80 81       	ld	r24, Z
    1300:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	82 1b       	sub	r24, r18
    1308:	91 09       	sbc	r25, r1
    130a:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <CurError+0x1>
    130e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <CurError>
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <stepUpdateError+0x86>
			
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
    1314:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <countSort>
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	e0 59       	subi	r30, 0x90	; 144
    131c:	fd 4f       	sbci	r31, 0xFD	; 253
    131e:	80 81       	ld	r24, Z
    1320:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	82 1b       	sub	r24, r18
    1328:	91 09       	sbc	r25, r1
    132a:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <CurError+0x1>
    132e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <CurError>
	}
	
	
	if(CurError>100)
    1332:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    1336:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    133a:	85 36       	cpi	r24, 0x65	; 101
    133c:	91 05       	cpc	r25, r1
    133e:	5c f0       	brlt	.+22     	; 0x1356 <stepUpdateError+0xaa>
	{
		CurError = CurError - 200;
    1340:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    1344:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    1348:	88 5c       	subi	r24, 0xC8	; 200
    134a:	91 09       	sbc	r25, r1
    134c:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <CurError+0x1>
    1350:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <CurError>
    1354:	11 c0       	rjmp	.+34     	; 0x1378 <stepUpdateError+0xcc>
	}else if(CurError<-100)
    1356:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    135a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    135e:	8c 39       	cpi	r24, 0x9C	; 156
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	54 f4       	brge	.+20     	; 0x1378 <stepUpdateError+0xcc>
	{
		CurError = CurError + 200;
    1364:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    1368:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    136c:	88 53       	subi	r24, 0x38	; 56
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <CurError+0x1>
    1374:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <CurError>
	}
	
	if(abs(CurError) < Steps2Acc && !DROPFLAG)//change if slowing down to quickly at zone; may cause oscillation
    1378:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <CurError>
    137c:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <CurError+0x1>
    1380:	33 23       	and	r19, r19
    1382:	1c f4       	brge	.+6      	; 0x138a <stepUpdateError+0xde>
    1384:	31 95       	neg	r19
    1386:	21 95       	neg	r18
    1388:	31 09       	sbc	r19, r1
    138a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	28 17       	cp	r18, r24
    1392:	39 07       	cpc	r19, r25
    1394:	44 f4       	brge	.+16     	; 0x13a6 <stepUpdateError+0xfa>
    1396:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <DROPFLAG>
    139a:	81 11       	cpse	r24, r1
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <stepUpdateError+0xfa>
	{
		TARGETFLAG = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <TARGETFLAG>
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <stepUpdateError+0xfe>
	}else
	{
		TARGETFLAG = 0;
    13a6:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <TARGETFLAG>
	}
	return 1;
}
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret

000013ae <stepUpdateDir>:



uint8_t stepUpdateDir(void){
	//if(!DECELFLAG){
	if(CurError == 0)
    13ae:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    13b2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    13b6:	89 2b       	or	r24, r25
    13b8:	91 f4       	brne	.+36     	; 0x13de <stepUpdateDir+0x30>
	{// if stepper is at target
		if(CurDelay > (MAXDELAY-MINDELAY))
    13ba:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    13be:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	97 40       	sbci	r25, 0x07	; 7
    13c6:	30 f0       	brcs	.+12     	; 0x13d4 <stepUpdateDir+0x26>
		{// if stepper can stop
			Dir = 0; //stop stepping
    13c8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <Dir>
			TARGETFLAG = 0; //clear target flag
    13cc:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <TARGETFLAG>
			return 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	08 95       	ret
		}else
		{//Decelerate stepper
			DECELFLAG = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <DECELFLAG>
			return 0;
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	08 95       	ret
		}
	}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
    13de:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    13e2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    13e6:	99 23       	and	r25, r25
    13e8:	1c f4       	brge	.+6      	; 0x13f0 <stepUpdateDir+0x42>
    13ea:	91 95       	neg	r25
    13ec:	81 95       	neg	r24
    13ee:	91 09       	sbc	r25, r1
    13f0:	8b 35       	cpi	r24, 0x5B	; 91
    13f2:	91 05       	cpc	r25, r1
    13f4:	b4 f0       	brlt	.+44     	; 0x1422 <stepUpdateDir+0x74>
    13f6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    13fa:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    13fe:	81 15       	cp	r24, r1
    1400:	9a 40       	sbci	r25, 0x0A	; 10
    1402:	78 f4       	brcc	.+30     	; 0x1422 <stepUpdateDir+0x74>
	{//Next target is close in same direction and you are at speed don't change
		DECELFLAG = 0;
    1404:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <DECELFLAG>
		if(Dir != 0)
    1408:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    140c:	88 23       	and	r24, r24
    140e:	29 f0       	breq	.+10     	; 0x141a <stepUpdateDir+0x6c>
		{//Keep direction
			NextDir = Dir;
    1410:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1414:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <NextDir>
			return 0;
		}
	}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
	{//Next target is close in same direction and you are at speed don't change
		DECELFLAG = 0;
		if(Dir != 0)
    1418:	18 c0       	rjmp	.+48     	; 0x144a <stepUpdateDir+0x9c>
		{//Keep direction
			NextDir = Dir;
		}else
		{//edge case where Dir might be zero
			Dir = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
			return 1;
    1420:	08 95       	ret
		}
	}else
	{//Calculate closest direction
		NextDir = (CurError>0) - (CurError<0);
    1422:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <CurError>
    1426:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <CurError+0x1>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	12 16       	cp	r1, r18
    142e:	13 06       	cpc	r1, r19
    1430:	0c f0       	brlt	.+2      	; 0x1434 <stepUpdateDir+0x86>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <CurError>
    1438:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <CurError+0x1>
    143c:	93 2f       	mov	r25, r19
    143e:	99 1f       	adc	r25, r25
    1440:	99 27       	eor	r25, r25
    1442:	99 1f       	adc	r25, r25
    1444:	89 1b       	sub	r24, r25
    1446:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <NextDir>
	}

	if(NextDir == Dir)
    144a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <NextDir>
    144e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1452:	98 13       	cpse	r25, r24
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <stepUpdateDir+0xb4>
	{//next direction is the same
		Dir = NextDir;
    1456:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <NextDir>
    145a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
		return 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	08 95       	ret
	}else if(CurDelay >= MAXDELAY)
    1462:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    1466:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    146a:	81 15       	cp	r24, r1
    146c:	9a 40       	sbci	r25, 0x0A	; 10
    146e:	30 f0       	brcs	.+12     	; 0x147c <stepUpdateDir+0xce>
	{//stepper is can change direction
		Dir = NextDir;
    1470:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <NextDir>
    1474:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
		return 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	08 95       	ret
	}else
	{//Decelerate stepper to switch directions
		DECELFLAG = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <DECELFLAG>
		return 0;
    1482:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
    1484:	08 95       	ret

00001486 <stepRes>:
}



void stepRes(void){
	accSteps = 0;
    1486:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <accSteps>
	StepsDelta = 0;
    148a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <StepsDelta>
	CurDelay = MAXDELAY;
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	9a e0       	ldi	r25, 0x0A	; 10
    1492:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    1496:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
    149a:	08 95       	ret

0000149c <stepUpdateDelay>:


uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
    149c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    14a0:	81 11       	cpse	r24, r1
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
    14a4:	f0 df       	rcall	.-32     	; 0x1486 <stepRes>
    14a6:	7e c0       	rjmp	.+252    	; 0x15a4 <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
    14a8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <TARGETFLAG>
    14ac:	81 11       	cpse	r24, r1
    14ae:	08 c0       	rjmp	.+16     	; 0x14c0 <stepUpdateDelay+0x24>
    14b0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <DECELFLAG>
    14b4:	81 11       	cpse	r24, r1
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <stepUpdateDelay+0x24>
    14b8:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <PAUSEFLAG>
    14bc:	88 23       	and	r24, r24
    14be:	c9 f1       	breq	.+114    	; 0x1532 <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
    14c0:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <accSteps>
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	ec 52       	subi	r30, 0x2C	; 44
    14cc:	fd 4f       	sbci	r31, 0xFD	; 253
    14ce:	20 81       	ld	r18, Z
    14d0:	31 81       	ldd	r19, Z+1	; 0x01
    14d2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    14d6:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    14da:	82 0f       	add	r24, r18
    14dc:	93 1f       	adc	r25, r19
    14de:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    14e2:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
		if (CurDelay > MAXDELAY)
    14e6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    14ea:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	9a 40       	sbci	r25, 0x0A	; 10
    14f2:	a0 f0       	brcs	.+40     	; 0x151c <stepUpdateDelay+0x80>
		{
			accSteps = 0;
    14f4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <accSteps>
			if(PAUSEFLAG && (Steps2Exit<3))
    14f8:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <PAUSEFLAG>
    14fc:	88 23       	and	r24, r24
    14fe:	29 f0       	breq	.+10     	; 0x150a <stepUpdateDelay+0x6e>
    1500:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <Steps2Exit>
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	08 f4       	brcc	.+2      	; 0x150a <stepUpdateDelay+0x6e>
    1508:	4d c0       	rjmp	.+154    	; 0x15a4 <stepUpdateDelay+0x108>
			{
				
				
			}else
			{
				CurDelay = MAXDELAY;
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	9a e0       	ldi	r25, 0x0A	; 10
    150e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    1512:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
				DECELFLAG = 0;
    1516:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <DECELFLAG>
    151a:	44 c0       	rjmp	.+136    	; 0x15a4 <stepUpdateDelay+0x108>
			}
			}else if(accSteps>0){
    151c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <accSteps>
    1520:	88 23       	and	r24, r24
    1522:	09 f4       	brne	.+2      	; 0x1526 <stepUpdateDelay+0x8a>
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <stepUpdateDelay+0x108>
			accSteps--;
    1526:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <accSteps>
    152a:	81 50       	subi	r24, 0x01	; 1
    152c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <accSteps>
    1530:	39 c0       	rjmp	.+114    	; 0x15a4 <stepUpdateDelay+0x108>
		}
		
	}else if(CurDelay>MINDELAY)
    1532:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    1536:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	93 40       	sbci	r25, 0x03	; 3
    153e:	e0 f1       	brcs	.+120    	; 0x15b8 <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
    1540:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    1544:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    1548:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <accSteps>
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ec 52       	subi	r30, 0x2C	; 44
    1554:	fd 4f       	sbci	r31, 0xFD	; 253
    1556:	20 81       	ld	r18, Z
    1558:	31 81       	ldd	r19, Z+1	; 0x01
    155a:	82 1b       	sub	r24, r18
    155c:	93 0b       	sbc	r25, r19
    155e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    1562:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
    1566:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    156a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	93 40       	sbci	r25, 0x03	; 3
    1572:	38 f0       	brcs	.+14     	; 0x1582 <stepUpdateDelay+0xe6>
    1574:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    1578:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	9a 40       	sbci	r25, 0x0A	; 10
    1580:	30 f0       	brcs	.+12     	; 0x158e <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	93 e0       	ldi	r25, 0x03	; 3
    1586:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    158a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
		}
		if(accSteps<Steps2Acc)
    158e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <accSteps>
    1592:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
    1596:	98 17       	cp	r25, r24
    1598:	28 f4       	brcc	.+10     	; 0x15a4 <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
    159a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <accSteps>
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
    15a4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CurDelay>
    15a8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <CurDelay+0x1>
    15ac:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    15b0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
    15ba:	08 95       	ret

000015bc <stepTimer_init>:



void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
    15bc:	e1 e9       	ldi	r30, 0x91	; 145
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	88 60       	ori	r24, 0x08	; 8
    15c4:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    15ce:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
    15d2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    15d6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
    15da:	e1 e7       	ldi	r30, 0x71	; 113
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	80 83       	st	Z, r24
    15e4:	08 95       	ret

000015e6 <stepStart>:
	return;
} //stepTimer_init


void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
    15e6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    15ea:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3a e0       	ldi	r19, 0x0A	; 10
    15f2:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    15f6:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler
    15fa:	e1 e9       	ldi	r30, 0x91	; 145
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	83 60       	ori	r24, 0x03	; 3
    1602:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
    1604:	88 b3       	in	r24, 0x18	; 24
    1606:	82 60       	ori	r24, 0x02	; 2
    1608:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
    160a:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <CurDelay+0x1>
    160e:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <CurDelay>
    1612:	08 95       	ret

00001614 <stepStop>:
}//stepStart


void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
    1614:	e1 e9       	ldi	r30, 0x91	; 145
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8d 7f       	andi	r24, 0xFD	; 253
    161c:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	80 83       	st	Z, r24
    1624:	08 95       	ret

00001626 <stepCalcAcc>:

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
    1626:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <CurAcc+0x1>
    162a:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <CurAcc>

void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3a e0       	ldi	r19, 0x0A	; 10

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	24 c0       	rjmp	.+72     	; 0x1680 <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
    1638:	fc 01       	movw	r30, r24
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ec 52       	subi	r30, 0x2C	; 44
    1642:	fd 4f       	sbci	r31, 0xFD	; 253
    1644:	40 81       	ld	r20, Z
    1646:	51 81       	ldd	r21, Z+1	; 0x01
    1648:	24 1b       	sub	r18, r20
    164a:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
    164c:	40 81       	ld	r20, Z
    164e:	51 81       	ldd	r21, Z+1	; 0x01
    1650:	48 5d       	subi	r20, 0xD8	; 216
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	fc 01       	movw	r30, r24
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ec 52       	subi	r30, 0x2C	; 44
    165c:	fd 4f       	sbci	r31, 0xFD	; 253
    165e:	51 83       	std	Z+1, r21	; 0x01
    1660:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
    1662:	40 81       	ld	r20, Z
    1664:	51 81       	ldd	r21, Z+1	; 0x01
    1666:	41 3a       	cpi	r20, 0xA1	; 161
    1668:	51 05       	cpc	r21, r1
    166a:	48 f0       	brcs	.+18     	; 0x167e <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
    166c:	fc 01       	movw	r30, r24
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ec 52       	subi	r30, 0x2C	; 44
    1674:	fd 4f       	sbci	r31, 0xFD	; 253
    1676:	40 ea       	ldi	r20, 0xA0	; 160
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	51 83       	std	Z+1, r21	; 0x01
    167c:	40 83       	st	Z, r20
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	91 05       	cpc	r25, r1
    1684:	c8 f2       	brcs	.-78     	; 0x1638 <stepCalcAcc+0x12>
		if(CurAcc[steps]>MAXACC){
			CurAcc[steps] = MAXACC;
		}
	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
    1686:	fc 01       	movw	r30, r24
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	ec 52       	subi	r30, 0x2C	; 44
    168e:	fd 4f       	sbci	r31, 0xFD	; 253
    1690:	40 ea       	ldi	r20, 0xA0	; 160
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	51 83       	std	Z+1, r21	; 0x01
    1696:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
    1698:	1a c0       	rjmp	.+52     	; 0x16ce <stepCalcAcc+0xa8>
		delay -=CurAcc[steps-1];
    169a:	fc 01       	movw	r30, r24
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ec 52       	subi	r30, 0x2C	; 44
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	40 81       	ld	r20, Z
    16a8:	51 81       	ldd	r21, Z+1	; 0x01
    16aa:	24 1b       	sub	r18, r20
    16ac:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
    16ae:	21 15       	cp	r18, r1
    16b0:	43 e0       	ldi	r20, 0x03	; 3
    16b2:	34 07       	cpc	r19, r20
    16b4:	10 f4       	brcc	.+4      	; 0x16ba <stepCalcAcc+0x94>
			delay = MINDELAY;
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	33 e0       	ldi	r19, 0x03	; 3
		}
		steps++;
    16ba:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
    16bc:	fc 01       	movw	r30, r24
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	ec 52       	subi	r30, 0x2C	; 44
    16c4:	fd 4f       	sbci	r31, 0xFD	; 253
    16c6:	40 ea       	ldi	r20, 0xA0	; 160
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	51 83       	std	Z+1, r21	; 0x01
    16cc:	40 83       	st	Z, r20
			CurAcc[steps] = MAXACC;
		}
	}//Increase Acc
	
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
    16ce:	a9 01       	movw	r20, r18
    16d0:	40 5e       	subi	r20, 0xE0	; 224
    16d2:	51 40       	sbci	r21, 0x01	; 1
    16d4:	41 30       	cpi	r20, 0x01	; 1
    16d6:	53 40       	sbci	r21, 0x03	; 3
    16d8:	00 f7       	brcc	.-64     	; 0x169a <stepCalcAcc+0x74>
    16da:	2a c0       	rjmp	.+84     	; 0x1730 <stepCalcAcc+0x10a>
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
    16dc:	ac 01       	movw	r20, r24
    16de:	4f 5f       	subi	r20, 0xFF	; 255
    16e0:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
    16e2:	fc 01       	movw	r30, r24
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ec 52       	subi	r30, 0x2C	; 44
    16ea:	fd 4f       	sbci	r31, 0xFD	; 253
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	26 1b       	sub	r18, r22
    16f2:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	68 32       	cpi	r22, 0x28	; 40
    16fa:	71 05       	cpc	r23, r1
    16fc:	48 f4       	brcc	.+18     	; 0x1710 <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
    16fe:	fa 01       	movw	r30, r20
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ec 52       	subi	r30, 0x2C	; 44
    1706:	fd 4f       	sbci	r31, 0xFD	; 253
    1708:	11 82       	std	Z+1, r1	; 0x01
    170a:	10 82       	st	Z, r1
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
    170c:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	fc 01       	movw	r30, r24
    1716:	ec 52       	subi	r30, 0x2C	; 44
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	88 97       	sbiw	r24, 0x28	; 40
    1720:	fa 01       	movw	r30, r20
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ec 52       	subi	r30, 0x2C	; 44
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
		steps++;
    172e:	ca 01       	movw	r24, r20
		}
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acc
	
	while(delay >MINDELAY){
    1730:	21 30       	cpi	r18, 0x01	; 1
    1732:	43 e0       	ldi	r20, 0x03	; 3
    1734:	34 07       	cpc	r19, r20
    1736:	90 f6       	brcc	.-92     	; 0x16dc <stepCalcAcc+0xb6>
			
		}

	}//Decrease Acc
	
	Steps2Acc = steps;
    1738:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Steps2Acc>
    173c:	08 95       	ret

0000173e <stepCalibrate>:
	TCCR3B &=~_BV(CS30);
}//stepStop


int8_t stepCalibrate(void){
	stepCalcAcc();
    173e:	73 df       	rcall	.-282    	; 0x1626 <stepCalcAcc>
	
	CurDelay = MAXDELAY;
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	9a e0       	ldi	r25, 0x0A	; 10
    1744:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <CurDelay+0x1>
    1748:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <CurDelay>
	HALLSENSOR = 0;//reset HALLSENSOR
    174c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <HALLSENSOR>
	CurPosition = 0;//set CurPosition
    1750:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	Parts[0] = 50;//Set motor to spin 360
    1754:	82 e3       	ldi	r24, 0x32	; 50
    1756:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Parts>

	stepStart();//Start stepTimer
    175a:	45 df       	rcall	.-374    	; 0x15e6 <stepStart>
	while(CurError !=0)
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <stepCalibrate+0x26>
	{
		DECELFLAG = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <DECELFLAG>
	HALLSENSOR = 0;//reset HALLSENSOR
	CurPosition = 0;//set CurPosition
	Parts[0] = 50;//Set motor to spin 360

	stepStart();//Start stepTimer
	while(CurError !=0)
    1764:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    1768:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    176c:	89 2b       	or	r24, r25
    176e:	b9 f7       	brne	.-18     	; 0x175e <stepCalibrate+0x20>
	{
		DECELFLAG = 1;
	}
	HALLSENSOR = 0;
    1770:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <HALLSENSOR>
	CurPosition = 0;
    1774:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	while(!HALLSENSOR){
    1778:	11 c0       	rjmp	.+34     	; 0x179c <stepCalibrate+0x5e>
		if(abs(CurError)<30 && !HALLSENSOR){
    177a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CurError>
    177e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <CurError+0x1>
    1782:	99 23       	and	r25, r25
    1784:	1c f4       	brge	.+6      	; 0x178c <stepCalibrate+0x4e>
    1786:	91 95       	neg	r25
    1788:	81 95       	neg	r24
    178a:	91 09       	sbc	r25, r1
    178c:	4e 97       	sbiw	r24, 0x1e	; 30
    178e:	34 f4       	brge	.+12     	; 0x179c <stepCalibrate+0x5e>
    1790:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <HALLSENSOR>
    1794:	81 11       	cpse	r24, r1
    1796:	02 c0       	rjmp	.+4      	; 0x179c <stepCalibrate+0x5e>
			CurPosition = 0;
    1798:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	{
		DECELFLAG = 1;
	}
	HALLSENSOR = 0;
	CurPosition = 0;
	while(!HALLSENSOR){
    179c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <HALLSENSOR>
    17a0:	88 23       	and	r24, r24
    17a2:	59 f3       	breq	.-42     	; 0x177a <stepCalibrate+0x3c>
		if(abs(CurError)<30 && !HALLSENSOR){
			CurPosition = 0;
		}
	}//Wait for hall sensor to trigger
	Parts[0] = B_ID;
    17a4:	82 e3       	ldi	r24, 0x32	; 50
    17a6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Parts>

	return 1;
}
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	08 95       	ret

000017ae <__divmodhi4>:
    17ae:	97 fb       	bst	r25, 7
    17b0:	07 2e       	mov	r0, r23
    17b2:	16 f4       	brtc	.+4      	; 0x17b8 <__divmodhi4+0xa>
    17b4:	00 94       	com	r0
    17b6:	06 d0       	rcall	.+12     	; 0x17c4 <__divmodhi4_neg1>
    17b8:	77 fd       	sbrc	r23, 7
    17ba:	08 d0       	rcall	.+16     	; 0x17cc <__divmodhi4_neg2>
    17bc:	1a d0       	rcall	.+52     	; 0x17f2 <__udivmodhi4>
    17be:	07 fc       	sbrc	r0, 7
    17c0:	05 d0       	rcall	.+10     	; 0x17cc <__divmodhi4_neg2>
    17c2:	3e f4       	brtc	.+14     	; 0x17d2 <__divmodhi4_exit>

000017c4 <__divmodhi4_neg1>:
    17c4:	90 95       	com	r25
    17c6:	81 95       	neg	r24
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	08 95       	ret

000017cc <__divmodhi4_neg2>:
    17cc:	70 95       	com	r23
    17ce:	61 95       	neg	r22
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255

000017d2 <__divmodhi4_exit>:
    17d2:	08 95       	ret

000017d4 <__umulhisi3>:
    17d4:	a2 9f       	mul	r26, r18
    17d6:	b0 01       	movw	r22, r0
    17d8:	b3 9f       	mul	r27, r19
    17da:	c0 01       	movw	r24, r0
    17dc:	a3 9f       	mul	r26, r19
    17de:	70 0d       	add	r23, r0
    17e0:	81 1d       	adc	r24, r1
    17e2:	11 24       	eor	r1, r1
    17e4:	91 1d       	adc	r25, r1
    17e6:	b2 9f       	mul	r27, r18
    17e8:	70 0d       	add	r23, r0
    17ea:	81 1d       	adc	r24, r1
    17ec:	11 24       	eor	r1, r1
    17ee:	91 1d       	adc	r25, r1
    17f0:	08 95       	ret

000017f2 <__udivmodhi4>:
    17f2:	aa 1b       	sub	r26, r26
    17f4:	bb 1b       	sub	r27, r27
    17f6:	51 e1       	ldi	r21, 0x11	; 17
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <__udivmodhi4_ep>

000017fa <__udivmodhi4_loop>:
    17fa:	aa 1f       	adc	r26, r26
    17fc:	bb 1f       	adc	r27, r27
    17fe:	a6 17       	cp	r26, r22
    1800:	b7 07       	cpc	r27, r23
    1802:	10 f0       	brcs	.+4      	; 0x1808 <__udivmodhi4_ep>
    1804:	a6 1b       	sub	r26, r22
    1806:	b7 0b       	sbc	r27, r23

00001808 <__udivmodhi4_ep>:
    1808:	88 1f       	adc	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	5a 95       	dec	r21
    180e:	a9 f7       	brne	.-22     	; 0x17fa <__udivmodhi4_loop>
    1810:	80 95       	com	r24
    1812:	90 95       	com	r25
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	08 95       	ret

0000181a <_exit>:
    181a:	f8 94       	cli

0000181c <__stop_program>:
    181c:	ff cf       	rjmp	.-2      	; 0x181c <__stop_program>
