
RiskySortingMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00001a14  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800248  00800248  00001af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bce  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001197  00000000  00000000  00004926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001781  00000000  00000000  00005abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00007240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6f  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011cd  00000000  00000000  000082fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000094c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_1>
       8:	ec c6       	rjmp	.+3544   	; 0xde2 <__vector_2>
       a:	00 00       	nop
       c:	9f c7       	rjmp	.+3902   	; 0xf4c <__vector_3>
       e:	00 00       	nop
      10:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_4>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_9>
      28:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_10>
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_29>
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_32>
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	85 c3       	rjmp	.+1802   	; 0x7b4 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5d c2       	rjmp	.+1210   	; 0x578 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e1       	ldi	r30, 0x14	; 20
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 34       	cpi	r26, 0x48	; 72
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a8 e4       	ldi	r26, 0x48	; 72
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 34       	cpi	r26, 0x40	; 64
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	ad d5       	rcall	.+2906   	; 0xc7a <main>
     120:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <_exit>

00000124 <__bad_interrupt>:
     124:	5e c3       	rjmp	.+1724   	; 0x7e2 <__vector_default>

00000126 <CalcExitTime>:
	LCDWriteInt(TARGETFLAG,1);
	LCDWriteStringXY(0,1," ");
	LCDWriteString("D");
	LCDWriteInt(DECELFLAG,1);
	LCDWriteString(" S");
	LCDWriteInt(HOLDFLAG,1);
     126:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HOLDFLAG>
     12a:	81 11       	cpse	r24, r1
     12c:	b7 c0       	rjmp	.+366    	; 0x29c <CalcExitTime+0x176>
     12e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
     132:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	e9 58       	subi	r30, 0x89	; 137
     13a:	fd 4f       	sbci	r31, 0xFD	; 253
     13c:	20 81       	ld	r18, Z
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	82 1b       	sub	r24, r18
     142:	91 09       	sbc	r25, r1
     144:	9c 01       	movw	r18, r24
     146:	22 f4       	brpl	.+8      	; 0x150 <CalcExitTime+0x2a>
     148:	22 27       	eor	r18, r18
     14a:	33 27       	eor	r19, r19
     14c:	28 1b       	sub	r18, r24
     14e:	39 0b       	sbc	r19, r25
     150:	8e e0       	ldi	r24, 0x0E	; 14
     152:	82 1b       	sub	r24, r18
     154:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <Steps2Exit>
     158:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     15c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <accSteps>
     160:	89 1b       	sub	r24, r25
     162:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <Steps2MIN>
     166:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Dir>
     16a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CurError>
     16e:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <CurError+0x1>
     172:	42 03       	mulsu	r20, r18
     174:	c0 01       	movw	r24, r0
     176:	43 9f       	mul	r20, r19
     178:	90 0d       	add	r25, r0
     17a:	11 24       	eor	r1, r1
     17c:	18 16       	cp	r1, r24
     17e:	19 06       	cpc	r1, r25
     180:	44 f0       	brlt	.+16     	; 0x192 <CalcExitTime+0x6c>
     182:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     186:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     18a:	81 15       	cp	r24, r1
     18c:	9a 40       	sbci	r25, 0x0A	; 10
     18e:	08 f4       	brcc	.+2      	; 0x192 <CalcExitTime+0x6c>
     190:	41 c0       	rjmp	.+130    	; 0x214 <CalcExitTime+0xee>
     192:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <Steps2Exit>
     196:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     19a:	98 17       	cp	r25, r24
     19c:	a0 f4       	brcc	.+40     	; 0x1c6 <CalcExitTime+0xa0>
     19e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     1a2:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     1a6:	80 5f       	subi	r24, 0xF0	; 240
     1a8:	92 40       	sbci	r25, 0x02	; 2
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <Steps2Exit>
     1b2:	48 9f       	mul	r20, r24
     1b4:	90 01       	movw	r18, r0
     1b6:	49 9f       	mul	r20, r25
     1b8:	30 0d       	add	r19, r0
     1ba:	11 24       	eor	r1, r1
     1bc:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <exitTime+0x1>
     1c0:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <exitTime>
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <CalcExitTime+0x15c>
     1c6:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     1ca:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     1ce:	80 5f       	subi	r24, 0xF0	; 240
     1d0:	92 40       	sbci	r25, 0x02	; 2
     1d2:	96 95       	lsr	r25
     1d4:	87 95       	ror	r24
     1d6:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2MIN>
     1da:	48 9f       	mul	r20, r24
     1dc:	90 01       	movw	r18, r0
     1de:	49 9f       	mul	r20, r25
     1e0:	30 0d       	add	r19, r0
     1e2:	11 24       	eor	r1, r1
     1e4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <Steps2Exit>
     1e8:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	84 1b       	sub	r24, r20
     1f0:	91 09       	sbc	r25, r1
     1f2:	60 ef       	ldi	r22, 0xF0	; 240
     1f4:	72 e0       	ldi	r23, 0x02	; 2
     1f6:	86 9f       	mul	r24, r22
     1f8:	a0 01       	movw	r20, r0
     1fa:	87 9f       	mul	r24, r23
     1fc:	50 0d       	add	r21, r0
     1fe:	96 9f       	mul	r25, r22
     200:	50 0d       	add	r21, r0
     202:	11 24       	eor	r1, r1
     204:	ca 01       	movw	r24, r20
     206:	82 0f       	add	r24, r18
     208:	93 1f       	adc	r25, r19
     20a:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <exitTime+0x1>
     20e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <exitTime>
     212:	37 c0       	rjmp	.+110    	; 0x282 <CalcExitTime+0x15c>
     214:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     218:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	3a e0       	ldi	r19, 0x0A	; 10
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	36 95       	lsr	r19
     226:	27 95       	ror	r18
     228:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     22c:	42 9f       	mul	r20, r18
     22e:	c0 01       	movw	r24, r0
     230:	43 9f       	mul	r20, r19
     232:	90 0d       	add	r25, r0
     234:	11 24       	eor	r1, r1
     236:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <Steps2Acc>
     23a:	48 e8       	ldi	r20, 0x88	; 136
     23c:	53 e0       	ldi	r21, 0x03	; 3
     23e:	64 9f       	mul	r22, r20
     240:	90 01       	movw	r18, r0
     242:	65 9f       	mul	r22, r21
     244:	30 0d       	add	r19, r0
     246:	11 24       	eor	r1, r1
     248:	82 0f       	add	r24, r18
     24a:	93 1f       	adc	r25, r19
     24c:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <Steps2Exit>
     250:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     254:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <Steps2MIN>
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	43 1b       	sub	r20, r19
     25c:	51 09       	sbc	r21, r1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	24 1b       	sub	r18, r20
     262:	35 0b       	sbc	r19, r21
     264:	60 ef       	ldi	r22, 0xF0	; 240
     266:	72 e0       	ldi	r23, 0x02	; 2
     268:	26 9f       	mul	r18, r22
     26a:	a0 01       	movw	r20, r0
     26c:	27 9f       	mul	r18, r23
     26e:	50 0d       	add	r21, r0
     270:	36 9f       	mul	r19, r22
     272:	50 0d       	add	r21, r0
     274:	11 24       	eor	r1, r1
     276:	84 0f       	add	r24, r20
     278:	95 1f       	adc	r25, r21
     27a:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <exitTime+0x1>
     27e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <exitTime>
     282:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <exitTime>
     286:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <exitTime+0x1>
     28a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dropTime>
     28e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dropTime+0x1>
     292:	28 17       	cp	r18, r24
     294:	39 07       	cpc	r19, r25
     296:	20 f4       	brcc	.+8      	; 0x2a0 <CalcExitTime+0x17a>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	08 95       	ret
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	08 95       	ret
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 95       	ret

000002a4 <CalcEnterTime>:
     2a4:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
     2a8:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
     2ac:	99 23       	and	r25, r25
     2ae:	1c f4       	brge	.+6      	; 0x2b6 <CalcEnterTime+0x12>
     2b0:	91 95       	neg	r25
     2b2:	81 95       	neg	r24
     2b4:	91 09       	sbc	r25, r1
     2b6:	0e 97       	sbiw	r24, 0x0e	; 14
     2b8:	0c f4       	brge	.+2      	; 0x2bc <CalcEnterTime+0x18>
     2ba:	d5 c0       	rjmp	.+426    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     2bc:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
     2c0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
     2c4:	99 23       	and	r25, r25
     2c6:	1c f4       	brge	.+6      	; 0x2ce <CalcEnterTime+0x2a>
     2c8:	91 95       	neg	r25
     2ca:	81 95       	neg	r24
     2cc:	91 09       	sbc	r25, r1
     2ce:	8e 50       	subi	r24, 0x0E	; 14
     2d0:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Steps2Enter>
     2d4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
     2d8:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <accSteps>
     2dc:	89 1b       	sub	r24, r25
     2de:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <Steps2MIN>
     2e2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <Steps2Enter>
     2e6:	89 32       	cpi	r24, 0x29	; 41
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <CalcEnterTime+0x48>
     2ea:	bf c0       	rjmp	.+382    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     2ec:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <Dir>
     2f0:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CurError>
     2f4:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <CurError+0x1>
     2f8:	42 03       	mulsu	r20, r18
     2fa:	c0 01       	movw	r24, r0
     2fc:	43 9f       	mul	r20, r19
     2fe:	90 0d       	add	r25, r0
     300:	11 24       	eor	r1, r1
     302:	18 16       	cp	r1, r24
     304:	19 06       	cpc	r1, r25
     306:	44 f0       	brlt	.+16     	; 0x318 <CalcEnterTime+0x74>
     308:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     30c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     310:	81 15       	cp	r24, r1
     312:	9a 40       	sbci	r25, 0x0A	; 10
     314:	08 f4       	brcc	.+2      	; 0x318 <CalcEnterTime+0x74>
     316:	50 c0       	rjmp	.+160    	; 0x3b8 <CalcEnterTime+0x114>
     318:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <Steps2MIN>
     31c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <Steps2Enter>
     320:	89 17       	cp	r24, r25
     322:	a0 f4       	brcc	.+40     	; 0x34c <CalcEnterTime+0xa8>
     324:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     328:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     32c:	80 5f       	subi	r24, 0xF0	; 240
     32e:	92 40       	sbci	r25, 0x02	; 2
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2MIN>
     338:	48 9f       	mul	r20, r24
     33a:	90 01       	movw	r18, r0
     33c:	49 9f       	mul	r20, r25
     33e:	30 0d       	add	r19, r0
     340:	11 24       	eor	r1, r1
     342:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <enterTime+0x1>
     346:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <enterTime>
     34a:	80 c0       	rjmp	.+256    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     34c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <Steps2Enter>
     350:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <Steps2MIN>
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	82 1b       	sub	r24, r18
     358:	91 09       	sbc	r25, r1
     35a:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     35e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     362:	40 91 50 02 	lds	r20, 0x0250	; 0x800250 <enterTime>
     366:	50 91 51 02 	lds	r21, 0x0251	; 0x800251 <enterTime+0x1>
     36a:	20 ef       	ldi	r18, 0xF0	; 240
     36c:	32 e0       	ldi	r19, 0x02	; 2
     36e:	42 9f       	mul	r20, r18
     370:	c0 01       	movw	r24, r0
     372:	43 9f       	mul	r20, r19
     374:	90 0d       	add	r25, r0
     376:	52 9f       	mul	r21, r18
     378:	90 0d       	add	r25, r0
     37a:	11 24       	eor	r1, r1
     37c:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     380:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     384:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
     388:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
     38c:	80 5f       	subi	r24, 0xF0	; 240
     38e:	92 40       	sbci	r25, 0x02	; 2
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <Steps2MIN>
     398:	48 9f       	mul	r20, r24
     39a:	90 01       	movw	r18, r0
     39c:	49 9f       	mul	r20, r25
     39e:	30 0d       	add	r19, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <enterTime>
     3a6:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <enterTime+0x1>
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     3b2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     3b6:	4a c0       	rjmp	.+148    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3b8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <Steps2Enter>
     3bc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <Steps2MIN>
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	82 1b       	sub	r24, r18
     3c4:	91 09       	sbc	r25, r1
     3c6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     3ca:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     3ce:	40 91 50 02 	lds	r20, 0x0250	; 0x800250 <enterTime>
     3d2:	50 91 51 02 	lds	r21, 0x0251	; 0x800251 <enterTime+0x1>
     3d6:	20 ef       	ldi	r18, 0xF0	; 240
     3d8:	32 e0       	ldi	r19, 0x02	; 2
     3da:	42 9f       	mul	r20, r18
     3dc:	c0 01       	movw	r24, r0
     3de:	43 9f       	mul	r20, r19
     3e0:	90 0d       	add	r25, r0
     3e2:	52 9f       	mul	r21, r18
     3e4:	90 0d       	add	r25, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     3ec:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     3f0:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <CurDelay>
     3f4:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <CurDelay+0x1>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	9a e0       	ldi	r25, 0x0A	; 10
     3fc:	82 1b       	sub	r24, r18
     3fe:	93 0b       	sbc	r25, r19
     400:	96 95       	lsr	r25
     402:	87 95       	ror	r24
     404:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     408:	48 9f       	mul	r20, r24
     40a:	90 01       	movw	r18, r0
     40c:	49 9f       	mul	r20, r25
     40e:	30 0d       	add	r19, r0
     410:	11 24       	eor	r1, r1
     412:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <enterTime>
     416:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <enterTime+0x1>
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     422:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     426:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <Steps2Acc>
     42a:	88 e8       	ldi	r24, 0x88	; 136
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	48 9f       	mul	r20, r24
     430:	90 01       	movw	r18, r0
     432:	49 9f       	mul	r20, r25
     434:	30 0d       	add	r19, r0
     436:	11 24       	eor	r1, r1
     438:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <enterTime>
     43c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <enterTime+0x1>
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <enterTime+0x1>
     448:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <enterTime>
     44c:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <enterTime>
     450:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <enterTime+0x1>
     454:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     458:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	30 f4       	brcc	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	08 95       	ret
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	08 95       	ret
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	08 95       	ret
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	08 95       	ret

00000472 <brakeMotor>:
     472:	85 b1       	in	r24, 0x05	; 5
     474:	80 78       	andi	r24, 0x80	; 128
     476:	85 b9       	out	0x05, r24	; 5
     478:	85 b1       	in	r24, 0x05	; 5
     47a:	8f 60       	ori	r24, 0x0F	; 15
     47c:	85 b9       	out	0x05, r24	; 5
     47e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <MOTORFLAG>
     482:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     486:	08 95       	ret

00000488 <stopMotor>:
     488:	15 b8       	out	0x05, r1	; 5
     48a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <MOTORFLAG>
     48e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     492:	08 95       	ret

00000494 <Motor_init>:
     494:	84 b5       	in	r24, 0x24	; 36
     496:	83 68       	ori	r24, 0x83	; 131
     498:	84 bd       	out	0x24, r24	; 36
     49a:	85 b5       	in	r24, 0x25	; 37
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	85 bd       	out	0x25, r24	; 37
     4a0:	85 b3       	in	r24, 0x15	; 21
     4a2:	82 60       	ori	r24, 0x02	; 2
     4a4:	85 bb       	out	0x15, r24	; 21
     4a6:	17 bc       	out	0x27, r1	; 39
     4a8:	ef cf       	rjmp	.-34     	; 0x488 <stopMotor>
     4aa:	08 95       	ret

000004ac <motorTimerStart>:
     4ac:	e1 e2       	ldi	r30, 0x21	; 33
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	80 81       	ld	r24, Z
     4b2:	88 60       	ori	r24, 0x08	; 8
     4b4:	80 83       	st	Z, r24
     4b6:	80 ef       	ldi	r24, 0xF0	; 240
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     4be:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     4c2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     4c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     4ca:	a3 e7       	ldi	r26, 0x73	; 115
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	8c 91       	ld	r24, X
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	8c 93       	st	X, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	85 60       	ori	r24, 0x05	; 5
     4d8:	80 83       	st	Z, r24
     4da:	8a b3       	in	r24, 0x1a	; 26
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	8a bb       	out	0x1a, r24	; 26
     4e0:	86 e9       	ldi	r24, 0x96	; 150
     4e2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     4e6:	08 95       	ret

000004e8 <startMotor>:
     4e8:	85 b1       	in	r24, 0x05	; 5
     4ea:	80 78       	andi	r24, 0x80	; 128
     4ec:	85 b9       	out	0x05, r24	; 5
     4ee:	85 b1       	in	r24, 0x05	; 5
     4f0:	8b 60       	ori	r24, 0x0B	; 11
     4f2:	85 b9       	out	0x05, r24	; 5
     4f4:	16 bc       	out	0x26, r1	; 38
     4f6:	86 e9       	ldi	r24, 0x96	; 150
     4f8:	87 bd       	out	0x27, r24	; 39
     4fa:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     4fe:	81 11       	cpse	r24, r1
     500:	12 c0       	rjmp	.+36     	; 0x526 <startMotor+0x3e>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <MOTORFLAG>
     508:	d1 df       	rcall	.-94     	; 0x4ac <motorTimerStart>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	94 e2       	ldi	r25, 0x24	; 36
     50e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     512:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     516:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     51a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     51e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <motorTime_d+0x1>
     522:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <motorTime_d>
     526:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     52a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     52e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     532:	08 95       	ret

00000534 <runMotor>:
     534:	85 b1       	in	r24, 0x05	; 5
     536:	80 78       	andi	r24, 0x80	; 128
     538:	85 b9       	out	0x05, r24	; 5
     53a:	85 b1       	in	r24, 0x05	; 5
     53c:	8b 60       	ori	r24, 0x0B	; 11
     53e:	85 b9       	out	0x05, r24	; 5
     540:	16 bc       	out	0x26, r1	; 38
     542:	86 e9       	ldi	r24, 0x96	; 150
     544:	87 bd       	out	0x27, r24	; 39
     546:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     54a:	81 11       	cpse	r24, r1
     54c:	0c c0       	rjmp	.+24     	; 0x566 <runMotor+0x32>
     54e:	ae df       	rcall	.-164    	; 0x4ac <motorTimerStart>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <MOTORFLAG>
     556:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     55a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     55e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <motorTime_d+0x1>
     562:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <motorTime_d>
     566:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <MOTORFLAG>
     56a:	08 95       	ret

0000056c <motorTimerStop>:
     56c:	e1 e2       	ldi	r30, 0x21	; 33
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	8a 7f       	andi	r24, 0xFA	; 250
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <__vector_47>:
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	0b b6       	in	r0, 0x3b	; 59
     584:	0f 92       	push	r0
     586:	2f 93       	push	r18
     588:	3f 93       	push	r19
     58a:	4f 93       	push	r20
     58c:	5f 93       	push	r21
     58e:	6f 93       	push	r22
     590:	7f 93       	push	r23
     592:	8f 93       	push	r24
     594:	9f 93       	push	r25
     596:	af 93       	push	r26
     598:	bf 93       	push	r27
     59a:	ef 93       	push	r30
     59c:	ff 93       	push	r31
     59e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5a2:	82 50       	subi	r24, 0x02	; 2
     5a4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
     5b0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
     5b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5b8:	84 36       	cpi	r24, 0x64	; 100
     5ba:	30 f4       	brcc	.+12     	; 0x5c8 <__vector_47+0x50>
     5bc:	84 e6       	ldi	r24, 0x64	; 100
     5be:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <motorDecSpeed>
     5c2:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <MOTORFLAG>
     5c6:	d2 df       	rcall	.-92     	; 0x56c <motorTimerStop>
     5c8:	16 bc       	out	0x26, r1	; 38
     5ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <motorDecSpeed>
     5ce:	87 bd       	out	0x27, r24	; 39
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <ADC_Init>:
     5f6:	ec e7       	ldi	r30, 0x7C	; 124
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	80 83       	st	Z, r24
     600:	80 81       	ld	r24, Z
     602:	81 60       	ori	r24, 0x01	; 1
     604:	80 83       	st	Z, r24
     606:	ea e7       	ldi	r30, 0x7A	; 122
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	80 68       	ori	r24, 0x80	; 128
     60e:	80 83       	st	Z, r24
     610:	80 81       	ld	r24, Z
     612:	88 60       	ori	r24, 0x08	; 8
     614:	80 83       	st	Z, r24
     616:	80 81       	ld	r24, Z
     618:	83 60       	ori	r24, 0x03	; 3
     61a:	80 83       	st	Z, r24
     61c:	08 95       	ret

0000061e <classify>:
     61e:	80 3c       	cpi	r24, 0xC0	; 192
     620:	23 e0       	ldi	r18, 0x03	; 3
     622:	92 07       	cpc	r25, r18
     624:	48 f4       	brcc	.+18     	; 0x638 <classify+0x1a>
     626:	80 32       	cpi	r24, 0x20	; 32
     628:	23 e0       	ldi	r18, 0x03	; 3
     62a:	92 07       	cpc	r25, r18
     62c:	38 f4       	brcc	.+14     	; 0x63c <classify+0x1e>
     62e:	8c 32       	cpi	r24, 0x2C	; 44
     630:	91 40       	sbci	r25, 0x01	; 1
     632:	30 f0       	brcs	.+12     	; 0x640 <classify+0x22>
     634:	88 ec       	ldi	r24, 0xC8	; 200
     636:	08 95       	ret
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	08 95       	ret
     63c:	86 e9       	ldi	r24, 0x96	; 150
     63e:	08 95       	ret
     640:	84 e6       	ldi	r24, 0x64	; 100
     642:	08 95       	ret

00000644 <debounce>:
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	08 2e       	mov	r0, r24
     64a:	02 c0       	rjmp	.+4      	; 0x650 <debounce+0xc>
     64c:	22 0f       	add	r18, r18
     64e:	33 1f       	adc	r19, r19
     650:	0a 94       	dec	r0
     652:	e2 f7       	brpl	.-8      	; 0x64c <debounce+0x8>
     654:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__data_end>
     658:	01 c0       	rjmp	.+2      	; 0x65c <debounce+0x18>
     65a:	66 0f       	add	r22, r22
     65c:	8a 95       	dec	r24
     65e:	ea f7       	brpl	.-6      	; 0x65a <debounce+0x16>
     660:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <countCheck+0x1>
     664:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck>
     668:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <countCheck+0x1>
     66c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck>
     670:	0f c0       	rjmp	.+30     	; 0x690 <debounce+0x4c>
     672:	99 b1       	in	r25, 0x09	; 9
     674:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     678:	89 23       	and	r24, r25
     67a:	68 13       	cpse	r22, r24
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <debounce+0x5e>
     67e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <countCheck>
     682:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <countCheck+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <countCheck+0x1>
     68c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <countCheck>
     690:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <countCheck>
     694:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <countCheck+0x1>
     698:	84 17       	cp	r24, r20
     69a:	95 07       	cpc	r25, r21
     69c:	50 f3       	brcs	.-44     	; 0x672 <debounce+0x2e>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	08 95       	ret
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret

000006a6 <debouncePINJ>:
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	08 2e       	mov	r0, r24
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <debouncePINJ+0xc>
     6ae:	22 0f       	add	r18, r18
     6b0:	33 1f       	adc	r19, r19
     6b2:	0a 94       	dec	r0
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <debouncePINJ+0x8>
     6b6:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__data_end>
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <debouncePINJ+0x18>
     6bc:	66 0f       	add	r22, r22
     6be:	8a 95       	dec	r24
     6c0:	ea f7       	brpl	.-6      	; 0x6bc <debouncePINJ+0x16>
     6c2:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <countCheck+0x1>
     6c6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck>
     6ca:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <countCheck+0x1>
     6ce:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <countCheck>
     6d2:	10 c0       	rjmp	.+32     	; 0x6f4 <debouncePINJ+0x4e>
     6d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     6d8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     6dc:	89 23       	and	r24, r25
     6de:	68 13       	cpse	r22, r24
     6e0:	12 c0       	rjmp	.+36     	; 0x706 <debouncePINJ+0x60>
     6e2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <countCheck>
     6e6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <countCheck+0x1>
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <countCheck+0x1>
     6f0:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <countCheck>
     6f4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <countCheck>
     6f8:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <countCheck+0x1>
     6fc:	84 17       	cp	r24, r20
     6fe:	95 07       	cpc	r25, r21
     700:	48 f3       	brcs	.-46     	; 0x6d4 <debouncePINJ+0x2e>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	08 95       	ret
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	08 95       	ret

0000070a <updateCount>:
     70a:	88 3c       	cpi	r24, 0xC8	; 200
     70c:	31 f4       	brne	.+12     	; 0x71a <updateCount+0x10>
     70e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countS>
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <countS>
     718:	15 c0       	rjmp	.+42     	; 0x744 <updateCount+0x3a>
     71a:	86 39       	cpi	r24, 0x96	; 150
     71c:	31 f4       	brne	.+12     	; 0x72a <updateCount+0x20>
     71e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countW>
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <countW>
     728:	0d c0       	rjmp	.+26     	; 0x744 <updateCount+0x3a>
     72a:	84 36       	cpi	r24, 0x64	; 100
     72c:	31 f4       	brne	.+12     	; 0x73a <updateCount+0x30>
     72e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countA>
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <countA>
     738:	05 c0       	rjmp	.+10     	; 0x744 <updateCount+0x3a>
     73a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <countB>
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <countB>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	08 95       	ret

00000748 <mTimer_init>:
     748:	e1 e8       	ldi	r30, 0x81	; 129
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	82 60       	ori	r24, 0x02	; 2
     750:	80 83       	st	Z, r24
     752:	80 81       	ld	r24, Z
     754:	88 60       	ori	r24, 0x08	; 8
     756:	80 83       	st	Z, r24
     758:	88 ee       	ldi	r24, 0xE8	; 232
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     760:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     764:	08 95       	ret

00000766 <runTimerStart>:
     766:	e1 ea       	ldi	r30, 0xA1	; 161
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	88 60       	ori	r24, 0x08	; 8
     76e:	80 83       	st	Z, r24
     770:	87 e0       	ldi	r24, 0x07	; 7
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     778:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     77c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     780:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
     784:	a2 e7       	ldi	r26, 0x72	; 114
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	8c 91       	ld	r24, X
     78a:	82 60       	ori	r24, 0x02	; 2
     78c:	8c 93       	st	X, r24
     78e:	80 81       	ld	r24, Z
     790:	85 60       	ori	r24, 0x05	; 5
     792:	80 83       	st	Z, r24
     794:	89 b3       	in	r24, 0x19	; 25
     796:	82 60       	ori	r24, 0x02	; 2
     798:	89 bb       	out	0x19, r24	; 25
     79a:	08 95       	ret

0000079c <runTimerStop>:
     79c:	e1 ea       	ldi	r30, 0xA1	; 161
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	8a 7f       	andi	r24, 0xFA	; 250
     7a4:	80 83       	st	Z, r24
     7a6:	08 95       	ret

000007a8 <runTimerResume>:
     7a8:	e1 ea       	ldi	r30, 0xA1	; 161
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	85 60       	ori	r24, 0x05	; 5
     7b0:	80 83       	st	Z, r24
     7b2:	08 95       	ret

000007b4 <__vector_42>:
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     7c6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <runTime_d+0x1>
     7d0:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <runTime_d>
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_default>:
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	8f 93       	push	r24
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	88 b9       	out	0x08, r24	; 8
     7f2:	8f 91       	pop	r24
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <dispComplete>:
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	4f d1       	rcall	.+670    	; 0xaa2 <LCDByte>
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	4c d1       	rcall	.+664    	; 0xaa2 <LCDByte>
     80a:	85 e1       	ldi	r24, 0x15	; 21
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	c1 d1       	rcall	.+898    	; 0xb92 <LCDWriteString>
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	2a d2       	rcall	.+1108   	; 0xc6a <LCDGotoXY>
     816:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <countB>
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	c5 d1       	rcall	.+906    	; 0xbac <LCDWriteInt>
     822:	83 e2       	ldi	r24, 0x23	; 35
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	b5 d1       	rcall	.+874    	; 0xb92 <LCDWriteString>
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	1e d2       	rcall	.+1084   	; 0xc6a <LCDGotoXY>
     82e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countA>
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	b9 d1       	rcall	.+882    	; 0xbac <LCDWriteInt>
     83a:	83 e2       	ldi	r24, 0x23	; 35
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	a9 d1       	rcall	.+850    	; 0xb92 <LCDWriteString>
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	12 d2       	rcall	.+1060   	; 0xc6a <LCDGotoXY>
     846:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countW>
     84a:	62 e0       	ldi	r22, 0x02	; 2
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	ad d1       	rcall	.+858    	; 0xbac <LCDWriteInt>
     852:	83 e2       	ldi	r24, 0x23	; 35
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	9d d1       	rcall	.+826    	; 0xb92 <LCDWriteString>
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	06 d2       	rcall	.+1036   	; 0xc6a <LCDGotoXY>
     85e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countS>
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a1 d1       	rcall	.+834    	; 0xbac <LCDWriteInt>
     86a:	83 e2       	ldi	r24, 0x23	; 35
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	91 d1       	rcall	.+802    	; 0xb92 <LCDWriteString>
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	fa d1       	rcall	.+1012   	; 0xc6a <LCDGotoXY>
     876:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countSort>
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	95 c1       	rjmp	.+810    	; 0xbac <LCDWriteInt>
     882:	08 95       	ret

00000884 <dispStatus>:
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0c d1       	rcall	.+536    	; 0xaa2 <LCDByte>
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	ed d1       	rcall	.+986    	; 0xc6a <LCDGotoXY>
     890:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countSort>
     894:	62 e0       	ldi	r22, 0x02	; 2
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	88 d1       	rcall	.+784    	; 0xbac <LCDWriteInt>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	e4 d1       	rcall	.+968    	; 0xc6a <LCDGotoXY>
     8a2:	85 e2       	ldi	r24, 0x25	; 37
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	75 d1       	rcall	.+746    	; 0xb92 <LCDWriteString>
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	de d1       	rcall	.+956    	; 0xc6a <LCDGotoXY>
     8ae:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <countPart>
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	79 d1       	rcall	.+754    	; 0xbac <LCDWriteInt>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	d5 d1       	rcall	.+938    	; 0xc6a <LCDGotoXY>
     8c0:	87 e2       	ldi	r24, 0x27	; 39
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	66 d1       	rcall	.+716    	; 0xb92 <LCDWriteString>
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	cf d1       	rcall	.+926    	; 0xc6a <LCDGotoXY>
     8cc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <countB>
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	6a d1       	rcall	.+724    	; 0xbac <LCDWriteInt>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	c6 d1       	rcall	.+908    	; 0xc6a <LCDGotoXY>
     8de:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countA>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	61 d1       	rcall	.+706    	; 0xbac <LCDWriteInt>
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	bd d1       	rcall	.+890    	; 0xc6a <LCDGotoXY>
     8f0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countW>
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	58 d1       	rcall	.+688    	; 0xbac <LCDWriteInt>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	89 e0       	ldi	r24, 0x09	; 9
     900:	b4 d1       	rcall	.+872    	; 0xc6a <LCDGotoXY>
     902:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countS>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	4f d1       	rcall	.+670    	; 0xbac <LCDWriteInt>
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	ab d1       	rcall	.+854    	; 0xc6a <LCDGotoXY>
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	3c d1       	rcall	.+632    	; 0xb92 <LCDWriteString>
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	8c e0       	ldi	r24, 0x0C	; 12
     91e:	a5 d1       	rcall	.+842    	; 0xc6a <LCDGotoXY>
     920:	83 e3       	ldi	r24, 0x33	; 51
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	36 d1       	rcall	.+620    	; 0xb92 <LCDWriteString>
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	8d e0       	ldi	r24, 0x0D	; 13
     92a:	9f d1       	rcall	.+830    	; 0xc6a <LCDGotoXY>
     92c:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <runTime_d>
     930:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <runTime_d+0x1>
     934:	36 95       	lsr	r19
     936:	27 95       	ror	r18
     938:	36 95       	lsr	r19
     93a:	27 95       	ror	r18
     93c:	ab e7       	ldi	r26, 0x7B	; 123
     93e:	b4 e1       	ldi	r27, 0x14	; 20
     940:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__umulhisi3>
     944:	63 e0       	ldi	r22, 0x03	; 3
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	2f d1       	rcall	.+606    	; 0xbac <LCDWriteInt>
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	8b d1       	rcall	.+790    	; 0xc6a <LCDGotoXY>
     954:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
     958:	63 e0       	ldi	r22, 0x03	; 3
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	26 d1       	rcall	.+588    	; 0xbac <LCDWriteInt>
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	82 d1       	rcall	.+772    	; 0xc6a <LCDGotoXY>
     966:	8b e2       	ldi	r24, 0x2B	; 43
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	13 d1       	rcall	.+550    	; 0xb92 <LCDWriteString>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	7c d1       	rcall	.+760    	; 0xc6a <LCDGotoXY>
     972:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e8 58       	subi	r30, 0x88	; 136
     97a:	fd 4f       	sbci	r31, 0xFD	; 253
     97c:	80 81       	ld	r24, Z
     97e:	63 e0       	ldi	r22, 0x03	; 3
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	13 d1       	rcall	.+550    	; 0xbac <LCDWriteInt>
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	8c e0       	ldi	r24, 0x0C	; 12
     98a:	6f d1       	rcall	.+734    	; 0xc6a <LCDGotoXY>
     98c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <adcDisp>
     990:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <adcDisp+0x1>
     994:	64 e0       	ldi	r22, 0x04	; 4
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	09 c1       	rjmp	.+530    	; 0xbac <LCDWriteInt>
     99a:	08 95       	ret

0000099c <dispPause>:
}


void dispPause(void)
{
	LCDClear();
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 d0       	rcall	.+256    	; 0xaa2 <LCDByte>
	LCDWriteString("B  A  W  S  O");
     9a2:	8a e3       	ldi	r24, 0x3A	; 58
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	f5 d0       	rcall	.+490    	; 0xb92 <LCDWriteString>
	LCDWriteIntXY(0,1, countB, 2);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	5e d1       	rcall	.+700    	; 0xc6a <LCDGotoXY>
     9ae:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <countB>
     9b2:	62 e0       	ldi	r22, 0x02	; 2
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	f9 d0       	rcall	.+498    	; 0xbac <LCDWriteInt>
	LCDWriteString(" ");
     9ba:	83 e2       	ldi	r24, 0x23	; 35
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	e9 d0       	rcall	.+466    	; 0xb92 <LCDWriteString>
	LCDWriteIntXY(0,1, countA, 2);
     9c0:	61 e0       	ldi	r22, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	52 d1       	rcall	.+676    	; 0xc6a <LCDGotoXY>
     9c6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <countA>
     9ca:	62 e0       	ldi	r22, 0x02	; 2
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	ed d0       	rcall	.+474    	; 0xbac <LCDWriteInt>
	LCDWriteString(" ");
     9d2:	83 e2       	ldi	r24, 0x23	; 35
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	dd d0       	rcall	.+442    	; 0xb92 <LCDWriteString>
     9d8:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(0,1, countW, 2);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	46 d1       	rcall	.+652    	; 0xc6a <LCDGotoXY>
     9de:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <countW>
     9e2:	62 e0       	ldi	r22, 0x02	; 2
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	e1 d0       	rcall	.+450    	; 0xbac <LCDWriteInt>
	LCDWriteString(" ");
     9ea:	83 e2       	ldi	r24, 0x23	; 35
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	d1 d0       	rcall	.+418    	; 0xb92 <LCDWriteString>
	LCDWriteIntXY(0,1, countS, 2);
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	3a d1       	rcall	.+628    	; 0xc6a <LCDGotoXY>
     9f6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <countS>
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	d5 d0       	rcall	.+426    	; 0xbac <LCDWriteInt>
	LCDWriteString(" ");
     a02:	83 e2       	ldi	r24, 0x23	; 35
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	c5 d0       	rcall	.+394    	; 0xb92 <LCDWriteString>
	LCDWriteIntXY(0,1, countPart - countSort, 2);	
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	2e d1       	rcall	.+604    	; 0xc6a <LCDGotoXY>
     a0e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <countPart>
     a12:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <countSort>
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	82 1b       	sub	r24, r18
     a1e:	91 09       	sbc	r25, r1
     a20:	c5 c0       	rjmp	.+394    	; 0xbac <LCDWriteInt>
     a22:	08 95       	ret

00000a24 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     a24:	87 b1       	in	r24, 0x07	; 7
     a26:	80 7f       	andi	r24, 0xF0	; 240
     a28:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     a2a:	88 b1       	in	r24, 0x08	; 8
     a2c:	80 62       	ori	r24, 0x20	; 32
     a2e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     a30:	88 b1       	in	r24, 0x08	; 8
     a32:	8f 7b       	andi	r24, 0xBF	; 191
     a34:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	8a 95       	dec	r24
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCDBusyLoop+0x14>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     a3e:	88 b1       	in	r24, 0x08	; 8
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	88 b9       	out	0x08, r24	; 8
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	9a 95       	dec	r25
     a48:	f1 f7       	brne	.-4      	; 0xa46 <LCDBusyLoop+0x22>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     a4c:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     a4e:	82 95       	swap	r24
     a50:	80 7f       	andi	r24, 0xF0	; 240
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	9a 95       	dec	r25
     a56:	f1 f7       	brne	.-4      	; 0xa54 <LCDBusyLoop+0x30>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     a5a:	98 b1       	in	r25, 0x08	; 8
     a5c:	9f 77       	andi	r25, 0x7F	; 127
     a5e:	98 b9       	out	0x08, r25	; 8
     a60:	95 e0       	ldi	r25, 0x05	; 5
     a62:	9a 95       	dec	r25
     a64:	f1 f7       	brne	.-4      	; 0xa62 <LCDBusyLoop+0x3e>
     a66:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     a68:	98 b1       	in	r25, 0x08	; 8
     a6a:	90 68       	ori	r25, 0x80	; 128
     a6c:	98 b9       	out	0x08, r25	; 8
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	9a 95       	dec	r25
     a72:	f1 f7       	brne	.-4      	; 0xa70 <LCDBusyLoop+0x4c>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     a76:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     a78:	80 78       	andi	r24, 0x80	; 128
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	9a 95       	dec	r25
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <LCDBusyLoop+0x58>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     a82:	98 b1       	in	r25, 0x08	; 8
     a84:	9f 77       	andi	r25, 0x7F	; 127
     a86:	98 b9       	out	0x08, r25	; 8
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	9a 95       	dec	r25
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <LCDBusyLoop+0x66>
     a8e:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     a90:	81 11       	cpse	r24, r1
     a92:	d5 cf       	rjmp	.-86     	; 0xa3e <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     a94:	88 b1       	in	r24, 0x08	; 8
     a96:	8f 7d       	andi	r24, 0xDF	; 223
     a98:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     a9a:	87 b1       	in	r24, 0x07	; 7
     a9c:	8f 60       	ori	r24, 0x0F	; 15
     a9e:	87 b9       	out	0x07, r24	; 7
     aa0:	08 95       	ret

00000aa2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     aa2:	28 2f       	mov	r18, r24
     aa4:	22 95       	swap	r18
     aa6:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     aa8:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     aaa:	61 11       	cpse	r22, r1
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <LCDByte+0x14>
	CLEAR_RS();
     aae:	98 b1       	in	r25, 0x08	; 8
     ab0:	9f 7b       	andi	r25, 0xBF	; 191
     ab2:	98 b9       	out	0x08, r25	; 8
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <LCDByte+0x1a>
else
	SET_RS();
     ab6:	98 b1       	in	r25, 0x08	; 8
     ab8:	90 64       	ori	r25, 0x40	; 64
     aba:	98 b9       	out	0x08, r25	; 8
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	9a 95       	dec	r25
     ac0:	f1 f7       	brne	.-4      	; 0xabe <LCDByte+0x1c>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     ac4:	98 b1       	in	r25, 0x08	; 8
     ac6:	90 68       	ori	r25, 0x80	; 128
     ac8:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     aca:	98 b1       	in	r25, 0x08	; 8
     acc:	90 7f       	andi	r25, 0xF0	; 240
     ace:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     ad0:	98 b9       	out	0x08, r25	; 8
     ad2:	95 e0       	ldi	r25, 0x05	; 5
     ad4:	9a 95       	dec	r25
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCDByte+0x32>
     ad8:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     ada:	98 b1       	in	r25, 0x08	; 8
     adc:	9f 77       	andi	r25, 0x7F	; 127
     ade:	98 b9       	out	0x08, r25	; 8
     ae0:	95 e0       	ldi	r25, 0x05	; 5
     ae2:	9a 95       	dec	r25
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <LCDByte+0x40>
     ae6:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     ae8:	98 b1       	in	r25, 0x08	; 8
     aea:	90 68       	ori	r25, 0x80	; 128
     aec:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     aee:	98 b1       	in	r25, 0x08	; 8
     af0:	90 7f       	andi	r25, 0xF0	; 240
     af2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     af4:	88 b9       	out	0x08, r24	; 8
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	8a 95       	dec	r24
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <LCDByte+0x56>
     afc:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     afe:	88 b1       	in	r24, 0x08	; 8
     b00:	8f 77       	andi	r24, 0x7F	; 127
     b02:	88 b9       	out	0x08, r24	; 8
     b04:	95 e0       	ldi	r25, 0x05	; 5
     b06:	9a 95       	dec	r25
     b08:	f1 f7       	brne	.-4      	; 0xb06 <LCDByte+0x64>
     b0a:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     b0c:	8b cf       	rjmp	.-234    	; 0xa24 <LCDBusyLoop>
     b0e:	08 95       	ret

00000b10 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     b10:	cf 93       	push	r28
     b12:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	86 e7       	ldi	r24, 0x76	; 118
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	21 50       	subi	r18, 0x01	; 1
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	90 40       	sbci	r25, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <InitLCD+0xa>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <InitLCD+0x14>
     b24:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     b26:	87 b1       	in	r24, 0x07	; 7
     b28:	8f 60       	ori	r24, 0x0F	; 15
     b2a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     b2c:	87 b1       	in	r24, 0x07	; 7
     b2e:	80 68       	ori	r24, 0x80	; 128
     b30:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     b32:	87 b1       	in	r24, 0x07	; 7
     b34:	80 64       	ori	r24, 0x40	; 64
     b36:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     b38:	87 b1       	in	r24, 0x07	; 7
     b3a:	80 62       	ori	r24, 0x20	; 32
     b3c:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     b3e:	88 b1       	in	r24, 0x08	; 8
     b40:	80 7f       	andi	r24, 0xF0	; 240
     b42:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     b44:	88 b1       	in	r24, 0x08	; 8
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     b4a:	88 b1       	in	r24, 0x08	; 8
     b4c:	8f 7d       	andi	r24, 0xDF	; 223
     b4e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     b50:	88 b1       	in	r24, 0x08	; 8
     b52:	8f 7b       	andi	r24, 0xBF	; 191
     b54:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <InitLCD+0x48>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <InitLCD+0x4a>
     b5a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     b5c:	88 b1       	in	r24, 0x08	; 8
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     b62:	88 b1       	in	r24, 0x08	; 8
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	88 b9       	out	0x08, r24	; 8
     b68:	25 e0       	ldi	r18, 0x05	; 5
     b6a:	2a 95       	dec	r18
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <InitLCD+0x5a>
     b6e:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     b70:	88 b1       	in	r24, 0x08	; 8
     b72:	8f 77       	andi	r24, 0x7F	; 127
     b74:	88 b9       	out	0x08, r24	; 8
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	8a 95       	dec	r24
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <InitLCD+0x68>
     b7c:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     b7e:	52 df       	rcall	.-348    	; 0xa24 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	8c 2f       	mov	r24, r28
     b84:	8c 60       	ori	r24, 0x0C	; 12
     b86:	8d df       	rcall	.-230    	; 0xaa2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	88 e2       	ldi	r24, 0x28	; 40
     b8c:	8a df       	rcall	.-236    	; 0xaa2 <LCDByte>
}
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	82 df       	rcall	.-252    	; 0xaa2 <LCDByte>
	msg++;
     b9e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     ba0:	88 81       	ld	r24, Y
     ba2:	81 11       	cpse	r24, r1
     ba4:	fa cf       	rjmp	.-12     	; 0xb9a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	00 d0       	rcall	.+0      	; 0xbba <LCDWriteInt+0xe>
     bba:	1f 92       	push	r1
     bbc:	1f 92       	push	r1
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     bc4:	fe 01       	movw	r30, r28
     bc6:	31 96       	adiw	r30, 0x01	; 1
     bc8:	25 e0       	ldi	r18, 0x05	; 5
     bca:	df 01       	movw	r26, r30
     bcc:	1d 92       	st	X+, r1
     bce:	2a 95       	dec	r18
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <LCDWriteInt+0x20>
	int i=4,j=0;
     bd2:	24 e0       	ldi	r18, 0x04	; 4
     bd4:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     bd8:	6a e0       	ldi	r22, 0x0A	; 10
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	e3 d6       	rcall	.+3526   	; 0x19a4 <__divmodhi4>
     bde:	e1 e0       	ldi	r30, 0x01	; 1
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ec 0f       	add	r30, r28
     be4:	fd 1f       	adc	r31, r29
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	80 83       	st	Z, r24
	val=val/10;
     bec:	86 2f       	mov	r24, r22
     bee:	97 2f       	mov	r25, r23
	i--;
     bf0:	21 50       	subi	r18, 0x01	; 1
     bf2:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	81 f7       	brne	.-32     	; 0xbd8 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     bf8:	bf ef       	ldi	r27, 0xFF	; 255
     bfa:	eb 16       	cp	r14, r27
     bfc:	fb 06       	cpc	r15, r27
     bfe:	81 f4       	brne	.+32     	; 0xc20 <LCDWriteInt+0x74>
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     c02:	0f 5f       	subi	r16, 0xFF	; 255
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <LCDWriteInt+0x60>
     c08:	00 e0       	ldi	r16, 0x00	; 0
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	e1 e0       	ldi	r30, 0x01	; 1
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	ec 0f       	add	r30, r28
     c12:	fd 1f       	adc	r31, r29
     c14:	e0 0f       	add	r30, r16
     c16:	f1 1f       	adc	r31, r17
     c18:	20 81       	ld	r18, Z
     c1a:	22 23       	and	r18, r18
     c1c:	91 f3       	breq	.-28     	; 0xc02 <LCDWriteInt+0x56>
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     c20:	05 e0       	ldi	r16, 0x05	; 5
     c22:	10 e0       	ldi	r17, 0x00	; 0
     c24:	0e 19       	sub	r16, r14
     c26:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     c28:	99 23       	and	r25, r25
     c2a:	84 f4       	brge	.+32     	; 0xc4c <LCDWriteInt+0xa0>
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	8d e2       	ldi	r24, 0x2D	; 45
     c30:	38 df       	rcall	.-400    	; 0xaa2 <LCDByte>
     c32:	0c c0       	rjmp	.+24     	; 0xc4c <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     c34:	e1 e0       	ldi	r30, 0x01	; 1
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	e0 0f       	add	r30, r16
     c3e:	f1 1f       	adc	r31, r17
     c40:	80 81       	ld	r24, Z
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	80 5d       	subi	r24, 0xD0	; 208
     c46:	2d df       	rcall	.-422    	; 0xaa2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     c48:	0f 5f       	subi	r16, 0xFF	; 255
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	05 30       	cpi	r16, 0x05	; 5
     c4e:	11 05       	cpc	r17, r1
     c50:	8c f3       	brlt	.-30     	; 0xc34 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	08 95       	ret

00000c6a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     c6a:	88 32       	cpi	r24, 0x28	; 40
     c6c:	28 f4       	brcc	.+10     	; 0xc78 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     c6e:	61 11       	cpse	r22, r1
     c70:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	15 cf       	rjmp	.-470    	; 0xaa2 <LCDByte>
     c78:	08 95       	ret

00000c7a <main>:


int main(int argc, char *argv[]){
//INITIALIZATION	
	//Limit Clock to 8MHz
	CLKPR = 0x80;
     c7a:	e1 e6       	ldi	r30, 0x61	; 97
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 e8       	ldi	r24, 0x80	; 128
     c80:	80 83       	st	Z, r24
	CLKPR = 0x01;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24

	
	cli();//Disable Interrupts
     c86:	f8 94       	cli
	
	//GPIO setup
	DDRA = 0xFF; //OUTPUT for stepper
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //OUTPUT for motor
     c8c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //OUTPUT for LCD
     c8e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;//INPUT for EX, OR, HE, PAUSE
     c90:	1a b8       	out	0x0a, r1	; 10
	DDRJ &= ~_BV(PINJ0); //INPUT
     c92:	e4 e0       	ldi	r30, 0x04	; 4
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	80 83       	st	Z, r24
	
	//EXT INTERRUPTS
	EICRA |= _BV(ISC01);//PAUSE
     c9c:	e9 e6       	ldi	r30, 0x69	; 105
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	82 60       	ori	r24, 0x02	; 2
     ca4:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11) |_BV(ISC10);//OR
     ca6:	80 81       	ld	r24, Z
     ca8:	8c 60       	ori	r24, 0x0C	; 12
     caa:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//EX
     cac:	80 81       	ld	r24, Z
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31) | _BV(ISC30);//HE
     cb2:	80 81       	ld	r24, Z
     cb4:	80 6c       	ori	r24, 0xC0	; 192
     cb6:	80 83       	st	Z, r24
	
	PCICR |= _BV(PCIE1);//Enable PCINT1
     cb8:	e8 e6       	ldi	r30, 0x68	; 104
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 60       	ori	r24, 0x02	; 2
     cc0:	80 83       	st	Z, r24
	PCMSK1 |= _BV(PCINT9);//RAMPDOWN
     cc2:	ac e6       	ldi	r26, 0x6C	; 108
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	8c 91       	ld	r24, X
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	8c 93       	st	X, r24
	
	PCICR |= _BV(PCIE0);//Enable PCINT 0
     ccc:	80 81       	ld	r24, Z
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	80 83       	st	Z, r24
	PCMSK0 |= _BV(PCINT4);//Motor Controller
     cd2:	eb e6       	ldi	r30, 0x6B	; 107
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	80 83       	st	Z, r24


	ADC_Init();
     cdc:	8c dc       	rcall	.-1768   	; 0x5f6 <ADC_Init>
	mTimer_init();
     cde:	34 dd       	rcall	.-1432   	; 0x748 <mTimer_init>
	stepTimer_init();
     ce0:	6a d5       	rcall	.+2772   	; 0x17b6 <stepTimer_init>
	InitLCD(LS_BLINK|LS_ULINE);
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	15 df       	rcall	.-470    	; 0xb10 <InitLCD>
	LCDClear();
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	db de       	rcall	.-586    	; 0xaa2 <LCDByte>
	EIMSK |= 0x08;//Enable HE
     cec:	8d b3       	in	r24, 0x1d	; 29
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	8d bb       	out	0x1d, r24	; 29
	sei();// Enable global interrupts
     cf2:	78 94       	sei
	// Calculate the stepper acceleration profile and calibrate position
	stepCalibrate();
     cf4:	21 d6       	rcall	.+3138   	; 0x1938 <stepCalibrate>
     cf6:	8d b3       	in	r24, 0x1d	; 29
	EIMSK |= 0x07;//Enable OR, EX, and PAUSE
     cf8:	87 60       	ori	r24, 0x07	; 7
     cfa:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(0x08);//Disable HE
     cfc:	8d b3       	in	r24, 0x1d	; 29
     cfe:	87 7f       	andi	r24, 0xF7	; 247
	
	//Initialize the belt motor PWM and pins
	Motor_init();
     d00:	8d bb       	out	0x1d, r24	; 29
	

	//reset counters
	countPart=0;
     d02:	c8 db       	rcall	.-2160   	; 0x494 <Motor_init>
     d04:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <countPart>
	countSort = 0;
     d08:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <countSort>
	startMotor();//Start Belt motor
     d0c:	ed db       	rcall	.-2086   	; 0x4e8 <startMotor>
	runTimerStart();//Start System Timer
     d0e:	2b dd       	rcall	.-1450   	; 0x766 <runTimerStart>
     d10:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>

STANDBY://Display the system status and handle button push events

	while (1)
	{				
		if(ENABLE)
     d14:	88 23       	and	r24, r24
     d16:	b1 f1       	breq	.+108    	; 0xd84 <main+0x10a>
     d18:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
		{//if the system is enabled
			if((runTime_d-refreshTime)>REFRESH_PERIOD)
     d1c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     d20:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <refreshTime>
     d24:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <refreshTime+0x1>
     d28:	82 1b       	sub	r24, r18
     d2a:	93 0b       	sbc	r25, r19
     d2c:	c3 97       	sbiw	r24, 0x33	; 51
     d2e:	48 f0       	brcs	.+18     	; 0xd42 <main+0xc8>
			{//if LCD needs to be updated
				dispStatus();//display system information
     d30:	a9 dd       	rcall	.-1198   	; 0x884 <dispStatus>
     d32:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
				refreshTime = runTime_d;//control refresh rate of LCD
     d36:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     d3a:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <refreshTime+0x1>
     d3e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <refreshTime>
     d42:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <RAMPDOWN>
		{//else go to disabled state
			goto DISABLE;
		}


		if(RAMPDOWN)
     d46:	88 23       	and	r24, r24
     d48:	19 f3       	breq	.-58     	; 0xd10 <main+0x96>
     d4a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <countSort>
		{//if RAMPDOWN button is pushed
			if(countSort != countPart)
     d4e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <countPart>
     d52:	98 17       	cp	r25, r24
     d54:	49 f0       	breq	.+18     	; 0xd68 <main+0xee>
     d56:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
			{//if there are parts which need sorting
				rampTime_d = runTime_d;//reset RAMPDOWN timer
     d5a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     d5e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <rampTime_d+0x1>
     d62:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <rampTime_d>
     d66:	d4 cf       	rjmp	.-88     	; 0xd10 <main+0x96>
     d68:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
				
			}else if((runTime_d-rampTime_d)>RAMPDOWN_DELAY)
     d6c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     d70:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <rampTime_d>
     d74:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <rampTime_d+0x1>
     d78:	82 1b       	sub	r24, r18
     d7a:	93 0b       	sbc	r25, r19
     d7c:	81 3d       	cpi	r24, 0xD1	; 209
     d7e:	97 40       	sbci	r25, 0x07	; 7
	}//while ENABLE
	
	
	
DISABLE:// when the ENABLE is reset by ISR(INT0_vect)
	brakeMotor();//stop the belt
     d80:	38 f2       	brcs	.-114    	; 0xd10 <main+0x96>
     d82:	2a c0       	rjmp	.+84     	; 0xdd8 <main+0x15e>
	while((PIND & 0x01) == 0x00);//wait for PAUSE button to be released
     d84:	76 db       	rcall	.-2324   	; 0x472 <brakeMotor>
     d86:	48 9b       	sbis	0x09, 0	; 9
	stepStop();//stop the stepper motor
     d88:	fe cf       	rjmp	.-4      	; 0xd86 <main+0x10c>
     d8a:	41 d5       	rcall	.+2690   	; 0x180e <stepStop>
	runTimerStop();//stop the run timer
     d8c:	07 dd       	rcall	.-1522   	; 0x79c <runTimerStop>
     d8e:	cd b3       	in	r28, 0x1d	; 29
	uint8_t INTState = EIMSK; //save current interrupt state
	
	//Disable all interrupts except PAUSE button
	EIMSK = 0x01;
     d90:	81 e0       	ldi	r24, 0x01	; 1
	PCMSK1 &= ~_BV(PCINT9);
     d92:	8d bb       	out	0x1d, r24	; 29
     d94:	ec e6       	ldi	r30, 0x6C	; 108
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8d 7f       	andi	r24, 0xFD	; 253
	PCMSK0 &= ~_BV(PCINT4);
     d9c:	80 83       	st	Z, r24
     d9e:	eb e6       	ldi	r30, 0x6B	; 107
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 7e       	andi	r24, 0xEF	; 239
	
	brakeMotor();//insure motor is stopped (for edge case)
     da6:	80 83       	st	Z, r24
     da8:	64 db       	rcall	.-2360   	; 0x472 <brakeMotor>
	stepRes();//Reset the stepper acceleration
     daa:	6a d4       	rcall	.+2260   	; 0x1680 <stepRes>
     dac:	f7 dd       	rcall	.-1042   	; 0x99c <dispPause>
	dispPause();//Display pause information
     dae:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>
	
	//Wait for PAUSE button to be pushed again
	while(!ENABLE);
     db2:	88 23       	and	r24, r24
     db4:	e1 f3       	breq	.-8      	; 0xdae <main+0x134>
	while((PIND & 0x01) == 0x00);//wait for PAUSE button release
     db6:	48 9b       	sbis	0x09, 0	; 9
     db8:	fe cf       	rjmp	.-4      	; 0xdb6 <main+0x13c>
	
	//return interrupts to previous state
	EIMSK = INTState;
     dba:	cd bb       	out	0x1d, r28	; 29
	PCMSK1 |= _BV(PCINT9);
     dbc:	ec e6       	ldi	r30, 0x6C	; 108
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	82 60       	ori	r24, 0x02	; 2
	PCMSK0 |= _BV(PCINT4);
     dc4:	80 83       	st	Z, r24
     dc6:	eb e6       	ldi	r30, 0x6B	; 107
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 61       	ori	r24, 0x10	; 16
	runTimerResume();//start system timer
     dce:	80 83       	st	Z, r24
     dd0:	eb dc       	rcall	.-1578   	; 0x7a8 <runTimerResume>
	stepStart();//start stepper
     dd2:	06 d5       	rcall	.+2572   	; 0x17e0 <stepStart>
     dd4:	af db       	rcall	.-2210   	; 0x534 <runMotor>
	runMotor();//start motor
     dd6:	9c cf       	rjmp	.-200    	; 0xd10 <main+0x96>
     dd8:	f8 94       	cli
	
goto STANDBY;//return to STANDBY mode
     dda:	15 b8       	out	0x05, r1	; 5
	
	
SHUTDOWN://When RAMPDOWN has been pushed and no part is on belt
	cli();//disable all interrupts
     ddc:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;//disable belt motor
     dde:	0f dd       	rcall	.-1506   	; 0x7fe <dispComplete>
	PORTA = 0x00;//disable stepper motor
     de0:	ff cf       	rjmp	.-2      	; 0xde0 <main+0x166>

00000de2 <__vector_2>:
	dispComplete();//display complete information
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63

RUNTIME ~500cc
                                                                  */
/************************************************************************/
ISR(INT1_vect)
{//OR has triggered falling or rising edge
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	0b b6       	in	r0, 0x3b	; 59
     dee:	0f 92       	push	r0
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
	if(ORFLAG)
     e0c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ORFLAG>
     e10:	88 23       	and	r24, r24
     e12:	81 f1       	breq	.+96     	; 0xe74 <__vector_2+0x92>
	{//if Part is entering OR
		
	
		if(debounce(1, 1, NOISECHECK))
     e14:	48 e0       	ldi	r20, 0x08	; 8
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	13 dc       	rcall	.-2010   	; 0x644 <debounce>
     e1e:	88 23       	and	r24, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <__vector_2+0x42>
     e22:	7f c0       	rjmp	.+254    	; 0xf22 <__vector_2+0x140>
		{//FILTER noise
			
			ORFLAG  = 0; //Part has entered OR
     e24:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <ORFLAG>
			
			//set to falling edge
			EIMSK &= ~_BV(INT1);
     e28:	8d b3       	in	r24, 0x1d	; 29
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8d bb       	out	0x1d, r24	; 29
			EICRA &= ~_BV(ISC10);
     e2e:	e9 e6       	ldi	r30, 0x69	; 105
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); 
     e38:	8d b3       	in	r24, 0x1d	; 29
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	8d bb       	out	0x1d, r24	; 29

			//reset adc variables
			countADC = 0;
     e3e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <countADC+0x1>
     e42:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <countADC>
			adcPart = 1023;
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcPart+0x1>
     e4e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcPart>
		
			ADCSRA |=_BV(ADSC);//start first ADC conversion
     e52:	ea e7       	ldi	r30, 0x7A	; 122
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	80 83       	st	Z, r24
			
			ORTime_s = runTime_d;//record time part entered
     e5c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     e60:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     e64:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <ORTime_s+0x1>
     e68:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ORTime_s>
			EIFR |= _BV(INT1);//reset interrupt flag (for edge case)
     e6c:	8c b3       	in	r24, 0x1c	; 28
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	8c bb       	out	0x1c, r24	; 28
     e72:	57 c0       	rjmp	.+174    	; 0xf22 <__vector_2+0x140>
		
	}else//!ORFLAG
	{//if Part is leaving OR
		

		if(debounce(1, 0, NOISECHECK) && ((runTime_d - ORTime_s) > PARTTIME))
     e74:	48 e0       	ldi	r20, 0x08	; 8
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	e3 db       	rcall	.-2106   	; 0x644 <debounce>
     e7e:	88 23       	and	r24, r24
     e80:	09 f4       	brne	.+2      	; 0xe84 <__vector_2+0xa2>
     e82:	4f c0       	rjmp	.+158    	; 0xf22 <__vector_2+0x140>
     e84:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     e88:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     e8c:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <ORTime_s>
     e90:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <ORTime_s+0x1>
     e94:	82 1b       	sub	r24, r18
     e96:	93 0b       	sbc	r25, r19
     e98:	06 97       	sbiw	r24, 0x06	; 6
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__vector_2+0xbc>
     e9c:	42 c0       	rjmp	.+132    	; 0xf22 <__vector_2+0x140>
		{//FILTER noise and double edge detection
			ORFLAG  = 1;//Part has cleared OR	
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <ORFLAG>
			
			//Turn on rising edge
			EIMSK &= ~_BV(INT1); 
     ea4:	8d b3       	in	r24, 0x1d	; 29
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8d bb       	out	0x1d, r24	; 29
			EICRA |= _BV(ISC10);
     eaa:	e9 e6       	ldi	r30, 0x69	; 105
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	80 83       	st	Z, r24
			EIMSK |= _BV(INT1); 
     eb4:	8d b3       	in	r24, 0x1d	; 29
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8d bb       	out	0x1d, r24	; 29

			adcDisp = adcPart;//set display ADC variable
     eba:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     ebe:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     ec2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <adcDisp+0x1>
     ec6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <adcDisp>
			
			//FILTER bad reads from ADC
			if((adcPart<HI_Reflect) && countADC>50)
     eca:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     ece:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     ed2:	82 3f       	cpi	r24, 0xF2	; 242
     ed4:	93 40       	sbci	r25, 0x03	; 3
     ed6:	10 f5       	brcc	.+68     	; 0xf1c <__vector_2+0x13a>
     ed8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <countADC>
     edc:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countADC+0x1>
     ee0:	c3 97       	sbiw	r24, 0x33	; 51
     ee2:	e0 f0       	brcs	.+56     	; 0xf1c <__vector_2+0x13a>
			{//if a reflect value was recorded and the adc got more than minimum reads
				Parts[countPart] = classify(adcPart);//classify the part and add to array
     ee4:	c0 91 65 02 	lds	r28, 0x0265	; 0x800265 <countPart>
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
     eea:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
     eee:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
     ef2:	95 db       	rcall	.-2262   	; 0x61e <classify>
     ef4:	c8 58       	subi	r28, 0x88	; 136
     ef6:	dd 4f       	sbci	r29, 0xFD	; 253
     ef8:	88 83       	st	Y, r24
				Parts[countPart+1] = Parts[countPart];//Initialize next array index
     efa:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <countPart>
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <countPart>
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	a8 58       	subi	r26, 0x88	; 136
     f08:	bd 4f       	sbci	r27, 0xFD	; 253
     f0a:	8c 91       	ld	r24, X
     f0c:	e7 58       	subi	r30, 0x87	; 135
     f0e:	fd 4f       	sbci	r31, 0xFD	; 253
     f10:	80 83       	st	Z, r24
				countPart +=1;//increment part counter
     f12:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <countPart>
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <countPart>
			}
			EIFR |= _BV(INT1);//reset interrupt flag (for edge case) 
     f1c:	8c b3       	in	r24, 0x1c	; 28
     f1e:	82 60       	ori	r24, 0x02	; 2
     f20:	8c bb       	out	0x1c, r24	; 28
		}//LO	
	}//else
}//OR
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0b be       	out	0x3b, r0	; 59
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_3>:
rocking or sliding of the parts.

RUNTIME ~800cc
                                                                  */
/************************************************************************/
ISR(INT2_vect){
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	0b b6       	in	r0, 0x3b	; 59
     f58:	0f 92       	push	r0
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
	
	if(!EXFLAG)
     f72:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <EXFLAG>
     f76:	81 11       	cpse	r24, r1
     f78:	36 c0       	rjmp	.+108    	; 0xfe6 <__vector_3+0x9a>
	{//Part is entering EX
		
		if(debounce(2, 0, NOISECHECK))
     f7a:	48 e0       	ldi	r20, 0x08	; 8
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	60 db       	rcall	.-2368   	; 0x644 <debounce>
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <__vector_3+0x3e>
     f88:	96 c0       	rjmp	.+300    	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{//FILTER noise
				EXFLAG =1;
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <EXFLAG>
				// Turn on rising edge
				EIMSK &= ~_BV(INT2);
     f90:	8d b3       	in	r24, 0x1d	; 29
     f92:	8b 7f       	andi	r24, 0xFB	; 251
     f94:	8d bb       	out	0x1d, r24	; 29
				EICRA |= _BV(ISC20);
     f96:	e9 e6       	ldi	r30, 0x69	; 105
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 61       	ori	r24, 0x10	; 16
     f9e:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2); //Enable Interrupt
     fa0:	8d b3       	in	r24, 0x1d	; 29
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
     fa6:	8c b3       	in	r24, 0x1c	; 28
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	8c bb       	out	0x1c, r24	; 28
				
				SORTFLAG = 1;//Part need sorting
     fac:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <SORTFLAG>
				if(HOLDFLAG)
     fb0:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HOLDFLAG>
     fb4:	88 23       	and	r24, r24
				{//if the previous part has not finished sorting
					brakeMotor();//stop the belt
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <__vector_3+0x7c>
     fb8:	5c da       	rcall	.-2888   	; 0x472 <brakeMotor>
					enterdropTime = BRAKE_DROP_TIME;//set the drop time
     fba:	88 ed       	ldi	r24, 0xD8	; 216
     fbc:	99 e5       	ldi	r25, 0x59	; 89
     fbe:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fc2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <__vector_3+0x88>
				}else
				{//else keep the belt moving
					enterdropTime = ENTER_DROP_TIME;//set the drop time
     fc8:	84 ee       	ldi	r24, 0xE4	; 228
     fca:	97 e5       	ldi	r25, 0x57	; 87
     fcc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fd0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
				}
				EXTime_s = runTime_d;//record time part entered
     fd4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     fd8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     fdc:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <EXTime_s+0x1>
     fe0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <EXTime_s>
     fe4:	68 c0       	rjmp	.+208    	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
		}//LO
	}else
	{//Part is leaving EX
		
		if(debounce(2,1, NOISECHECK) && ((runTime_d - EXTime_s)>SORTTIME))
     fe6:	48 e0       	ldi	r20, 0x08	; 8
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	2a db       	rcall	.-2476   	; 0x644 <debounce>
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__vector_3+0xaa>
     ff4:	60 c0       	rjmp	.+192    	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
     ff6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
     ffa:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
     ffe:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <EXTime_s>
    1002:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <EXTime_s+0x1>
    1006:	82 1b       	sub	r24, r18
    1008:	93 0b       	sbc	r25, r19
    100a:	06 97       	sbiw	r24, 0x06	; 6
    100c:	08 f4       	brcc	.+2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100e:	53 c0       	rjmp	.+166    	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{//FILTER noise and double edge detection
				EXFLAG = 0;
    1010:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <EXFLAG>
				//Turn on falling edge
				EIMSK &= ~_BV(INT2);
    1014:	8d b3       	in	r24, 0x1d	; 29
    1016:	8b 7f       	andi	r24, 0xFB	; 251
    1018:	8d bb       	out	0x1d, r24	; 29
				EICRA &= ~(_BV(ISC20));
    101a:	e9 e6       	ldi	r30, 0x69	; 105
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	80 83       	st	Z, r24
				EIMSK |= _BV(INT2);
    1024:	8d b3       	in	r24, 0x1d	; 29
    1026:	84 60       	ori	r24, 0x04	; 4
    1028:	8d bb       	out	0x1d, r24	; 29
				EIFR |= _BV(INT2);
    102a:	8c b3       	in	r24, 0x1c	; 28
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	8c bb       	out	0x1c, r24	; 28
                
				updateCount(Parts[countSort]);//Update the sorted count for display
    1030:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	e8 58       	subi	r30, 0x88	; 136
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	80 81       	ld	r24, Z
    103c:	66 db       	rcall	.-2356   	; 0x70a <updateCount>
				
				if(countSort<countPart)
    103e:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <countSort>
    1042:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <countPart>
    1046:	98 17       	cp	r25, r24
    1048:	38 f4       	brcc	.+14     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
				{//if still parts to sort
					countSort+=1;//go to next part
    104a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <countSort>
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <countSort>
					TARGETFLAG =0;//New target; reset flag
    1054:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <TARGETFLAG>
				}
				
				if(abs(CurError)>DROP_REGION)
    1058:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    105c:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1060:	99 23       	and	r25, r25
    1062:	1c f4       	brge	.+6      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1064:	91 95       	neg	r25
    1066:	81 95       	neg	r24
    1068:	91 09       	sbc	r25, r1
    106a:	0f 97       	sbiw	r24, 0x0f	; 15
    106c:	24 f0       	brlt	.+8      	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
				{//if stepper hasn't reached the drop zone for previous part
					HOLDFLAG = 1;//set hold flag to keep moving to previous target position
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <HOLDFLAG>
				}else
				{//else start the belt to drop the part
					runMotor();
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1076:	5e da       	rcall	.-2884   	; 0x534 <runMotor>
				}
				//reset flag
                PAUSEFLAG=0;
    1078:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <PAUSEFLAG>
				SORTFLAG = 0;
    107c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <SORTFLAG>
				
				DROPFLAG = 1;//part is now dropping into the bin
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <DROPFLAG>
				
				//record time for part to hit bucket. 
				//Correct for next time ISR(TIMER3_COMPA_vect) runs
				dropTime = DROP_TIME - (OCR3A - TCNT3);   
    1086:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    108a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    108e:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    1092:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    1096:	82 1b       	sub	r24, r18
    1098:	93 0b       	sbc	r25, r19
    109a:	80 5b       	subi	r24, 0xB0	; 176
    109c:	99 4b       	sbci	r25, 0xB9	; 185
    109e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dropTime+0x1>
    10a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dropTime>
				     
			EXTime_s = runTime_d;//record time part exited	
    10a6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
    10aa:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
    10ae:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <EXTime_s+0x1>
    10b2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <EXTime_s>
		}//HI
	}	
}//EX
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0b be       	out	0x3b, r0	; 59
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_32>:

The ISR also triggers the ISR for motor control, ISR(PCINT0_vect).

RUNTIME ~400cc                                                          */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	0b b6       	in	r0, 0x3b	; 59
    10e8:	0f 92       	push	r0
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
//CONTROL STEPPER
	step();//step stepper and update the position
    1102:	8b d1       	rcall	.+790    	; 0x141a <step>
	stepUpdateError(); //calculate the new stepper position error (CurError)
    1104:	d0 d1       	rcall	.+928    	; 0x14a6 <stepUpdateError>
	stepUpdateDir(); //update the stepper direction
    1106:	50 d2       	rcall	.+1184   	; 0x15a8 <stepUpdateDir>
    1108:	c6 d2       	rcall	.+1420   	; 0x1696 <stepUpdateDelay>
	stepUpdateDelay(); //update the stepper speed
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <CALCFLAG>
//CONTROL STEPPER

	//trigger motor controller.
	CALCFLAG = 1;
    1110:	95 b1       	in	r25, 0x05	; 5
    1112:	80 e1       	ldi	r24, 0x10	; 16
	PORTB ^= _BV(PINB4);
    1114:	89 27       	eor	r24, r25
    1116:	85 b9       	out	0x05, r24	; 5
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
}//stepTimer
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0b be       	out	0x3b, r0	; 59
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_29>:
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
	



//ADC ISR
ISR(ADC_vect){
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	0b b6       	in	r0, 0x3b	; 59
    114a:	0f 92       	push	r0
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31

	//if ADC is lower than value
	adcTemp = ADCL;
    1158:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <adcTemp+0x1>
    1162:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcTemp>
	adcTemp+= (ADCH<<8);
    1166:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	98 2f       	mov	r25, r24
    116e:	88 27       	eor	r24, r24
    1170:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <adcTemp>
    1174:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <adcTemp+0x1>
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <adcTemp+0x1>
    1180:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcTemp>
	countADC+=1;
    1184:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <countADC>
    1188:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <countADC+0x1>
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <countADC+0x1>
    1192:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <countADC>
	
	if(adcTemp<adcPart){
    1196:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <adcTemp>
    119a:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <adcTemp+0x1>
    119e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcPart>
    11a2:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <adcPart+0x1>
    11a6:	28 17       	cp	r18, r24
    11a8:	39 07       	cpc	r19, r25
    11aa:	40 f4       	brcc	.+16     	; 0x11bc <__vector_29+0x7e>
		adcPart = adcTemp;// set value to ADC
    11ac:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcTemp>
    11b0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <adcTemp+0x1>
    11b4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <adcPart+0x1>
    11b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcPart>
	}
	
	if(!ORFLAG){
    11bc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ORFLAG>
    11c0:	81 11       	cpse	r24, r1
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__vector_29+0x90>
		ADCSRA |=_BV( ADSC);
    11c4:	ea e7       	ldi	r30, 0x7A	; 122
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 64       	ori	r24, 0x40	; 64
    11cc:	80 83       	st	Z, r24
	}
}//ADC
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0b be       	out	0x3b, r0	; 59
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <__vector_4>:


//HE ISR
ISR(INT3_vect){
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	0b b6       	in	r0, 0x3b	; 59
    11f4:	0f 92       	push	r0
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
	if(debounce(3, 1, NOISECHECK)){
    120e:	48 e0       	ldi	r20, 0x08	; 8
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	16 da       	rcall	.-3028   	; 0x644 <debounce>
    1218:	88 23       	and	r24, r24
    121a:	31 f0       	breq	.+12     	; 0x1228 <__vector_4+0x40>
		//stepStop();
		CurPosition = B_ID;
    121c:	82 e3       	ldi	r24, 0x32	; 50
    121e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
		HALLSENSOR= 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <HALLSENSOR>
	}
}//HE
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0b be       	out	0x3b, r0	; 59
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_1>:


//ISR Stop Button
ISR(INT0_vect){
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	0b b6       	in	r0, 0x3b	; 59
    125a:	0f 92       	push	r0
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
	if(debounce(0, 0, BOUNCECHECK)){
    1274:	44 ef       	ldi	r20, 0xF4	; 244
    1276:	51 e0       	ldi	r21, 0x01	; 1
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	e3 d9       	rcall	.-3130   	; 0x644 <debounce>
    127e:	88 23       	and	r24, r24
    1280:	51 f0       	breq	.+20     	; 0x1296 <__vector_1+0x48>
		if(ENABLE)
    1282:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ENABLE>
    1286:	88 23       	and	r24, r24
    1288:	19 f0       	breq	.+6      	; 0x1290 <__vector_1+0x42>
		{
			ENABLE = 0;
    128a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <ENABLE>
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <__vector_1+0x48>
		}else
		{
			ENABLE = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ENABLE>
		}
	}
}//ISR Pause Button
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0b be       	out	0x3b, r0	; 59
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <__vector_10>:

ISR(PCINT1_vect)
{
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	0b b6       	in	r0, 0x3b	; 59
    12c8:	0f 92       	push	r0
    12ca:	2f 93       	push	r18
    12cc:	3f 93       	push	r19
    12ce:	4f 93       	push	r20
    12d0:	5f 93       	push	r21
    12d2:	6f 93       	push	r22
    12d4:	7f 93       	push	r23
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	af 93       	push	r26
    12dc:	bf 93       	push	r27
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
	if(debouncePINJ(0, 1, BOUNCECHECK)){
    12e2:	44 ef       	ldi	r20, 0xF4	; 244
    12e4:	51 e0       	ldi	r21, 0x01	; 1
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	dd d9       	rcall	.-3142   	; 0x6a6 <debouncePINJ>
    12ec:	88 23       	and	r24, r24
    12ee:	59 f0       	breq	.+22     	; 0x1306 <__vector_10+0x4a>
		RAMPDOWN = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <RAMPDOWN>
		rampTime_d = runTime_d;	
    12f6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <runTime_d>
    12fa:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <runTime_d+0x1>
    12fe:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <rampTime_d+0x1>
    1302:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <rampTime_d>
	}
}//ISR Ramp Button
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0b be       	out	0x3b, r0	; 59
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_9>:


ISR(PCINT0_vect)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	0b b6       	in	r0, 0x3b	; 59
    1338:	0f 92       	push	r0
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
	if(CALCFLAG)
    1352:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <CALCFLAG>
    1356:	88 23       	and	r24, r24
    1358:	09 f4       	brne	.+2      	; 0x135c <__vector_9+0x30>
    135a:	4a c0       	rjmp	.+148    	; 0x13f0 <__vector_9+0xc4>
	{
		
		if(SORTFLAG ^ HOLDFLAG)
    135c:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <SORTFLAG>
    1360:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HOLDFLAG>
    1364:	98 17       	cp	r25, r24
    1366:	81 f0       	breq	.+32     	; 0x1388 <__vector_9+0x5c>
		{
			if(CalcEnterTime())
    1368:	0e 94 52 01 	call	0x2a4	; 0x2a4 <CalcEnterTime>
    136c:	88 23       	and	r24, r24
    136e:	41 f0       	breq	.+16     	; 0x1380 <__vector_9+0x54>
			{
				brakeMotor();
    1370:	80 d8       	rcall	.-3840   	; 0x472 <brakeMotor>
				enterdropTime = BRAKE_DROP_TIME;
    1372:	88 ed       	ldi	r24, 0xD8	; 216
    1374:	99 e5       	ldi	r25, 0x59	; 89
    1376:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    137a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    137e:	0c c0       	rjmp	.+24     	; 0x1398 <__vector_9+0x6c>
			}else
			{
				SORTFLAG = 0;
    1380:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <SORTFLAG>
				runMotor();
    1384:	d7 d8       	rcall	.-3666   	; 0x534 <runMotor>
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <__vector_9+0x6c>
			}
		}else if(SORTFLAG && HOLDFLAG)
    1388:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <SORTFLAG>
    138c:	88 23       	and	r24, r24
    138e:	21 f0       	breq	.+8      	; 0x1398 <__vector_9+0x6c>
    1390:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HOLDFLAG>
		{
			brakeMotor();
    1394:	81 11       	cpse	r24, r1
    1396:	6d d8       	rcall	.-3878   	; 0x472 <brakeMotor>
		}
		
		
		
		if(DROPFLAG)
    1398:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <DROPFLAG>
    139c:	88 23       	and	r24, r24
    139e:	41 f1       	breq	.+80     	; 0x13f0 <__vector_9+0xc4>
		{
			if(dropTime<CurDelay)
    13a0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <dropTime>
    13a4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <dropTime+0x1>
    13a8:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    13ac:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	28 f4       	brcc	.+10     	; 0x13c0 <__vector_9+0x94>
			{
				DROPFLAG = 0;
    13b6:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <DROPFLAG>
				PAUSEFLAG = 0;
    13ba:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <PAUSEFLAG>
    13be:	18 c0       	rjmp	.+48     	; 0x13f0 <__vector_9+0xc4>
			}else
			{
				dropTime -=CurDelay;	
    13c0:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <CurDelay>
    13c4:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <CurDelay+0x1>
    13c8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dropTime>
    13cc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dropTime+0x1>
    13d0:	82 1b       	sub	r24, r18
    13d2:	93 0b       	sbc	r25, r19
    13d4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dropTime+0x1>
    13d8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dropTime>
				if(CalcExitTime())
    13dc:	0e 94 93 00 	call	0x126	; 0x126 <CalcExitTime>
    13e0:	88 23       	and	r24, r24
    13e2:	21 f0       	breq	.+8      	; 0x13ec <__vector_9+0xc0>
				{
					PAUSEFLAG = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <PAUSEFLAG>
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <__vector_9+0xc4>
				}else
				{
					PAUSEFLAG = 0;
    13ec:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <PAUSEFLAG>
				}
			}	
		}	
	}
	CALCFLAG = 0;
    13f0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <CALCFLAG>
	
}
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0b be       	out	0x3b, r0	; 59
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <step>:
the position and state variables, and resets the delay counter. It also 
handles roll over for CurState and CurPosition.
                                                               */
/************************************************************************/
uint8_t step(void){
	CurState = CurState + Dir;//Update CurState based on Dir
    141a:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <CurState>
    141e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1422:	89 0f       	add	r24, r25
    1424:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <CurState>
	//stepper roll over
	if (4 <= CurState){CurState = 0;}
    1428:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <CurState>
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	1c f0       	brlt	.+6      	; 0x1436 <step+0x1c>
    1430:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <CurState>
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <step+0x2a>
	else if (-1 >= CurState){CurState = 3;}
    1436:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <CurState>
    143a:	88 23       	and	r24, r24
    143c:	1c f4       	brge	.+6      	; 0x1444 <step+0x2a>
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <CurState>
	
	PORTA = StepStates[CurState]; //Step
    1444:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <CurState>
    1448:	0e 2e       	mov	r0, r30
    144a:	00 0c       	add	r0, r0
    144c:	ff 0b       	sbc	r31, r31
    144e:	e3 5f       	subi	r30, 0xF3	; 243
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	80 81       	ld	r24, Z
    1454:	82 b9       	out	0x02, r24	; 2
	CurPosition = CurPosition + Dir;//Update CurPosition base on Dir
    1456:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    145a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <Dir>
    145e:	89 0f       	add	r24, r25
    1460:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
	//protect against roll over
	if(CurPosition > 225 && Dir==1){CurPosition -=  200;}
    1464:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    1468:	82 3e       	cpi	r24, 0xE2	; 226
    146a:	50 f0       	brcs	.+20     	; 0x1480 <step+0x66>
    146c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	31 f4       	brne	.+12     	; 0x1480 <step+0x66>
    1474:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    1478:	88 5c       	subi	r24, 0xC8	; 200
    147a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
    147e:	0d c0       	rjmp	.+26     	; 0x149a <step+0x80>
	else if(CurPosition < 25 && Dir==-1){CurPosition += 200;}
    1480:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    1484:	89 31       	cpi	r24, 0x19	; 25
    1486:	48 f4       	brcc	.+18     	; 0x149a <step+0x80>
    1488:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    148c:	8f 3f       	cpi	r24, 0xFF	; 255
    148e:	29 f4       	brne	.+10     	; 0x149a <step+0x80>
    1490:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <CurPosition>
    1494:	88 53       	subi	r24, 0x38	; 56
    1496:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <CurPosition>
	
	TCNT3 = 0x0000;//Reset Counter
    149a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    149e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	return 1;	//return step;
}//step
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	08 95       	ret

000014a6 <stepUpdateError>:
HOLDFLAG, PAUSEFLAG, and TARGETFLAG (see variable initialization for meaning).
                                                               */
/************************************************************************/
uint8_t stepUpdateError(void)
{
	if(HOLDFLAG)
    14a6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <HOLDFLAG>
    14aa:	88 23       	and	r24, r24
    14ac:	81 f1       	breq	.+96     	; 0x150e <stepUpdateError+0x68>
	{
		if(abs(CurError)<DROP_REGION)//We may need to check the time since slip to see if the part fell
    14ae:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    14b2:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    14b6:	99 23       	and	r25, r25
    14b8:	1c f4       	brge	.+6      	; 0x14c0 <stepUpdateError+0x1a>
    14ba:	91 95       	neg	r25
    14bc:	81 95       	neg	r24
    14be:	91 09       	sbc	r25, r1
    14c0:	0e 97       	sbiw	r24, 0x0e	; 14
    14c2:	ac f4       	brge	.+42     	; 0x14ee <stepUpdateError+0x48>
		{//Maybe a reduced drop region and a delay to ensure piece hits
			HOLDFLAG = 0;
    14c4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <HOLDFLAG>
			PAUSEFLAG = 0;
    14c8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <PAUSEFLAG>
			runMotor();
    14cc:	33 d8       	rcall	.-3994   	; 0x534 <runMotor>
			CurError = Parts[countSort] - CurPosition;
    14ce:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	e8 58       	subi	r30, 0x88	; 136
    14d6:	fd 4f       	sbci	r31, 0xFD	; 253
    14d8:	80 81       	ld	r24, Z
    14da:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	82 1b       	sub	r24, r18
    14e2:	91 09       	sbc	r25, r1
    14e4:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <CurError+0x1>
    14e8:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <CurError>
    14ec:	1f c0       	rjmp	.+62     	; 0x152c <stepUpdateError+0x86>
		}else
		{
			CurError = Parts[countSort-1] - CurPosition;
    14ee:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	e9 58       	subi	r30, 0x89	; 137
    14f6:	fd 4f       	sbci	r31, 0xFD	; 253
    14f8:	80 81       	ld	r24, Z
    14fa:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	82 1b       	sub	r24, r18
    1502:	91 09       	sbc	r25, r1
    1504:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <CurError+0x1>
    1508:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <CurError>
    150c:	0f c0       	rjmp	.+30     	; 0x152c <stepUpdateError+0x86>
			
		}
	}else
	{
		CurError = Parts[countSort] - CurPosition;
    150e:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <countSort>
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	e8 58       	subi	r30, 0x88	; 136
    1516:	fd 4f       	sbci	r31, 0xFD	; 253
    1518:	80 81       	ld	r24, Z
    151a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <CurPosition>
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <CurError+0x1>
    1528:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <CurError>
	}
	
	
	if(CurError>100)
    152c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    1530:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1534:	85 36       	cpi	r24, 0x65	; 101
    1536:	91 05       	cpc	r25, r1
    1538:	5c f0       	brlt	.+22     	; 0x1550 <stepUpdateError+0xaa>
	{
		CurError = CurError - 200;
    153a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    153e:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1542:	88 5c       	subi	r24, 0xC8	; 200
    1544:	91 09       	sbc	r25, r1
    1546:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <CurError+0x1>
    154a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <CurError>
    154e:	11 c0       	rjmp	.+34     	; 0x1572 <stepUpdateError+0xcc>
	}else if(CurError<-100)
    1550:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    1554:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1558:	8c 39       	cpi	r24, 0x9C	; 156
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	54 f4       	brge	.+20     	; 0x1572 <stepUpdateError+0xcc>
	{
		CurError = CurError + 200;
    155e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    1562:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1566:	88 53       	subi	r24, 0x38	; 56
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <CurError+0x1>
    156e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <CurError>
	}
	
	if(abs(CurError) < Steps2Acc && !DROPFLAG)//change if slowing down to quickly at zone; may cause oscillation
    1572:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CurError>
    1576:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <CurError+0x1>
    157a:	33 23       	and	r19, r19
    157c:	1c f4       	brge	.+6      	; 0x1584 <stepUpdateError+0xde>
    157e:	31 95       	neg	r19
    1580:	21 95       	neg	r18
    1582:	31 09       	sbc	r19, r1
    1584:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	28 17       	cp	r18, r24
    158c:	39 07       	cpc	r19, r25
    158e:	44 f4       	brge	.+16     	; 0x15a0 <stepUpdateError+0xfa>
    1590:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <DROPFLAG>
    1594:	81 11       	cpse	r24, r1
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <stepUpdateError+0xfa>
	{
		TARGETFLAG = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <TARGETFLAG>
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <stepUpdateError+0xfe>
	}else
	{
		TARGETFLAG = 0;
    15a0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <TARGETFLAG>
	}
	return 1;
}
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	08 95       	ret

000015a8 <stepUpdateDir>:
does not equal Dir, the stepper must be slowed to MAX delay before Dir is updated.
This is controlled by the DECELFLAG.
                                                               */
/************************************************************************/
uint8_t stepUpdateDir(void){
	if(CurError == 0)
    15a8:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    15ac:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    15b0:	89 2b       	or	r24, r25
    15b2:	91 f4       	brne	.+36     	; 0x15d8 <stepUpdateDir+0x30>
	{// if stepper is at target
		if(CurDelay > (MAXDELAY-MINDELAY))
    15b4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    15b8:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    15bc:	81 31       	cpi	r24, 0x11	; 17
    15be:	97 40       	sbci	r25, 0x07	; 7
    15c0:	30 f0       	brcs	.+12     	; 0x15ce <stepUpdateDir+0x26>
		{// if stepper can stop
			Dir = 0; //stop stepping
    15c2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <Dir>
			TARGETFLAG = 0; //clear target flag
    15c6:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <TARGETFLAG>
			return 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	08 95       	ret
		}else
		{//Decelerate stepper
			DECELFLAG = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <DECELFLAG>
			return 0;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
		}
	}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
    15d8:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    15dc:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    15e0:	99 23       	and	r25, r25
    15e2:	1c f4       	brge	.+6      	; 0x15ea <stepUpdateDir+0x42>
    15e4:	91 95       	neg	r25
    15e6:	81 95       	neg	r24
    15e8:	91 09       	sbc	r25, r1
    15ea:	8b 35       	cpi	r24, 0x5B	; 91
    15ec:	91 05       	cpc	r25, r1
    15ee:	b4 f0       	brlt	.+44     	; 0x161c <stepUpdateDir+0x74>
    15f0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    15f4:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    15f8:	81 15       	cp	r24, r1
    15fa:	9a 40       	sbci	r25, 0x0A	; 10
    15fc:	78 f4       	brcc	.+30     	; 0x161c <stepUpdateDir+0x74>
	{//Next target is close in same direction and at high speed
		DECELFLAG = 0;//Don't slow down
    15fe:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <DECELFLAG>
		if(Dir != 0)
    1602:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    1606:	88 23       	and	r24, r24
    1608:	29 f0       	breq	.+10     	; 0x1614 <stepUpdateDir+0x6c>
		{//Keep direction
			NextDir = Dir;
    160a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    160e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <NextDir>
			return 0;
		}
	}else if((abs(CurError)>SPIN_ROUND_LIMIT) && (CurDelay<MAXDELAY))
	{//Next target is close in same direction and at high speed
		DECELFLAG = 0;//Don't slow down
		if(Dir != 0)
    1612:	18 c0       	rjmp	.+48     	; 0x1644 <stepUpdateDir+0x9c>
		{//Keep direction
			NextDir = Dir;
		}else
		{//edge case where Dir might be zero
			Dir = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
			return 1;
    161a:	08 95       	ret
		}
	}else
	{//Calculate closest direction
		NextDir = (CurError>0) - (CurError<0);
    161c:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CurError>
    1620:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <CurError+0x1>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	12 16       	cp	r1, r18
    1628:	13 06       	cpc	r1, r19
    162a:	0c f0       	brlt	.+2      	; 0x162e <stepUpdateDir+0x86>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CurError>
    1632:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <CurError+0x1>
    1636:	93 2f       	mov	r25, r19
    1638:	99 1f       	adc	r25, r25
    163a:	99 27       	eor	r25, r25
    163c:	99 1f       	adc	r25, r25
    163e:	89 1b       	sub	r24, r25
    1640:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <NextDir>
	}

	if(NextDir == Dir)
    1644:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <NextDir>
    1648:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    164c:	98 13       	cpse	r25, r24
    164e:	06 c0       	rjmp	.+12     	; 0x165c <stepUpdateDir+0xb4>
	{//next direction is the same
		Dir = NextDir;
    1650:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <NextDir>
    1654:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
		return 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	08 95       	ret
	}else if(CurDelay >= MAXDELAY)
    165c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    1660:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    1664:	81 15       	cp	r24, r1
    1666:	9a 40       	sbci	r25, 0x0A	; 10
    1668:	30 f0       	brcs	.+12     	; 0x1676 <stepUpdateDir+0xce>
	{//stepper is can change direction
		Dir = NextDir;
    166a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <NextDir>
    166e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Dir>
		return 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	08 95       	ret
	}else
	{//Decelerate stepper to switch directions
		DECELFLAG = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <DECELFLAG>
		return 0;
    167c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
    167e:	08 95       	ret

00001680 <stepRes>:
}


//Resets stepper parameters when the stepper is stopped
void stepRes(void){
	accSteps = 0;
    1680:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <accSteps>
	StepsDelta = 0;
    1684:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <StepsDelta>
	CurDelay = MAXDELAY;
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	9a e0       	ldi	r25, 0x0A	; 10
    168c:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    1690:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
    1694:	08 95       	ret

00001696 <stepUpdateDelay>:
                                                               */
/************************************************************************/
uint8_t stepUpdateDelay(void)
{
	
	if(Dir==0)
    1696:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Dir>
    169a:	81 11       	cpse	r24, r1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <stepUpdateDelay+0xc>
	{//if stepper is not stepping:
		stepRes();//reset stepper
    169e:	f0 df       	rcall	.-32     	; 0x1680 <stepRes>
    16a0:	7e c0       	rjmp	.+252    	; 0x179e <stepUpdateDelay+0x108>
	}else if(TARGETFLAG || DECELFLAG || PAUSEFLAG)
    16a2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <TARGETFLAG>
    16a6:	81 11       	cpse	r24, r1
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <stepUpdateDelay+0x24>
    16aa:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <DECELFLAG>
    16ae:	81 11       	cpse	r24, r1
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <stepUpdateDelay+0x24>
    16b2:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <PAUSEFLAG>
    16b6:	88 23       	and	r24, r24
    16b8:	c9 f1       	breq	.+114    	; 0x172c <stepUpdateDelay+0x96>
	{//Decelerate if prompted
		CurDelay = CurDelay + CurAcc[accSteps];
    16ba:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <accSteps>
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e4 52       	subi	r30, 0x24	; 36
    16c6:	fd 4f       	sbci	r31, 0xFD	; 253
    16c8:	20 81       	ld	r18, Z
    16ca:	31 81       	ldd	r19, Z+1	; 0x01
    16cc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    16d0:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    16d4:	82 0f       	add	r24, r18
    16d6:	93 1f       	adc	r25, r19
    16d8:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    16dc:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
		if (CurDelay > MAXDELAY)
    16e0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    16e4:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	9a 40       	sbci	r25, 0x0A	; 10
    16ec:	a0 f0       	brcs	.+40     	; 0x1716 <stepUpdateDelay+0x80>
		{
			accSteps = 0;
    16ee:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <accSteps>
			if(PAUSEFLAG && (Steps2Exit<3))
    16f2:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <PAUSEFLAG>
    16f6:	88 23       	and	r24, r24
    16f8:	29 f0       	breq	.+10     	; 0x1704 <stepUpdateDelay+0x6e>
    16fa:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <Steps2Exit>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	08 f4       	brcc	.+2      	; 0x1704 <stepUpdateDelay+0x6e>
    1702:	4d c0       	rjmp	.+154    	; 0x179e <stepUpdateDelay+0x108>
			{//do nothing
			}else
			{
				CurDelay = MAXDELAY;
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	9a e0       	ldi	r25, 0x0A	; 10
    1708:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    170c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
				DECELFLAG = 0;
    1710:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <DECELFLAG>
    1714:	44 c0       	rjmp	.+136    	; 0x179e <stepUpdateDelay+0x108>
			}
			}else if(accSteps>0){
    1716:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <accSteps>
    171a:	88 23       	and	r24, r24
    171c:	09 f4       	brne	.+2      	; 0x1720 <stepUpdateDelay+0x8a>
    171e:	3f c0       	rjmp	.+126    	; 0x179e <stepUpdateDelay+0x108>
			accSteps--;
    1720:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <accSteps>
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <accSteps>
    172a:	39 c0       	rjmp	.+114    	; 0x179e <stepUpdateDelay+0x108>
		}
		
	}else if(CurDelay>MINDELAY)
    172c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    1730:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    1734:	81 3f       	cpi	r24, 0xF1	; 241
    1736:	92 40       	sbci	r25, 0x02	; 2
    1738:	e0 f1       	brcs	.+120    	; 0x17b2 <stepUpdateDelay+0x11c>
	{//Accelerate if able
		CurDelay = CurDelay -  CurAcc[accSteps];
    173a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    173e:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    1742:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <accSteps>
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	e4 52       	subi	r30, 0x24	; 36
    174e:	fd 4f       	sbci	r31, 0xFD	; 253
    1750:	20 81       	ld	r18, Z
    1752:	31 81       	ldd	r19, Z+1	; 0x01
    1754:	82 1b       	sub	r24, r18
    1756:	93 0b       	sbc	r25, r19
    1758:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    175c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
		if (CurDelay <= MINDELAY || CurDelay > MAXDELAY)
    1760:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    1764:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    1768:	81 3f       	cpi	r24, 0xF1	; 241
    176a:	92 40       	sbci	r25, 0x02	; 2
    176c:	38 f0       	brcs	.+14     	; 0x177c <stepUpdateDelay+0xe6>
    176e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    1772:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	9a 40       	sbci	r25, 0x0A	; 10
    177a:	30 f0       	brcs	.+12     	; 0x1788 <stepUpdateDelay+0xf2>
		{//overflow protection
			CurDelay = MINDELAY;
    177c:	80 ef       	ldi	r24, 0xF0	; 240
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    1784:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
		}
		if(accSteps<Steps2Acc)
    1788:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <accSteps>
    178c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Steps2Acc>
    1790:	98 17       	cp	r25, r24
    1792:	28 f4       	brcc	.+10     	; 0x179e <stepUpdateDelay+0x108>
		{//acceleration increase
			accSteps++;
    1794:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <accSteps>
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <accSteps>
	}else
	{
		return 0;
	}
	
	OCR3A = CurDelay;//set the new delay
    179e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <CurDelay>
    17a2:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <CurDelay+0x1>
    17a6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    17aa:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	return 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	08 95       	ret
		{//acceleration increase
			accSteps++;
		}
	}else
	{
		return 0;
    17b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	OCR3A = CurDelay;//set the new delay
	return 1;
}
    17b4:	08 95       	ret

000017b6 <stepTimer_init>:


//Initializes the hardware timer used to control the stepper
void stepTimer_init (void)
{
	TCCR3B |= _BV(WGM32);//Set CTC mode
    17b6:	e1 e9       	ldi	r30, 0x91	; 145
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 60       	ori	r24, 0x08	; 8
    17be:	80 83       	st	Z, r24
	OCR3A = 0xFFFF; //Clear compare register A
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    17c8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000; //Clear count register
    17cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    17d0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	TIMSK3 |= _BV(OCIE3A);  //Enable Interrupt
    17d4:	e1 e7       	ldi	r30, 0x71	; 113
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	80 83       	st	Z, r24
    17de:	08 95       	ret

000017e0 <stepStart>:
	return;
} //stepTimer_init

//enable the stepper timer and reset the stepper.
void stepStart(void){
	TCNT3 = 0x0000;//Reset counter
    17e0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    17e4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	OCR3A = MAXDELAY;//Set compare value
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3a e0       	ldi	r19, 0x0A	; 10
    17ec:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    17f0:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR3B |= _BV(CS31) | _BV(CS30);//Enable Stepper with prescaler
    17f4:	e1 e9       	ldi	r30, 0x91	; 145
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	83 60       	ori	r24, 0x03	; 3
    17fc:	80 83       	st	Z, r24
	TIFR3 |= _BV(OCF3A);//Reset interrupt flag
    17fe:	88 b3       	in	r24, 0x18	; 24
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	88 bb       	out	0x18, r24	; 24
	CurDelay = MAXDELAY;//Reset CurDelay
    1804:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <CurDelay+0x1>
    1808:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <CurDelay>
    180c:	08 95       	ret

0000180e <stepStop>:
}//stepStart

//stop the stepper timer
void stepStop(void){
	TCCR3B &= ~_BV(CS31);//Disable timer
    180e:	e1 e9       	ldi	r30, 0x91	; 145
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8d 7f       	andi	r24, 0xFD	; 253
    1816:	80 83       	st	Z, r24
	TCCR3B &=~_BV(CS30);
    1818:	80 81       	ld	r24, Z
    181a:	8e 7f       	andi	r24, 0xFE	; 254
    181c:	80 83       	st	Z, r24
    181e:	08 95       	ret

00001820 <stepCalcAcc>:
	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	//FIRST STAGE: positive jerk
	CurAcc[steps] = 0;
    1820:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <CurAcc+0x1>
    1824:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <CurAcc>
/************************************************************************/
void stepCalcAcc(void){

	uint16_t JERK = MAXACC/JERKSTEPS;
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3a e0       	ldi	r19, 0x0A	; 10

	//FIRST STAGE: positive jerk
	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	24 c0       	rjmp	.+72     	; 0x187a <stepCalcAcc+0x5a>
		delay -=CurAcc[steps-1];
    1832:	fc 01       	movw	r30, r24
    1834:	31 97       	sbiw	r30, 0x01	; 1
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	e4 52       	subi	r30, 0x24	; 36
    183c:	fd 4f       	sbci	r31, 0xFD	; 253
    183e:	40 81       	ld	r20, Z
    1840:	51 81       	ldd	r21, Z+1	; 0x01
    1842:	24 1b       	sub	r18, r20
    1844:	35 0b       	sbc	r19, r21
		CurAcc[steps] = CurAcc[steps-1]+JERK;
    1846:	40 81       	ld	r20, Z
    1848:	51 81       	ldd	r21, Z+1	; 0x01
    184a:	44 5c       	subi	r20, 0xC4	; 196
    184c:	5f 4f       	sbci	r21, 0xFF	; 255
    184e:	fc 01       	movw	r30, r24
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	e4 52       	subi	r30, 0x24	; 36
    1856:	fd 4f       	sbci	r31, 0xFD	; 253
    1858:	51 83       	std	Z+1, r21	; 0x01
    185a:	40 83       	st	Z, r20
		if(CurAcc[steps]>MAXACC){
    185c:	40 81       	ld	r20, Z
    185e:	51 81       	ldd	r21, Z+1	; 0x01
    1860:	41 3f       	cpi	r20, 0xF1	; 241
    1862:	51 05       	cpc	r21, r1
    1864:	48 f0       	brcs	.+18     	; 0x1878 <stepCalcAcc+0x58>
			CurAcc[steps] = MAXACC;
    1866:	fc 01       	movw	r30, r24
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	e4 52       	subi	r30, 0x24	; 36
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
    1870:	40 ef       	ldi	r20, 0xF0	; 240
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	51 83       	std	Z+1, r21	; 0x01
    1876:	40 83       	st	Z, r20
	uint16_t steps = 0;
	uint16_t delay = MAXDELAY;

	//FIRST STAGE: positive jerk
	CurAcc[steps] = 0;
	for(steps = 1; steps<JERKSTEPS; steps++){
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	91 05       	cpc	r25, r1
    187e:	c8 f2       	brcs	.-78     	; 0x1832 <stepCalcAcc+0x12>
		}
	}//Increase Acceleration
	
	
	//Second Stage: Constant Acceleration
	CurAcc[steps] = MAXACC;
    1880:	fc 01       	movw	r30, r24
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	e4 52       	subi	r30, 0x24	; 36
    1888:	fd 4f       	sbci	r31, 0xFD	; 253
    188a:	40 ef       	ldi	r20, 0xF0	; 240
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	51 83       	std	Z+1, r21	; 0x01
    1890:	40 83       	st	Z, r20
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
    1892:	1a c0       	rjmp	.+52     	; 0x18c8 <stepCalcAcc+0xa8>
		delay -=CurAcc[steps-1];
    1894:	fc 01       	movw	r30, r24
    1896:	31 97       	sbiw	r30, 0x01	; 1
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	e4 52       	subi	r30, 0x24	; 36
    189e:	fd 4f       	sbci	r31, 0xFD	; 253
    18a0:	40 81       	ld	r20, Z
    18a2:	51 81       	ldd	r21, Z+1	; 0x01
    18a4:	24 1b       	sub	r18, r20
    18a6:	35 0b       	sbc	r19, r21
		if(delay<MINDELAY){
    18a8:	20 3f       	cpi	r18, 0xF0	; 240
    18aa:	42 e0       	ldi	r20, 0x02	; 2
    18ac:	34 07       	cpc	r19, r20
    18ae:	10 f4       	brcc	.+4      	; 0x18b4 <stepCalcAcc+0x94>
			delay = MINDELAY;
    18b0:	20 ef       	ldi	r18, 0xF0	; 240
    18b2:	32 e0       	ldi	r19, 0x02	; 2
		}
		steps++;
    18b4:	01 96       	adiw	r24, 0x01	; 1
		CurAcc[steps] = MAXACC;
    18b6:	fc 01       	movw	r30, r24
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	e4 52       	subi	r30, 0x24	; 36
    18be:	fd 4f       	sbci	r31, 0xFD	; 253
    18c0:	40 ef       	ldi	r20, 0xF0	; 240
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	51 83       	std	Z+1, r21	; 0x01
    18c6:	40 83       	st	Z, r20
	}//Increase Acceleration
	
	
	//Second Stage: Constant Acceleration
	CurAcc[steps] = MAXACC;
	while((delay -MAXACC -JERK*JERKSTEPS*JERKSTEPS/2)>MINDELAY){
    18c8:	a9 01       	movw	r20, r18
    18ca:	40 5d       	subi	r20, 0xD0	; 208
    18cc:	52 40       	sbci	r21, 0x02	; 2
    18ce:	41 3f       	cpi	r20, 0xF1	; 241
    18d0:	52 40       	sbci	r21, 0x02	; 2
    18d2:	00 f7       	brcc	.-64     	; 0x1894 <stepCalcAcc+0x74>
    18d4:	2a c0       	rjmp	.+84     	; 0x192a <stepCalcAcc+0x10a>
		CurAcc[steps] = MAXACC;
	}//Constant Acceleration
	
	//Third Stage: Negative jerk to Max Speed -> MINDELAY
	while(delay >MINDELAY){
		steps++;
    18d6:	ac 01       	movw	r20, r24
    18d8:	4f 5f       	subi	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
		
		delay -=CurAcc[steps-1];
    18dc:	fc 01       	movw	r30, r24
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	e4 52       	subi	r30, 0x24	; 36
    18e4:	fd 4f       	sbci	r31, 0xFD	; 253
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	26 1b       	sub	r18, r22
    18ec:	37 0b       	sbc	r19, r23
		if(JERK> CurAcc[steps-1]){
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	6c 33       	cpi	r22, 0x3C	; 60
    18f4:	71 05       	cpc	r23, r1
    18f6:	48 f4       	brcc	.+18     	; 0x190a <stepCalcAcc+0xea>
			CurAcc[steps] = 0;
    18f8:	fa 01       	movw	r30, r20
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	e4 52       	subi	r30, 0x24	; 36
    1900:	fd 4f       	sbci	r31, 0xFD	; 253
    1902:	11 82       	std	Z+1, r1	; 0x01
    1904:	10 82       	st	Z, r1
		CurAcc[steps] = MAXACC;
	}//Constant Acceleration
	
	//Third Stage: Negative jerk to Max Speed -> MINDELAY
	while(delay >MINDELAY){
		steps++;
    1906:	ca 01       	movw	r24, r20
		
		delay -=CurAcc[steps-1];
		if(JERK> CurAcc[steps-1]){
			CurAcc[steps] = 0;
			break;
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <stepCalcAcc+0x112>
			}else{
			CurAcc[steps] = CurAcc[steps-1]-JERK;
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	fc 01       	movw	r30, r24
    1910:	e4 52       	subi	r30, 0x24	; 36
    1912:	fd 4f       	sbci	r31, 0xFD	; 253
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	cc 97       	sbiw	r24, 0x3c	; 60
    191a:	fa 01       	movw	r30, r20
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	e4 52       	subi	r30, 0x24	; 36
    1922:	fd 4f       	sbci	r31, 0xFD	; 253
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
		CurAcc[steps] = MAXACC;
	}//Constant Acceleration
	
	//Third Stage: Negative jerk to Max Speed -> MINDELAY
	while(delay >MINDELAY){
		steps++;
    1928:	ca 01       	movw	r24, r20
		steps++;
		CurAcc[steps] = MAXACC;
	}//Constant Acceleration
	
	//Third Stage: Negative jerk to Max Speed -> MINDELAY
	while(delay >MINDELAY){
    192a:	21 3f       	cpi	r18, 0xF1	; 241
    192c:	42 e0       	ldi	r20, 0x02	; 2
    192e:	34 07       	cpc	r19, r20
    1930:	90 f6       	brcc	.-92     	; 0x18d6 <stepCalcAcc+0xb6>
		}

	}//Decrease Acceleration
	
	//Record how many steps it take to reach maximum speed from rest
	Steps2Acc = steps;
    1932:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Steps2Acc>
    1936:	08 95       	ret

00001938 <stepCalibrate>:
                                                               */
/************************************************************************/
int8_t stepCalibrate(void){
	
	//Calculate the acceleration profile
	stepCalcAcc();
    1938:	73 df       	rcall	.-282    	; 0x1820 <stepCalcAcc>
	
	//set stepper to slowest speed
	CurDelay = MAXDELAY;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	9a e0       	ldi	r25, 0x0A	; 10
    193e:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <CurDelay+0x1>
    1942:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <CurDelay>
	CurPosition = 0;//set CurPosition
    1946:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	
	//move 50 steps to align poles and steps
	Parts[0] = 50;//Set stepper to move 50 steps
    194a:	82 e3       	ldi	r24, 0x32	; 50
    194c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Parts>
	stepStart();//Start stepper
    1950:	47 df       	rcall	.-370    	; 0x17e0 <stepStart>
	while(CurError !=0)
    1952:	03 c0       	rjmp	.+6      	; 0x195a <stepCalibrate+0x22>
	{
		//prevent stepper from accelerating
		DECELFLAG = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <DECELFLAG>
	CurPosition = 0;//set CurPosition
	
	//move 50 steps to align poles and steps
	Parts[0] = 50;//Set stepper to move 50 steps
	stepStart();//Start stepper
	while(CurError !=0)
    195a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    195e:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1962:	89 2b       	or	r24, r25
    1964:	b9 f7       	brne	.-18     	; 0x1954 <stepCalibrate+0x1c>
		//prevent stepper from accelerating
		DECELFLAG = 1;
	}
	
	//move until HE triggers ISR(INT3_vect)
	HALLSENSOR = 0;
    1966:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <HALLSENSOR>
	CurPosition = 0;
    196a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	while(!HALLSENSOR)
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <stepCalibrate+0x5a>
	{
		//keep stepper moving forwards
		if(abs(CurError)<30 && !HALLSENSOR){
    1970:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <CurError>
    1974:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <CurError+0x1>
    1978:	99 23       	and	r25, r25
    197a:	1c f4       	brge	.+6      	; 0x1982 <stepCalibrate+0x4a>
    197c:	91 95       	neg	r25
    197e:	81 95       	neg	r24
    1980:	91 09       	sbc	r25, r1
    1982:	4e 97       	sbiw	r24, 0x1e	; 30
    1984:	34 f4       	brge	.+12     	; 0x1992 <stepCalibrate+0x5a>
    1986:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <HALLSENSOR>
    198a:	81 11       	cpse	r24, r1
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <stepCalibrate+0x5a>
			CurPosition = 0;
    198e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CurPosition>
	}
	
	//move until HE triggers ISR(INT3_vect)
	HALLSENSOR = 0;
	CurPosition = 0;
	while(!HALLSENSOR)
    1992:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <HALLSENSOR>
    1996:	88 23       	and	r24, r24
    1998:	59 f3       	breq	.-42     	; 0x1970 <stepCalibrate+0x38>
			CurPosition = 0;
		}
	}//Wait for hall sensor to trigger
	
	//move stepper to face black region
	Parts[0] = B_ID;
    199a:	82 e3       	ldi	r24, 0x32	; 50
    199c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Parts>
	return 1;
}
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	08 95       	ret

000019a4 <__divmodhi4>:
    19a4:	97 fb       	bst	r25, 7
    19a6:	07 2e       	mov	r0, r23
    19a8:	16 f4       	brtc	.+4      	; 0x19ae <__divmodhi4+0xa>
    19aa:	00 94       	com	r0
    19ac:	06 d0       	rcall	.+12     	; 0x19ba <__divmodhi4_neg1>
    19ae:	77 fd       	sbrc	r23, 7
    19b0:	08 d0       	rcall	.+16     	; 0x19c2 <__divmodhi4_neg2>
    19b2:	1a d0       	rcall	.+52     	; 0x19e8 <__udivmodhi4>
    19b4:	07 fc       	sbrc	r0, 7
    19b6:	05 d0       	rcall	.+10     	; 0x19c2 <__divmodhi4_neg2>
    19b8:	3e f4       	brtc	.+14     	; 0x19c8 <__divmodhi4_exit>

000019ba <__divmodhi4_neg1>:
    19ba:	90 95       	com	r25
    19bc:	81 95       	neg	r24
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	08 95       	ret

000019c2 <__divmodhi4_neg2>:
    19c2:	70 95       	com	r23
    19c4:	61 95       	neg	r22
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255

000019c8 <__divmodhi4_exit>:
    19c8:	08 95       	ret

000019ca <__umulhisi3>:
    19ca:	a2 9f       	mul	r26, r18
    19cc:	b0 01       	movw	r22, r0
    19ce:	b3 9f       	mul	r27, r19
    19d0:	c0 01       	movw	r24, r0
    19d2:	a3 9f       	mul	r26, r19
    19d4:	70 0d       	add	r23, r0
    19d6:	81 1d       	adc	r24, r1
    19d8:	11 24       	eor	r1, r1
    19da:	91 1d       	adc	r25, r1
    19dc:	b2 9f       	mul	r27, r18
    19de:	70 0d       	add	r23, r0
    19e0:	81 1d       	adc	r24, r1
    19e2:	11 24       	eor	r1, r1
    19e4:	91 1d       	adc	r25, r1
    19e6:	08 95       	ret

000019e8 <__udivmodhi4>:
    19e8:	aa 1b       	sub	r26, r26
    19ea:	bb 1b       	sub	r27, r27
    19ec:	51 e1       	ldi	r21, 0x11	; 17
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <__udivmodhi4_ep>

000019f0 <__udivmodhi4_loop>:
    19f0:	aa 1f       	adc	r26, r26
    19f2:	bb 1f       	adc	r27, r27
    19f4:	a6 17       	cp	r26, r22
    19f6:	b7 07       	cpc	r27, r23
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <__udivmodhi4_ep>
    19fa:	a6 1b       	sub	r26, r22
    19fc:	b7 0b       	sbc	r27, r23

000019fe <__udivmodhi4_ep>:
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	5a 95       	dec	r21
    1a04:	a9 f7       	brne	.-22     	; 0x19f0 <__udivmodhi4_loop>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	08 95       	ret

00001a10 <_exit>:
    1a10:	f8 94       	cli

00001a12 <__stop_program>:
    1a12:	ff cf       	rjmp	.-2      	; 0x1a12 <__stop_program>
